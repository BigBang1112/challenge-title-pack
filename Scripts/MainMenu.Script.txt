#RequireContext CManiaAppTitle

#Include "TextLib" as TextLib
#Include "ColorLib" as ColorLib
#Include "TimeLib" as TimeLib

#Include "Libs/BigBang1112/MX.Script.txt" as MX
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Task.Script.txt" as Task
#Include "Libs/BigBang1112/Data.Script.txt" as Data
#Include "Libs/BigBang1112/Http.Script.txt" as Http
#Include "Libs/BigBang1112/Auth.Script.txt" as Auth

#Include "Libs/Challenge/Devmode.Script.txt" as Devmode

#Setting S_Devmode True

#Struct SMapInfo {
	Text Name;
	Text AuthorLogin;
	Text AuthorNickName;
	Text FileName;
	Text MapUid;
	Boolean IsPlayable;
}

Void UpdateLocalMaps(Text _Folder, Text _SearchMapName, Text _SearchAuthorName) {
	declare FlatSearch = (_SearchMapName != "" || _SearchAuthorName != "");
	Task::Async_DataFileMgr("MAPLIST_LOCAL_FOLDER",DataFileMgr.Map_GetFilteredGameList(2,_Folder,FlatSearch));
	Data::Set("MAPLIST_LOCAL_SEARCHMAPNAME",_SearchMapName);
	Data::Set("MAPLIST_LOCAL_SEARCHAUTHORNAME",_SearchAuthorName);
}

Void UpdateOfficialScripts(Text[] _Scripts) {
	Layers::SendEvent("Quickplay", "ScriptList_Official_Update", [_Scripts.tojson()]);
}

main() {
	Layers::Create("Menu", Manialink::FromFile("Media/Manialinks/Menu"));
	Layers::Create("Quickplay", Manialink::FromFile("Media/Manialinks/Quickplay"));
	Layers::Create("Top", Manialink::FromFile("Media/Manialinks/Top"));
	
	Layers::Create("Editor", Manialink::FromFile("Media/Manialinks/Editor"));
	Layers::Create("Loading", "file://Media/Manialinks/Loading.xml", True, CUILayer::EUILayerType::LoadingScreen);
	
	Layers::Show("Menu");
	Layers::Show("Quickplay");
	Layers::Show("Top");
	
	if(S_Devmode) {
		Devmode::Start();
	}
	
	Layers::SendEvent("Editor", "Code_SetText", [File::Read("Media/Challenges/Default.Script.txt")]);
	
	declare OfficialScripts = [
		"Checkpointless.Script.txt",
		"Reverse.Script.txt",
		"Terrainless.Script.txt",
		"Default.Script.txt"
	];
	
	UpdateLocalMaps("","","");
	UpdateOfficialScripts(OfficialScripts);
	
	//EnableMenuNavigationInputs = True;

	while(True) {
		foreach(Event,PendingEvents) {
			if(Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
				if(Event.CustomEventType == "Test") {
					if(TitleFlow.IsReady)
					TitleFlow.EditMap("A01.Map.Gbx", "Modifier.Script.txt","""<settings>
	<setting name="S_Build" type="boolean" value="True"/>
	<setting name="S_ScriptType" type="text" value="Test"/>
</settings>""");
				}
				if(Event.CustomEventType == "Designer") {
					TitleFlow.OpenEditor(CTitleControl::EEditorType::InterfaceDesigner);
				}
				if(Event.CustomEventType == "Button_Exit") {
					Menu_Quit();
				}
				if(Event.CustomEventType == "Button_CreateChallenge") {
					Layers::Show("Editor");
					Layers::Hide("Menu");
					Layers::Hide("Quickplay");
					Layers::Hide("Top");
				}
				if(Event.CustomEventType == "Button_CreateChallenge_Back") {
					Layers::Show("Menu");
					Layers::Show("Quickplay");
					Layers::Show("Top");
					Layers::Hide("Editor");
				}
				if(Event.CustomEventType == "Button_Start") {
					declare MapLocation = Event.CustomEventData[0];
					
					if(MapLocation == "ManiaExchange") {
						/*TitleControl.ProcessManiaCodeXml("""<?xml version='1.0' encoding='utf-8' ?>
<maniacode noconfirmation="1">
	<install_map>
		<name>Good Name</name>
		<url>https://tm.mania-exchange.com/tracks/download/162255</url>
	</install_map>
	<show_message>
		<message>Hello</message>
	</show_message>
</maniacode>""");*/
					}
					if(MapLocation == "Local") {
						declare SMapInfo MapInfo;
						MapInfo.fromjson(Event.CustomEventData[1]);
						declare ScriptLocation = Event.CustomEventData[2];
						declare Script = Event.CustomEventData[3];
						
						if(MapInfo.MapUid == "") {
							Dialog_Message("Please select a map.");
							continue;
						}
						if(!MapInfo.IsPlayable) {
							Dialog_Message("This map wasn't validated in original version.");
							continue;
						}
					
						if(TitleFlow.IsReady)
						TitleFlow.EditMap(MapInfo.FileName, "Modifier.Script.txt", """<settings>
	<setting name="S_Build" type="boolean" value="True"/>
	<setting name="S_ScriptType" type="text" value="{{{ScriptLocation}}}"/>
	<setting name="S_ScriptFileName" type="text" value="{{{Script}}}"/>
</settings>""");
					}
				}
				if(Event.CustomEventType == "MapList_Local_Folder") {
					declare Folder = Event.CustomEventData[0];
					declare SearchMapName = Event.CustomEventData[1];
					declare SearchAuthorName = Event.CustomEventData[2];
					UpdateLocalMaps(Folder, SearchMapName, SearchAuthorName);
				}
				if(Event.CustomEventType == "MapList_ManiaExchange_Add") {
					declare MX::SMXSearchFilter Search;
					Search.Page = Event.CustomEventData[0];
					Search.TrackName = Event.CustomEventData[1];
					Search.Author = Event.CustomEventData[2];
					Search.Limit = "20";
					if(!MX::AsyncSearch("MX_SEARCH_ADD", "tm", Search, True)) {
					
					}
				}
				if(Event.CustomEventType == "MapList_ManiaExchange_Update") {
					declare MX::SMXSearchFilter Search;
					Search.Page = Event.CustomEventData[0];
					Search.TrackName = Event.CustomEventData[1];
					Search.Author = Event.CustomEventData[2];
					Search.Limit = "20";
					if(!MX::AsyncSearch("MX_SEARCH_UPDATE", "tm", Search, True)) {
					
					}
				}
			}
		}
		
		if(MX::IsAsyncRequestCompleted("MX_SEARCH_ADD")) {
			if(MX::IsAsyncRequestSuccessful("MX_SEARCH_ADD")) {
				Layers::SendEvent("Quickplay", "MapList_MX_Add", [MX::GetAsyncSearchResult("MX_SEARCH_ADD").tojson()]);
			}
			MX::DestroyAsyncRequest("MX_SEARCH_ADD");
		}
		if(MX::IsAsyncRequestCompleted("MX_SEARCH_UPDATE")) {
			if(MX::IsAsyncRequestSuccessful("MX_SEARCH_UPDATE")) {
				Layers::SendEvent("Quickplay", "MapList_MX_Update", [MX::GetAsyncSearchResult("MX_SEARCH_UPDATE").tojson()]);
			}
			MX::DestroyAsyncRequest("MX_SEARCH_UPDATE");
		}
		
		if(Task::IsCompleted("MAPLIST_LOCAL_FOLDER")) {
			if(Task::IsSuccessful("MAPLIST_LOCAL_FOLDER")) {
				declare MapList = (Task::Get("MAPLIST_LOCAL_FOLDER") as CTaskResult_MapList);
				
				declare Text[] SubFolders;
				
				declare SearchMapName = Data::Get("MAPLIST_LOCAL_SEARCHMAPNAME");
				declare SearchAuthorName = Data::Get("MAPLIST_LOCAL_SEARCHAUTHORNAME");
				
				if(SearchMapName == "" && SearchAuthorName == "") {
					SubFolders.add("...");
					foreach(Folder,MapList.SubFolders) SubFolders.add(Folder);
				}
				
				declare SMapInfo[] MapInfos;
				foreach(MapInfo,MapList.MapInfos) {
					if(SearchMapName != "")
						if(!TextLib::Find(SearchMapName, MapInfo.Name, False, False)) continue;
					if(SearchAuthorName != "")
						if(!TextLib::Find(SearchAuthorName, MapInfo.AuthorLogin ^ MapInfo.AuthorNickName, False, False)) continue;
				
					declare SMapInfo Info;
					Info.Name = MapInfo.Name;
					Info.AuthorLogin = MapInfo.AuthorLogin;
					Info.AuthorNickName = MapInfo.AuthorNickName;
					Info.FileName = MapInfo.FileName;
					Info.MapUid = MapInfo.MapUid;
					Info.IsPlayable = MapInfo.IsPlayable;
					MapInfos.add(Info);
				}
						
				Layers::SendEvent("Quickplay", "MapList_Local_Update", [MapList.Path,SubFolders.tojson(),MapInfos.tojson()]);
				Task::Destroy_DataFileMgr("MAPLIST_LOCAL_FOLDER");
			}
		}
		
		Auth::Loop();
	
		yield;
	}
}