#RequireContext CMapEditorPlugin

#Include "TextLib" as TextLib
#Include "MapUnits" as MapUnits

#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers

#Include "Libs/Challenge/Conversion.Script.txt" as Conversion
#Include "Libs/Challenge/ModifierBase.Script.txt" as ModifierBase

#Setting S_Build True

#Setting S_ScriptNames ""
#Setting S_ScriptTypes ""

#Setting S_TestMode False

#Const S_HideUI True

declare CUILayer LayerAPI;

Text GetScriptFileName(Text _ScriptFullName) {
	declare Path = TextLib::Split("\\", S_ScriptNames);
	if(Path.count != 0) return Path[Path.count-1];
	return "";
}

Int3 ToInt3(Text _Int3) {
	declare Int3 Int;
	declare NewText = TextLib::Replace(TextLib::SubText(_Int3,1,TextLib::Length(_Int3)-2)," ","");
	declare Values = TextLib::Split(",",NewText);
	for(i,0,Values.count-1)
		Int[i] = TextLib::ToInteger(Values[i]);
	return Int;
}

Boolean ToBoolean(Text _Boolean) {
	return (_Boolean == "True");
}

Text CBlockCardinalDirectionsToText(CBlock::CardinalDirections _Direction) {
	switch(_Direction) {
		case CBlock::CardinalDirections::North: { return "North"; }
		case CBlock::CardinalDirections::South: { return "South"; }
		case CBlock::CardinalDirections::West: { return "West"; }
		case CBlock::CardinalDirections::East: { return "East"; }
	}
	return "";
}

CMapEditorPlugin::CardinalDirections TextToCMapEditorPluginCardinalDirections(Text _Direction) {
	switch(_Direction) {
		case "North": { return CMapEditorPlugin::CardinalDirections::North; }
		case "South": { return CMapEditorPlugin::CardinalDirections::South; }
		case "West": { return CMapEditorPlugin::CardinalDirections::West; }
		case "East": { return CMapEditorPlugin::CardinalDirections::East; }
	}
	return CMapEditorPlugin::CardinalDirections::North;
}

Void Prepare() {
	HideEditorInterface = S_HideUI;
	EditMode = CMapEditorPlugin::EditMode::FreeLook;
	declare Success = SetMapType("TrackMania/Challenge");
	Map.MapName ^= "$z - Reverse";
	
	Layers::Create("ModifierIntro",Manialink::FromFile("Media/Manialinks/Modifier/ModifierIntro"));
	Layers::Create("ModifierScript",Manialink::FromFile("Media/Manialinks/Modifier/ModifierScript"));
	Layers::Create("ModifierStatus",Manialink::FromFile("Media/Manialinks/Modifier/ModifierStatus"));
	Layers::Create("ModifierMetadata",Manialink::FromFile("Media/Manialinks/Modifier/ModifierMetadata"));
	Layers::Create("ModifierActions",Manialink::FromFile("Media/Manialinks/Modifier/ModifierActions"));
	Layers::Create("ModifierResult",Manialink::FromFile("Media/Manialinks/Modifier/ModifierResult"));
	
	Layers::SetAnimationInOut("ModifierScript",CUILayer::EUILayerAnimation::DownSlow);
	Layers::SetAnimationInOut("ModifierStatus",CUILayer::EUILayerAnimation::DownSlow);
	Layers::SetAnimationInOut("ModifierActions",CUILayer::EUILayerAnimation::RightSlow);
	Layers::SetAnimationInOut("ModifierMetadata",CUILayer::EUILayerAnimation::UpSlow);
	
	Layers::SetAnimationInOut("ModifierResult",CUILayer::EUILayerAnimation::DownSlow);
	
	Layers::Show("ModifierIntro");
	sleep(500);
	LayerCustomEvent(Layers::Get("ModifierIntro"), "Map", [Map.MapInfo.Name]);
	LayerCustomEvent(Layers::Get("ModifierIntro"), "Show", []);
	sleep(2000);
	LayerCustomEvent(Layers::Get("ModifierIntro"), "Hide", []);

	Layers::Show("ModifierScript");
	sleep(100);
	Layers::Show("ModifierStatus");
	sleep(100);
	Layers::Show("ModifierActions");
	sleep(100);
	Layers::Show("ModifierMetadata");
	sleep(200);
}

Void ValidateScript() {

}

Void Begin(Text _ScriptName) {
	Layers::SendEvent("ModifierScript", "ScriptName", [_ScriptName]);
	Layers::SendEvent("ModifierStatus", "Status", ["MODIFYING..."]);
}

Void Finish() {
	/*sleep(500);
	Layers::SendEvent("ModifierStatus", "Status", ["COMPUTING SHADOWS..."]);
	Layers::SendEvent("ModifierStatus", "Message", [""]);
	sleep(200);
	//ComputeShadows();
	//wait(CurrentShadowsQuality != CMapEditorPlugin::ShadowsQuality::NotComputed);*/
	Layers::Hide("ModifierScript");
	Layers::Hide("ModifierStatus");
	Layers::Hide("ModifierActions");
	Layers::Hide("ModifierMetadata");
	sleep(500);
	Layers::Show("ModifierResult");
	Layers::SendEvent("ModifierResult", "Show", []);
}

Void Success() {

}

Void Confusion() {
	
}

Void Revert() {
	
}

Void Solution() {

}

Void Respond(CMapEditorPluginEvent _Event, Text[] _Data) {
	LayerCustomEvent(LayerAPI, _Event.CustomEventType^"_Response", _Data);
}

Void ProcessRequest(CMapEditorPluginEvent _Event) {
	declare Event <=> _Event;
	
	switch(Event.CustomEventType) {
		case "Ch_ComputeShadows": {
			ComputeShadows();
			wait(CurrentShadowsQuality == CMapEditorPlugin::ShadowsQuality::VeryFast);
			Respond(Event, []);
		}
		case "Ch_RemoveAllBlocks": {
			RemoveAllBlocks();
			Respond(Event, []);
		}
		case "Ch_RemoveAllTerrain": {
			RemoveAllTerrain();
			Respond(Event, []);
		}
		case "Ch_RemoveAllOffZone": {
			RemoveAllOffZone();
			Respond(Event, []);
		}
		case "Ch_RemoveAllObjects": {
			RemoveAllObjects();
			Respond(Event, []);
		}
		case "Ch_RemoveAll": {
			RemoveAll();
			Respond(Event, []);
		}
		case "Ch_RemoveAllBlocksAndTerrain": {
			RemoveAllBlocksAndTerrain();
			Respond(Event, []);
		}
		case "Ch_PreloadAllBlocks": {
			PreloadAllBlocks();
			Respond(Event, []);
		}
		case "Ch_PreloadAllItems": {
			PreloadAllItems();
			Respond(Event, []);
		}
		case "Ch_CanPlaceBlock": {
			declare BlockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);
			declare OnGround = Conversion::ToBoolean(Event.CustomEventData[3]);
			declare VariantIndex = TextLib::ToInteger(Event.CustomEventData[4]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceBlock(BlockModel, Coord, Direction, OnGround, VariantIndex);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceBlock_NoDestruction": {
			declare BlockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);
			declare OnGround = Conversion::ToBoolean(Event.CustomEventData[3]);
			declare VariantIndex = TextLib::ToInteger(Event.CustomEventData[4]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceBlock_NoDestruction(BlockModel, Coord, Direction, OnGround, VariantIndex);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceBlock": {
			declare BlockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceBlock(BlockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceBlock_NoDestruction": {
			declare BlockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceBlock_NoDestruction(BlockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceRoadBlocks": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceRoadBlocks(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceRoadBlocks": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceRoadBlocks(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceTerrainBlocks": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceTerrainBlocks(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceTerrainBlocks": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceTerrainBlocks(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceTerrainBlocks_NoDestruction": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceTerrainBlocks_NoDestruction(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceMacroblock": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock_NoDestruction": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock_NoDestruction(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceMacroblock_NoDestruction": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock_NoDestruction(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock_NoTerrain": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceMacroblock_NoTerrain": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_RemoveMacroblock": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = RemoveMacroblock(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_RemoveMacroblock_NoTerrain": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = RemoveMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_GetBlock": {
			declare Coord = Conversion::ToInt3(Event.CustomEventData[0]);

			declare Response = GetBlock(Coord);
			declare Block = Conversion::ToSChBlock(Response);

			Respond(Event, [Block.tojson()]);
		}
		case "Ch_RemoveBlock": {
			declare Coord = Conversion::ToInt3(Event.CustomEventData[0]);

			declare Response = RemoveBlock(Coord);
			Respond(Event, [""^Response]);
		}
		case "Ch_RemoveTerrainBlocks": {
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[0]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[1]);

			declare Response = RemoveTerrainBlocks(StartCoord,EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_GetBlockGroundHeight": {
			declare BlockName = Event.CustomEventData[0];
			declare CoordX = TextLib::ToInteger(Event.CustomEventData[1]);
			declare CoordY = TextLib::ToInteger(Event.CustomEventData[2]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[3]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = GetBlockGroundHeight(BlockModel,CoordX,CoordY,Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_GetGroundHeight": {
			declare CoordX = TextLib::ToInteger(Event.CustomEventData[0]);
			declare CoordY = TextLib::ToInteger(Event.CustomEventData[1]);

			declare Response = GetGroundHeight(CoordX,CoordY);
			Respond(Event, [""^Response]);
		}
		case "Ch_GetStartLineBlock": {
			declare Block = GetStartLineBlock();
			declare Response = Conversion::ToSChBlock(Block);
			Respond(Event, [Response.tojson()]);
		}
		case "Ch_SetUndergroundMode": {
			declare Underground = Conversion::ToBoolean(Event.CustomEventData[0]);
			UndergroundMode = Underground;
			Respond(Event, []);
		}
		case "Ch_ReplaceBlock": {
			declare ModifierBase::SChBlock Block;
			declare JsonSuccess = Block.fromjson(Event.CustomEventData[0]);
			declare Replacement = GetBlockModelFromName(Event.CustomEventData[1]);
			declare OppositeDirection = Conversion::ToBoolean(Event.CustomEventData[2]);
			
			declare Direction = Conversion::ToDirectionMap(Block.Direction);
			declare Coord = Block.Coord;
			if(OppositeDirection) Direction = MapUnits::GetOpposedDir(Direction);
			
			declare Removed = RemoveBlock(Coord);
			declare Placed = PlaceBlock(Replacement, Coord, Direction);
			Respond(Event, [""^Removed, ""^Placed]);
		}
		case "Ch_ReplaceAllBlocks": {
			declare BlockName = Event.CustomEventData[0];
			declare Replacement = GetBlockModelFromName(Event.CustomEventData[1]);

			foreach(Block, Blocks) {
				if(Block.BlockModel.Name == BlockName) {
					declare Direction = Conversion::ToDirectionMap(Block.Direction);
					declare Coord = Block.Coord;
			
					declare Removed = RemoveBlock(Coord);
					declare Placed = PlaceBlock(Replacement, Coord, Direction);
				}
			}

			Respond(Event, []);
		}
		case "Ch_SwapBlock": {
			declare ModifierBase::SChBlock Block1;
			declare JsonSuccessBlock1 = Block1.fromjson(Event.CustomEventData[0]);
			declare ModifierBase::SChBlock Block2;
			declare JsonSuccessBlock2 = Block2.fromjson(Event.CustomEventData[1]);

			declare RemovedBlock1 = RemoveBlock(Block1.Coord);
			declare RemovedBlock2 = RemoveBlock(Block2.Coord);

			declare PlacedBlock1 = PlaceBlock(GetBlockModelFromName(Block2.Name), Block1.Coord, Block1.Direction);
			declare PlacedBlock2 = PlaceBlock(GetBlockModelFromName(Block1.Name), Block2.Coord, Block2.Direction);

			Respond(Event, [""^(RemovedBlock1 && RemovedBlock2 && PlacedBlock1 && PlacedBlock2)]);
		}
		case "Ch_GetFinishLineBlocks": {
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, Blocks)
				if(Block.BlockModel.WaypointType == CBlockModel::EWayPointType::Finish)
					ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(Event, [ChBlocks.tojson()]);
		}
		case "Ch_GetCheckpointBlocks": {
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, Blocks)
				if(Block.BlockModel.WaypointType == CBlockModel::EWayPointType::Checkpoint)
					ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(Event, [ChBlocks.tojson()]);
		}
		case "Ch_GetBlocksByBlockName": {
			declare BlockName = Event.CustomEventData[0];
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, Blocks)
				if(Block.BlockModel.Name == BlockName)
					ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(Event, [ChBlocks.tojson()]);
		}
		case "Ch_GetBlocks": {
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, Blocks) ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(Event, [ChBlocks.tojson()]);
		}
		case "Ch_Message": {
			Dialog_Message(Event.CustomEventData[0]);
			Respond(Event, []);
		}
		case "Ch_SetStatusProgress": {
			Layers::SendEvent("ModifierStatus", "Progress", [Event.CustomEventData[0]]);
			Respond(Event, []);
		}
		case "Ch_SetStatusMessage": {
			Layers::SendEvent("ModifierStatus", "Message", [Event.CustomEventData[0]]);
			Respond(Event, []);
		}
		default: {
			log("Unknown request: "^Event.CustomEventType);
			Respond(Event, ["False"]);
		}
	}
}

main() {
	log(<5,7,5>);
	if(!S_Build) return;
	
	declare ScriptNames = TextLib::Replace(S_ScriptNames,"'","\"");
	declare Text[] Scripts;
	if(!Scripts.fromjson(ScriptNames)) return;
	
	Prepare();
	
	foreach(ScriptPair,Scripts) {
		declare Pair = TextLib::Split(" ",ScriptPair);
		declare Script = Pair[0];
		declare Type = Pair[1];
		
		Begin(Script);
		ValidateScript();
	
		declare Text BuildScript;
			
		switch(Type) {
			case "Official": {
				BuildScript = File::Read("Media/Challenges/"^Script);
			}
			case "Local": {
				
			}
			case "Online": {
				
			}
			case "Test": {
				declare persistent Text PERSISTENT_CHALLENGE_CODE for LocalUser;
				BuildScript = PERSISTENT_CHALLENGE_CODE;
			}
		}
			
		LayerAPI = UILayerCreate();
		LayerAPI.ManialinkPage = Manialink::Construct("",File::Read("Media/API_Base.Script.txt")^"""
		
{{{BuildScript}}}
		
"""^File::Read("Media/API.Script.txt")^"""
		
"""^File::Read("Media/API_Main.Script.txt"));
		
		declare Completed = False;
		while(!Completed) {
			foreach(Event,PendingEvents) {
				if(Event.Type == CMapEditorPluginEvent::Type::LayerCustomEvent) {
					if(Event.CustomEventType == "Ch_Complete") {
						Completed = True;
						log("[BUILDER] "^Script^" completed");
					}
					else if(Event.CustomEventType == "Ch_Incompatible") {
						Dialog_Message(Event.CustomEventData[0]);
						Completed = True;
						log("[BUILDER] "^Script^" failed");
					}
					else if(TextLib::StartsWith("Ch_", Event.CustomEventType)) {
						log("[BUILDER] Request: "^Event.CustomEventType);
						ProcessRequest(Event);
					}
				}
			}
		
			yield;
		}

		UILayerDestroy(LayerAPI);

		Layers::SendEvent("ModifierStatus", "Status", ["DONE"]);
		Layers::SendEvent("ModifierStatus", "Message", ["Script finished successfully."]);
		Layers::SendEvent("ModifierStatus", "Progress", ["1"]);
		sleep(500);
	}
	
	Finish();
	
	while(True) {
		foreach(Event,PendingEvents) {
			if(Event.Type == CMapEditorPluginEvent::Type::LayerCustomEvent) {
				if(Event.CustomEventType == "Button_Exit") {
					Quit();
				}
				else if(Event.CustomEventType == "Button_SavePlay") {
					TestMapFromStart();
				}
			}
		}
	
		yield;
	}
}