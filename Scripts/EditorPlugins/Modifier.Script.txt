#RequireContext CMapEditorPlugin

#Include "TextLib" as TextLib
#Include "MapUnits" as MapUnits

#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers

#Include "Libs/Challenge/Conversion.Script.txt" as Conversion
#Include "Libs/Challenge/ModifierBase.Script.txt" as ModifierBase

#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings

#Setting S_Build True

#Setting S_OriginalMapInfo ""
#Setting S_ScriptNames ""
#Setting S_ScriptTypes ""

#Setting S_TestMode False

#Const S_HideUI True

#Struct SChScriptInfo {
	Text Name;
	Text Type;
}

declare CUILayer LayerAPI;
declare Boolean Terminate;

declare ::ShadowsQuality LastShadowsQuality;

declare ModifierBase::SChMap ChMap;

/*Text GetScriptFileName(Text _ScriptFullName) {
	declare Path = TextLib::Split("\\", S_ScriptNames);
	if(Path.count != 0) return Path[Path.count-1];
	return "";
}*/

Int3 ToInt3(Text _Int3) {
	declare Int3 Int;
	declare NewText = TextLib::Replace(TextLib::SubText(_Int3,1,TextLib::Length(_Int3)-2)," ","");
	declare Values = TextLib::Split(",",NewText);
	for(i,0,Values.count-1)
		Int[i] = TextLib::ToInteger(Values[i]);
	return Int;
}

Boolean ToBoolean(Text _Boolean) {
	return (_Boolean == "True");
}

Text CBlockCardinalDirectionsToText(CBlock::CardinalDirections _Direction) {
	switch(_Direction) {
		case CBlock::CardinalDirections::North: { return "North"; }
		case CBlock::CardinalDirections::South: { return "South"; }
		case CBlock::CardinalDirections::West: { return "West"; }
		case CBlock::CardinalDirections::East: { return "East"; }
	}
	return "";
}

::CardinalDirections TextToCMapEditorPluginCardinalDirections(Text _Direction) {
	switch(_Direction) {
		case "North": { return ::CardinalDirections::North; }
		case "South": { return ::CardinalDirections::South; }
		case "West": { return ::CardinalDirections::West; }
		case "East": { return ::CardinalDirections::East; }
	}
	return ::CardinalDirections::North;
}

Text GetVariant(Int3 _Coord) {
	declare Variant = "Air";
	if(GetGroundHeight(_Coord.X, _Coord.Z) == _Coord.Y) {
		Variant = "Ground";
		declare Block = GetBlock(_Coord);
		if(Block != Null) {
			if(Block.BlockModel.Name == "Forest") Variant = "Forest";
		}
	}
	return Variant;
}

Boolean SafeRemoveBlock(CBlock _Block) {
	if(_Block == Null) return False;
	if(GetBlock(_Block.Coord) == Null) return False;
	
	if(GetBlock(_Block.Coord).BlockScriptId == _Block.BlockScriptId) 
		return RemoveBlock(_Block.Coord);
	return False;
}

Boolean SafeRemoveBlock(ModifierBase::SChBlock _ChBlock) {
	for(i,0,Blocks.count-1)
		if(Blocks[i].BlockScriptId == _ChBlock.Id) return SafeRemoveBlock(Blocks[i]);
	return False;
}

Boolean PlaceBlockSpecial(Text _BlockModelName, Int3 _Coord, ::CardinalDirections _Direction) {
	declare BlockModel = GetBlockModelFromName(_BlockModelName);
	if(BlockModel == Null) {
		declare MacroblockModel = GetMacroblockModelFromFilePath("""{{{Map.CollectionName}}}\{{{_BlockModelName}}}-{{{GetVariant(_Coord)}}}.Macroblock.Gbx""");
		if(MacroblockModel == Null) return False;
		return PlaceMacroblock(MacroblockModel, _Coord, _Direction);
	}
	return PlaceBlock(BlockModel, _Coord, _Direction);
}

Void Prepare(ModifierBase::SChMap _Map) {
	HideEditorInterface = S_HideUI;
	EditMode = CMapEditorPlugin::EditMode::FreeLook;
	Map.MapName = _Map.Name^"$z -";
	
	Layers::Create("ModifierIntro",Manialink::FromFile("Media/Manialinks/Modifier/ModifierIntro", True, ["TextAnimation"], Settings::Get().Theme));
	Layers::Create("ModifierScript",Manialink::FromFile("Media/Manialinks/Modifier/ModifierScript", True, ["TextAnimation"], Settings::Get().Theme));
	Layers::Create("ModifierStatus",Manialink::FromFile("Media/Manialinks/Modifier/ModifierStatus", True, ["TextAnimation"], Settings::Get().Theme));
	Layers::Create("ModifierMetadata",Manialink::FromFile("Media/Manialinks/Modifier/ModifierMetadata", True, ["TextAnimation"], Settings::Get().Theme));
	Layers::Create("ModifierActions",Manialink::FromFile("Media/Manialinks/Modifier/ModifierActions", True, ["TextAnimation"], Settings::Get().Theme));
	Layers::Create("ModifierResult",Manialink::FromFile("Media/Manialinks/Modifier/ModifierResult", True, ["TextAnimation"], Settings::Get().Theme));
	
	Layers::SetAnimationInOut("ModifierScript",CUILayer::EUILayerAnimation::DownSlow);
	Layers::SetAnimationInOut("ModifierStatus",CUILayer::EUILayerAnimation::DownSlow);
	Layers::SetAnimationInOut("ModifierActions",CUILayer::EUILayerAnimation::RightSlow);
	Layers::SetAnimationInOut("ModifierMetadata",CUILayer::EUILayerAnimation::UpSlow);
	
	Layers::SetAnimationInOut("ModifierResult",CUILayer::EUILayerAnimation::DownSlow);
	
	Layers::Show("ModifierIntro");
	sleep(500);
	LayerCustomEvent(Layers::Get("ModifierIntro"), "Map", [_Map.Name]);
	LayerCustomEvent(Layers::Get("ModifierIntro"), "Show", []);
	sleep(2000);
	LayerCustomEvent(Layers::Get("ModifierIntro"), "Hide", []);

	Layers::Show("ModifierScript");
	sleep(100);
	Layers::Show("ModifierStatus");
	sleep(100);
	Layers::Show("ModifierActions");
	sleep(100);
	Layers::Show("ModifierMetadata");
	sleep(200);
}

Void ValidateScript() {

}

Void Begin(Text _ScriptName) {
	Layers::SendEvent("ModifierScript", "ScriptName", [_ScriptName]);
	Layers::SendEvent("ModifierStatus", "Status", [Dictionary::Get("MODIFYING")^"..."]);
}

Void Finish() {
	/*sleep(500);
	Layers::SendEvent("ModifierStatus", "Status", ["COMPUTING SHADOWS..."]);
	Layers::SendEvent("ModifierStatus", "Message", [""]);
	sleep(200);
	//ComputeShadows();
	//wait(CurrentShadowsQuality != CMapEditorPlugin::ShadowsQuality::NotComputed);*/
	Layers::Hide("ModifierScript");
	Layers::Hide("ModifierStatus");
	Layers::Hide("ModifierActions");
	Layers::Hide("ModifierMetadata");
	sleep(500);
	Layers::Show("ModifierResult");

	declare metadata ModifierBase::SChProblem[] Problems for Map;

	if(Terminate) Layers::SendEvent("ModifierResult", "Unsolvable");
	else {
		Layers::SendEvent("ModifierResult", "Success");
		if(Problems.count > 0) Layers::SendEvent("ModifierResult", "Problems");
	}
	
	if(CurrentShadowsQuality == ::ShadowsQuality::NotComputed) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("NOT_COMPUTED"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::VeryFast) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("VERY_FAST"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::Fast) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("FAST"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::Default) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("DEFAULT"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::High) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("HIGH"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::Ultra) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("ULTRA"), ""^IsUltraShadowsQualityAvailable]);
	
	Layers::SendEvent("ModifierResult", "Show");
}

Void Success() {

}

Void Confusion() {
	
}

Void Revert() {
	
}

Void Solution() {

}

Void TerminateScript() {
	Terminate = True;
}

Void Respond(CMapEditorPluginEvent _Event, Text[] _Data) {
	LayerCustomEvent(LayerAPI, _Event.CustomEventType^"_Response", _Data);
}

Void ProcessRequest(CMapEditorPluginEvent _Event) {
	declare Event <=> _Event;
	
	switch(Event.CustomEventType) {
		case "Ch_ComputeShadows": {
			ComputeShadows();
			wait(CurrentShadowsQuality == ::ShadowsQuality::VeryFast);
			Respond(Event, []);
		}
		case "Ch_RemoveAllBlocks": {
			RemoveAllBlocks();
			Respond(Event, []);
		}
		case "Ch_RemoveAllTerrain": {
			RemoveAllTerrain();
			Respond(Event, []);
		}
		case "Ch_RemoveAllOffZone": {
			RemoveAllOffZone();
			Respond(Event, []);
		}
		case "Ch_RemoveAllObjects": {
			RemoveAllObjects();
			Respond(Event, []);
		}
		case "Ch_RemoveAll": {
			RemoveAll();
			Respond(Event, []);
		}
		case "Ch_RemoveAllBlocksAndTerrain": {
			RemoveAllBlocksAndTerrain();
			Respond(Event, []);
		}
		case "Ch_PreloadAllBlocks": {
			PreloadAllBlocks();
			Respond(Event, []);
		}
		case "Ch_PreloadAllItems": {
			PreloadAllItems();
			Respond(Event, []);
		}
		case "Ch_CanPlaceBlock": {
			declare BlockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);
			declare OnGround = Conversion::ToBoolean(Event.CustomEventData[3]);
			declare VariantIndex = TextLib::ToInteger(Event.CustomEventData[4]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceBlock(BlockModel, Coord, Direction, OnGround, VariantIndex);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceBlock_NoDestruction": {
			declare BlockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);
			declare OnGround = Conversion::ToBoolean(Event.CustomEventData[3]);
			declare VariantIndex = TextLib::ToInteger(Event.CustomEventData[4]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceBlock_NoDestruction(BlockModel, Coord, Direction, OnGround, VariantIndex);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceBlock": {
			declare BlockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare Response = PlaceBlockSpecial(BlockName, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceBlock_NoDestruction": {
			declare BlockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceBlock_NoDestruction(BlockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceRoadBlocks": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceRoadBlocks(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceRoadBlocks": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceRoadBlocks(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceTerrainBlocks": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceTerrainBlocks(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceTerrainBlocks": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceTerrainBlocks(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceTerrainBlocks_NoDestruction": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceTerrainBlocks_NoDestruction(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceMacroblock": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock_NoDestruction": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock_NoDestruction(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceMacroblock_NoDestruction": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock_NoDestruction(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock_NoTerrain": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceMacroblock_NoTerrain": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_RemoveMacroblock": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = RemoveMacroblock(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_RemoveMacroblock_NoTerrain": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = RemoveMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_GetBlock": {
			declare Coord = Conversion::ToInt3(Event.CustomEventData[0]);

			declare Response = GetBlock(Coord);
			declare Block = Conversion::ToSChBlock(Response);

			Respond(Event, [Block.tojson()]);
		}
		case "Ch_RemoveBlock": {
			declare Coord = Conversion::ToInt3(Event.CustomEventData[0]);

			declare Response = RemoveBlock(Coord);
			Respond(Event, [""^Response]);
		}
		case "Ch_RemoveTerrainBlocks": {
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[0]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[1]);

			declare Response = RemoveTerrainBlocks(StartCoord,EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_GetBlockGroundHeight": {
			declare BlockName = Event.CustomEventData[0];
			declare CoordX = TextLib::ToInteger(Event.CustomEventData[1]);
			declare CoordY = TextLib::ToInteger(Event.CustomEventData[2]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[3]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = GetBlockGroundHeight(BlockModel,CoordX,CoordY,Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_GetGroundHeight": {
			declare CoordX = TextLib::ToInteger(Event.CustomEventData[0]);
			declare CoordY = TextLib::ToInteger(Event.CustomEventData[1]);

			declare Response = GetGroundHeight(CoordX,CoordY);
			Respond(Event, [""^Response]);
		}
		case "Ch_GetStartLineBlock": {
			declare Block = GetStartLineBlock();
			declare Response = Conversion::ToSChBlock(Block);
			Respond(Event, [Response.tojson()]);
		}
		case "Ch_GetBlocks": {
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, Blocks) ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(Event, [ChBlocks.tojson()]);
		}
		case "Ch_GetAnchorData": {
			declare ModifierBase::SChAnchor[] Anchor;
			foreach(Data, AnchorData) Anchor.add(Conversion::ToSChAnchor(Data));
			Respond(Event, [Anchor.tojson()]);
		}
		case "Ch_RemoveAnchor": {
			declare ModifierBase::SChAnchor ChAnchor;
			declare JsonSuccess = ChAnchor.fromjson(Event.CustomEventData[0]);
			declare Boolean Removed;
			for(i,0,AnchorData.count-1) {
				if(AnchorData.existskey(i)) {
					declare Data <=> AnchorData[i];
					if(Conversion::SChAnchorEquals(ChAnchor, Data)) {
						if(ChAnchor.IsItem) Removed = RemoveItem(Data);
						if(ChAnchor.IsBlock) Removed = SafeRemoveBlock(Data.Block);
					}
				}
			}
			Respond(Event, [Removed^""]);
		}
		
		case "Ch_RemoveAnchorItem": {
			declare ModifierBase::SChAnchorItem ChAnchor;
			declare JsonSuccess = ChAnchor.fromjson(Event.CustomEventData[0]);
			declare Boolean Removed;
			
			for(i,0,AnchorData.count-1) {
				if(AnchorData.existskey(i)) {
					declare Data <=> AnchorData[i];
					if(Conversion::SChAnchorItemEquals(ChAnchor, Data)) {
						Removed = RemoveItem(Data);
					}
				}
			}
			
			Respond(Event, [Removed^""]);
		}
		case "Ch_RemoveAnchorBlock": {
			declare ModifierBase::SChAnchorBlock ChAnchor;
			declare JsonSuccess = ChAnchor.fromjson(Event.CustomEventData[0]);
			declare Boolean Removed;
			
			for(i,0,AnchorData.count-1) {
				if(AnchorData.existskey(i)) {
					declare Data <=> AnchorData[i];
					if(Conversion::SChAnchorBlockEquals(ChAnchor, Data)) {
						Removed = SafeRemoveBlock(Data.Block);
					}
				}
			}
			
			Respond(Event, [Removed^""]);
		}
		case "Ch_GetMapInfo": {
			Respond(Event, [Conversion::ToSChMap(Map.MapInfo).tojson()]);
		}
		case "Ch_GetOriginalMapInfo": {
			Respond(Event, [ChMap.tojson()]);
		}
		case "Ch_Underground": {
			UndergroundMode = True;
			Respond(Event, []);
		}
		case "Ch_Aboveground": {
			UndergroundMode = False;
			Respond(Event, []);
		}
		case "Ch_PlaceGhostBlock": {
			declare BlockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToDirectionMap(Event.CustomEventData[2]);

			declare Variant = GetVariant(Coord);
			
			declare MacroblockModel = GetMacroblockModelFromFilePath("""{{{Map.CollectionName}}}\Ghost\{{{BlockName}}}-{{{Variant}}}-Ghost.Macroblock.Gbx""");
			declare Response = PlaceMacroblock(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_ReplaceBlock": {
			declare ModifierBase::SChBlock Block;
			declare JsonSuccess = Block.fromjson(Event.CustomEventData[0]);
			declare Replacement = Event.CustomEventData[1];
			declare OppositeDirection = Conversion::ToBoolean(Event.CustomEventData[2]);
			
			declare Direction = Conversion::ToDirectionMap(Block.Direction);
			declare Coord = Block.Coord;
			if(OppositeDirection) Direction = MapUnits::GetOpposedDir(Direction);
			
			declare Removed = SafeRemoveBlock(Block);
			declare Placed = PlaceBlockSpecial(Replacement, Coord, Direction);
			Respond(Event, [""^Removed, ""^Placed]);
		}
		case "Ch_ReplaceAllBlocks": {
			declare BlockName = Event.CustomEventData[0];
			declare Replacement = Event.CustomEventData[1];

			foreach(Block, Blocks) {
				if(Block.BlockModel.Name == BlockName) {
					declare Direction = Conversion::ToDirectionMap(Block.Direction);
					declare Coord = Block.Coord;
			
					declare Removed = RemoveBlock(Coord);
					declare Placed = PlaceBlockSpecial(Replacement, Coord, Direction);
				}
			}

			Respond(Event, []);
		}
		case "Ch_SwapBlock": {
			declare ModifierBase::SChBlock Block1;
			declare JsonSuccessBlock1 = Block1.fromjson(Event.CustomEventData[0]);
			declare ModifierBase::SChBlock Block2;
			declare JsonSuccessBlock2 = Block2.fromjson(Event.CustomEventData[1]);

			declare RemovedBlock1 = RemoveBlock(Block1.Coord);
			declare RemovedBlock2 = RemoveBlock(Block2.Coord);

			declare PlacedBlock1 = PlaceBlockSpecial(Block2.Name, Block1.Coord, Conversion::ToDirectionMap(Block1.Direction));
			declare PlacedBlock2 = PlaceBlockSpecial(Block1.Name, Block2.Coord, Conversion::ToDirectionMap(Block2.Direction));

			Respond(Event, [""^(RemovedBlock1 && RemovedBlock2 && PlacedBlock1 && PlacedBlock2)]);
		}
		case "Ch_GetStartLines": {
			declare ModifierBase::SChAnchor[] ChAnchors;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Spawn")
					ChAnchors.add(Conversion::ToSChAnchor(Anchor));
			Respond(Event, [ChAnchors.tojson()]);
		}
		case "Ch_GetFinishLines": {
			declare ModifierBase::SChAnchor[] ChAnchors;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Goal")
					ChAnchors.add(Conversion::ToSChAnchor(Anchor));
			Respond(Event, [ChAnchors.tojson()]);
		}
		case "Ch_GetCheckpoints": {
			declare ModifierBase::SChAnchor[] ChAnchors;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Checkpoint")
					ChAnchors.add(Conversion::ToSChAnchor(Anchor));
			Respond(Event, [ChAnchors.tojson()]);
		}
		case "Ch_GetMultilaps": {
			declare ModifierBase::SChAnchor[] ChAnchors;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "StartFinish")
					ChAnchors.add(Conversion::ToSChAnchor(Anchor));
			Respond(Event, [ChAnchors.tojson()]);
		}
		case "Ch_GetStartLineBlocks": {
			declare ModifierBase::SChAnchorBlock[] ChBlocks;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Spawn" && Anchor.Block != Null)
					ChBlocks.add(Conversion::ToSChAnchorBlock(Anchor));
			Respond(Event, [ChBlocks.tojson()]);
		}
		case "Ch_GetFinishLineBlocks": {
			declare ModifierBase::SChAnchorBlock[] ChBlocks;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Goal" && Anchor.Block != Null)
					ChBlocks.add(Conversion::ToSChAnchorBlock(Anchor));
			Respond(Event, [ChBlocks.tojson()]);
		}
		case "Ch_GetCheckpointBlocks": {
			declare ModifierBase::SChAnchorBlock[] ChBlocks;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Checkpoint" && Anchor.Block != Null)
					ChBlocks.add(Conversion::ToSChAnchorBlock(Anchor));
			Respond(Event, [ChBlocks.tojson()]);
		}
		case "Ch_GetMultilapBlocks": {
			declare ModifierBase::SChAnchorBlock[] ChBlocks;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "StartFinish" && Anchor.Block != Null)
					ChBlocks.add(Conversion::ToSChAnchorBlock(Anchor));
			Respond(Event, [ChBlocks.tojson()]);
		}
		case "Ch_GetBlocksByBlockName": {
			declare BlockName = Event.CustomEventData[0];
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, Blocks)
				if(Block.BlockModel.Name == BlockName)
					ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(Event, [ChBlocks.tojson()]);
		}
		case "Ch_MultipleBlocks": {
			declare Coord = ToInt3(Event.CustomEventData[0]);
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, Blocks)
				if(Block.Coord == Coord)
					ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(Event, [ChBlocks.tojson()]);
		}
		case "Ch_GetStartLineItems": {
			declare ModifierBase::SChAnchorItem[] ChItems;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Spawn" && Anchor.Item != Null)
					ChItems.add(Conversion::ToSChAnchorItem(Anchor));
			Respond(Event, [ChItems.tojson()]);
		}
		case "Ch_GetCheckpointItems": {
			declare ModifierBase::SChAnchorItem[] ChItems;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Checkpoint" && Anchor.Item != Null)
					ChItems.add(Conversion::ToSChAnchorItem(Anchor));
			Respond(Event, [ChItems.tojson()]);
		}
		case "Ch_GetFinishLineItems": {
			declare ModifierBase::SChAnchorItem[] ChItems;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Goal" && Anchor.Item != Null)
					ChItems.add(Conversion::ToSChAnchorItem(Anchor));
			Respond(Event, [ChItems.tojson()]);
		}
		case "Ch_GetMultilapItems": {
			declare ModifierBase::SChAnchorItem[] ChItems;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "StartFinish" && Anchor.Item != Null)
					ChItems.add(Conversion::ToSChAnchorItem(Anchor));
			Respond(Event, [ChItems.tojson()]);
		}
		case "Ch_Problem": {
			declare ModifierBase::SChProblem Problem;
			declare JsonSuccess = Problem.fromjson(Event.CustomEventData[0]);
			declare metadata ModifierBase::SChProblem[] Problems for Map;
			Problems.add(Problem);
			if(Problem.IsUnsolvable) TerminateScript();
			else Respond(Event, []);
		}
		case "Ch_Message": {
			Dialog_Message(Event.CustomEventData[0]);
			Respond(Event, []);
		}
		case "Ch_SetStatusProgress": {
			Layers::SendEvent("ModifierStatus", "Progress", [Event.CustomEventData[0]]);
			Respond(Event, []);
		}
		case "Ch_SetStatusMessage": {
			Layers::SendEvent("ModifierStatus", "Message", [Event.CustomEventData[0]]);
			Respond(Event, []);
		}
		case "Ch_SetStatusColor": {
			Layers::SendEvent("ModifierStatus", "Color", [Event.CustomEventData[0]]);
			Respond(Event, []);
		}
		default: {
			log("Unknown request: "^Event.CustomEventType);
			Respond(Event, ["False"]);
		}
	}
}

Void ProcessScript(Text _ScriptName, Text _ScriptContent) {
	LayerAPI = UILayerCreate();
			LayerAPI.ManialinkPage = Manialink::Construct("","""#RequireContext CMapEditorPluginLayer

"""^File::Read("Media/API_Base.Script.txt")^"""
			
{{{Dictionary::TranslateAllPhrases(_ScriptContent)}}}
			
"""^File::Read("Media/API.Script.txt")^"""
			
"""^File::Read("Media/API_Main.Script.txt"));
			
	declare Completed = False;
	while(!Completed && !Terminate) {
		foreach(Event,PendingEvents) {
			if(Terminate) break;
			
			if(Event.Type == CMapEditorPluginEvent::Type::LayerCustomEvent) {
				if(Event.CustomEventType == "Ch_Complete") {
					Completed = True;
					log("[MODIFIER] "^_ScriptName^" completed");
				}
				else if(TextLib::StartsWith("Ch_", Event.CustomEventType)) {
					log("[MODIFIER] Request: "^Event.CustomEventType);
					ProcessRequest(Event);
				}
				if(Event.CustomEventType == "ScriptMetadata") {
					Layers::SendEvent("ModifierMetadata", "Metadata", Event.CustomEventData[0]);
				}
			}
		}
		
		CameraTargetPosition = <Map.Size.X*32./2,5.,Map.Size.Z*32./3>;
		CameraToTargetDistance = 24.*Map.Size.X;
		CameraHAngle = 0.;
		CameraVAngle = 1.;
	
		yield;
	}

	UILayerDestroy(LayerAPI);

	Layers::SendEvent("ModifierStatus", "Status", Dictionary::Get("DONE"));
	Layers::SendEvent("ModifierStatus", "Message", Dictionary::Get("SCRIPT_FINISHED"));
	Layers::SendEvent("ModifierStatus", "Progress", "1");
}

main() {
	if(!S_Build) return;

	Dictionary::SetTranslationFolder("Media/Translations");
	Dictionary::SetTranslationLanguage(Settings::Get().Language);
	
	declare MapInfo = TextLib::Replace(S_OriginalMapInfo,"'","\"");
	declare JsonSuccess = ChMap.fromjson(MapInfo);

	declare metadata ModifierBase::SChMap OriginalMap for Map;
	OriginalMap = ChMap;
	
	declare ScriptNames = TextLib::Replace(S_ScriptNames,"'","\"");
	declare SChScriptInfo[] Scripts;
	if(!Scripts.fromjson(ScriptNames) && !S_TestMode) return;
	
	CameraTargetPosition = <Map.Size.X*32./2,5.,Map.Size.Z*32./3>;
	CameraToTargetDistance = 24.*Map.Size.X;
	CameraHAngle = 0.;
	CameraVAngle = 1.;
	
	Prepare(ChMap);
	
	if(S_TestMode) {
		declare persistent Text PERSISTENT_CHALLENGE_CODE for LocalUser;
		Map.MapName ^= " Test Script";
		Begin(Dictionary::Get("TEST_SCRIPT"));
		ProcessScript("TEST SCRIPT", PERSISTENT_CHALLENGE_CODE);
	}
	else {
		foreach(Script,Scripts) {
			Begin(Script.Name);
			ValidateScript();
			
			Map.MapName ^= " "^TextLib::SubText(Script.Name, 0, TextLib::Length(Script.Name)-11);

			declare Text BuildScript;
			
			switch(Script.Type) {
				case "Official": {
					BuildScript = File::Read("Media/Challenges/"^Script.Name);
				}
				case "Local": {
					
				}
				case "Online": {
					
				}
			}
			
			ProcessScript(Script.Name, BuildScript);
			sleep(500);
		}
	}
	
	Finish();
	
	while(True) {
		foreach(Event,PendingEvents) {
			if(Event.Type == CMapEditorPluginEvent::Type::LayerCustomEvent) {
				switch(Event.CustomEventType) {
					case "Button_Exit": {
						Quit();
					}
					case "Button_Validate": {
						Validate();
					}
					case "Button_Save": {
						declare metadata ModifierBase::SChProblem[] Problems for Map;

						if(Problems.count == 0) {
							if(CurrentShadowsQuality == ::ShadowsQuality::Fast
							|| CurrentShadowsQuality == ::ShadowsQuality::Default
							|| CurrentShadowsQuality == ::ShadowsQuality::High
							|| CurrentShadowsQuality == ::ShadowsQuality::Ultra) {
								SaveMap("");
							}
							else {
								Layers::SendEvent("ModifierResult", "SuggestShadows");
							}
						}
						else {
							SaveMap("");
						}
					}
					case "Button_Shadows_VeryFast": {
						ComputeShadows(::ShadowsQuality::VeryFast);
					}
					case "Button_Shadows_Fast": {
						ComputeShadows(::ShadowsQuality::Fast);
					}
					case "Button_Shadows_Default": {
						ComputeShadows(::ShadowsQuality::Default);
					}
					case "Button_Shadows_High": {
						ComputeShadows(::ShadowsQuality::High);
					}
					case "Button_Shadows_Ultra": {
						ComputeShadows(::ShadowsQuality::Ultra);
					}
				}
			}
		}
		
		if(LastShadowsQuality != CurrentShadowsQuality) {
			wait(IsEditorReadyForRequest);
			sleep(200);
			if(CurrentShadowsQuality == ::ShadowsQuality::VeryFast)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("VERY_FAST"), ""^IsUltraShadowsQualityAvailable]);
			else if(CurrentShadowsQuality == ::ShadowsQuality::Fast)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("FAST"), ""^IsUltraShadowsQualityAvailable]);
			else if(CurrentShadowsQuality == ::ShadowsQuality::Default)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("DEFAULT"), ""^IsUltraShadowsQualityAvailable]);
			else if(CurrentShadowsQuality == ::ShadowsQuality::High)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("HIGH"), ""^IsUltraShadowsQualityAvailable]);
			else if(CurrentShadowsQuality == ::ShadowsQuality::Ultra)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("ULTRA"), ""^IsUltraShadowsQualityAvailable]);
			
			LastShadowsQuality = CurrentShadowsQuality;
		}
	
		yield;
	}
}