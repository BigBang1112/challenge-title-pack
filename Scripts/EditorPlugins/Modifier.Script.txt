#RequireContext CMapEditorPlugin

#Include "TextLib" as TextLib
#Include "AnimLib" as AnimLib
#Include "MapUnits" as MapUnits

#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Map.Script.txt" as Map

#Include "Libs/Challenge/Conversion.Script.txt" as Conversion
#Include "Libs/Challenge/ModifierBase.Script.txt" as ModifierBase
#Include "Libs/Challenge/Processor.Script.txt" as Processor

#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings

#Setting S_Build False
#Setting S_TestMode False

#Const C_Manialink_ModifierResult "Media/Manialinks/Sandbox/Modifier/ModifierResult"
#Const C_Manialink_ModifierIntro "Media/Manialinks/Sandbox/Modifier/ModifierIntro"
#Const C_Manialink_ModifierScript "Media/Manialinks/Sandbox/Modifier/ModifierScript"
#Const C_Manialink_ModifierStatus "Media/Manialinks/Sandbox/Modifier/ModifierStatus"
#Const C_Manialink_ModifierMetadata "Media/Manialinks/Sandbox/Modifier/ModifierMetadata"
#Const C_Manialink_ModifierActions "Media/Manialinks/Sandbox/Modifier/ModifierActions"
#Const C_Manialink_ModifierSolver "Media/Manialinks/Sandbox/Modifier/ModifierSolver"

#Struct SCommand {
	Text Name;
	Text[] Parameters;
}

#Struct SMetadata {
	Text Name;
	Text AuthorLogin;
	Text AuthorNickname;
	Text Description;
}

#Struct SScriptInfo {
	Text Name;
	Text Type;
	SMetadata Metadata;
}

#Struct SElement {
	Text Name;
	Integer Count;
	Boolean Selected;
	Boolean Selectable;
}

declare CUILayer LayerAPI;
declare Boolean Terminate;
declare Boolean Abort;

declare ::ShadowsQuality LastShadowsQuality;

declare Integer BlockSize;
declare Integer HeightOffset;

declare Integer CamTime;
declare Vec3 CamPosition;
declare Vec3 LastCamPosition;
declare Vec3 DelayedCamPosition;
declare Integer CamDistanceTime;
declare Real CamDistance;
declare Real LastCamDistance;
declare Real DelayedCamDistance;

Text GetScriptFromIndex(Integer _Index) {
	declare metadata SScriptInfo[] Scripts for Map;
	if(!Scripts.existskey(_Index)) return "";
	return File::Read("Media/Challenges/"^Scripts[_Index].Name);
}

Void ValidateScript() {

}

Void CameraReset() {
	CamPosition = <Map.Size.X*BlockSize/2.,5.,Map.Size.Z*BlockSize/3.>;
	CamDistance = BlockSize*.75*Map.Size.X;
	CameraHAngle = 0.;
	CameraVAngle = 1.;
}

Void CameraSpin() {
	CamDistance = BlockSize*1.5;
	CameraVAngle = 0.5;
	CameraHAngle += 0.01;
}

Void UpdateCamera() {
	if(CamPosition != LastCamPosition) {
		CamTime = Now;
		DelayedCamPosition = CameraTargetPosition;
		LastCamPosition = CamPosition;
	}
	
	declare X = AnimLib::EaseOutQuad(Now-CamTime, DelayedCamPosition.X, CamPosition.X-DelayedCamPosition.X, 1000);
	declare Y = AnimLib::EaseOutQuad(Now-CamTime, DelayedCamPosition.Y, CamPosition.Y-DelayedCamPosition.Y, 1000);
	declare Z = AnimLib::EaseOutQuad(Now-CamTime, DelayedCamPosition.Z, CamPosition.Z-DelayedCamPosition.Z, 1000);
	CameraTargetPosition = <X,Y,Z>;
	
	if(CamDistance != LastCamDistance) {
		CamDistanceTime = Now;
		DelayedCamDistance = CameraToTargetDistance;
		LastCamDistance = CamDistance;
	}
	
	declare Distance = AnimLib::EaseOutQuad(Now-CamDistanceTime, DelayedCamDistance, CamDistance-DelayedCamDistance, 1000);
	CameraToTargetDistance = Distance;
}

Void Finish() {
	Layers::Hide("ModifierScript");
	Layers::Hide("ModifierStatus");
	Layers::Hide("ModifierActions");
	Layers::Hide("ModifierMetadata");
	
	sleep(500);
	
	Layers::Create("ModifierResult",Manialink::FromFile(C_Manialink_ModifierResult, True, ["TextAnimation"], Settings::Get().Theme));
	
	Layers::Create("ModifierProblems",Manialink::FromFile("Media/Manialinks/Window_List", True, ["TextAnimation"], Settings::Get().Theme));
	Layers::SendEvent("ModifierProblems", "Title", Dictionary::Get("PROBLEMS"));
	Layers::SendEvent("ModifierProblems", "Position", "120 10");
	Layers::SendEvent("ModifierProblems", "Size", "60 60");
	Layers::SendEvent("ModifierProblems", "Animation_Out", "200 10");
	
	Layers::Create("ModifierSolver",Manialink::FromFile(C_Manialink_ModifierSolver, True, ["TextAnimation"], Settings::Get().Theme));
	
	Layers::Create("ModifierSolutions",Manialink::FromFile("Media/Manialinks/Window_List", True, ["TextAnimation"], Settings::Get().Theme));
	Layers::SendEvent("ModifierSolutions", "Title", Dictionary::Get("POSSIBLE_SOLUTIONS"));
	Layers::SendEvent("ModifierSolutions", "Title_Align", "left");
	Layers::SendEvent("ModifierSolutions", "Position", "-100 10");
	Layers::SendEvent("ModifierSolutions", "Size", "100 60");
	Layers::SendEvent("ModifierSolutions", "Animation_Out", "-210 10");

	declare metadata ModifierBase::SChMap OriginalMap for Map;
	declare metadata ModifierBase::SChProblem[] Problems for Map;
	declare metadata Integer CurrentScript for Map;

	if(Terminate) Layers::SendEvent("ModifierResult", "Unsolvable");
	else {
		Layers::SendEvent("ModifierResult", "Success");
		
		if(Problems.count > 0) {
			Layers::SendEvent("ModifierResult", "Problems");
			
			declare SElement[] Elements;
			foreach(Problem,Problems) {
				declare SElement Element;
				Element.Name = Dictionary::TranslateAllPhrases(Problem.ShortDescription);
				Element.Selectable = True;
				Elements.add(Element);
			}
			
			Layers::SendEvent("ModifierProblems", "Elements", Elements.tojson());
			
			Layers::Show("ModifierProblems", True);
		}
	}
	
	if(CurrentShadowsQuality == ::ShadowsQuality::NotComputed) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("NOT_COMPUTED"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::VeryFast) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("VERY_FAST"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::Fast) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("FAST"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::Default) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("DEFAULT"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::High) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("HIGH"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::Ultra) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("ULTRA"), ""^IsUltraShadowsQualityAvailable]);
	
	Layers::Show("ModifierResult", True);
	
	declare Solver = False;
	declare Continue = False;
	
	while(!Continue) {
		foreach(Event,PendingEvents) {
			Layers::Event(Event);
		
			if(Event.Type == CMapEditorPluginEvent::Type::LayerCustomEvent) {
				switch(Event.CustomEventType) {
					case "Button_Interface": {
						Abort = True;
						return;
					}
					case "Button_Exit": {
						Quit();
					}
					case "Button_Validate": {
						Validate();
					}
					case "Button_Solve": {
						Solver = True;
						Layers::SendEvent("ModifierProblems", "Select", "0");
						declare Problem = Problems[0];
						Problem.ShortDescription = Dictionary::TranslateAllPhrases(Problem.ShortDescription);
						Layers::SendEvent("ModifierSolver", "Problem", Problem.tojson());
						
						declare SElement[] Elements;
						foreach(Solution,Problems[0].Solutions) {
							declare SElement Element;
							Element.Name = Dictionary::TranslateAllPhrases(Solution.Value);
							Element.Selectable = Solution.IsInteractive;
							Elements.add(Element);
						}
						Layers::SendEvent("ModifierSolutions", "Elements", Elements.tojson());
						Layers::Show("ModifierSolutions", True);
					}
					case "Button_Save": {
						declare metadata ModifierBase::SChProblem[] Problems for Map;

						if(Problems.count == 0) {
							if(CurrentShadowsQuality == ::ShadowsQuality::Default
							|| CurrentShadowsQuality == ::ShadowsQuality::High
							|| CurrentShadowsQuality == ::ShadowsQuality::Ultra) {
								Map.MapName = OriginalMap.Name ^ "$z - " ^ TextLib::Replace(Map.MapStyle, "+", " + ");
								SaveMap("");
							}
							else {
								Layers::SendEvent("ModifierResult", "SuggestShadows");
							}
						}
						else {
							Map.MapName = OriginalMap.Name ^ "$z - " ^ TextLib::Replace(Map.MapStyle, "+", " + ");
							SaveMap("");
						}
					}
					case "Button_Shadows_VeryFast": {
						ComputeShadows(::ShadowsQuality::VeryFast);
					}
					case "Button_Shadows_Fast": {
						ComputeShadows(::ShadowsQuality::Fast);
					}
					case "Button_Shadows_Default": {
						ComputeShadows(::ShadowsQuality::Default);
					}
					case "Button_Shadows_High": {
						ComputeShadows(::ShadowsQuality::High);
					}
					case "Button_Shadows_Ultra": {
						ComputeShadows(::ShadowsQuality::Ultra);
					}
					case "Select": {
						Solver = True;
					}
				}
			}
		}
		
		if(LastShadowsQuality != CurrentShadowsQuality) {
			wait(IsEditorReadyForRequest);
			sleep(200);
			if(CurrentShadowsQuality == ::ShadowsQuality::VeryFast)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("VERY_FAST"), ""^IsUltraShadowsQualityAvailable]);
			else if(CurrentShadowsQuality == ::ShadowsQuality::Fast)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("FAST"), ""^IsUltraShadowsQualityAvailable]);
			else if(CurrentShadowsQuality == ::ShadowsQuality::Default)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("DEFAULT"), ""^IsUltraShadowsQualityAvailable]);
			else if(CurrentShadowsQuality == ::ShadowsQuality::High)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("HIGH"), ""^IsUltraShadowsQualityAvailable]);
			else if(CurrentShadowsQuality == ::ShadowsQuality::Ultra)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("ULTRA"), ""^IsUltraShadowsQualityAvailable]);
			
			LastShadowsQuality = CurrentShadowsQuality;
		}
		
		CameraReset();
		UpdateCamera();
		
		if(Solver) {
			Layers::Hide("ModifierResult", True);
			Layers::Show("ModifierSolver", True);
			
			declare Integer SelectedProblem;
			declare Integer SelectedSolution = -1;
			declare Integer SelectedPoint;
			
			while(Solver) { // Solver interaction loop
				foreach(Event,PendingEvents) {
					Layers::Event(Event);
					
					switch(Event.Type) {
						case CMapEditorPluginEvent::Type::LayerCustomEvent: {
							switch(Event.CustomEventLayer) {
								case Layers::Get("ModifierProblems"): {
									switch(Event.CustomEventType) {
										case "Select": {
											SelectedProblem = TextLib::ToInteger(Event.CustomEventData[0]);
											declare Problem = Problems[SelectedProblem];
											Problem.ShortDescription = Dictionary::TranslateAllPhrases(Problem.ShortDescription);
											Problem.LongDescription = Dictionary::TranslateAllPhrases(Problem.LongDescription);
											Layers::SendEvent("ModifierSolver", "Problem", Problem.tojson());
											Layers::SendEvent("ModifierSolver", "ProblemCount", Problems.count^"");
											
											declare SElement[] Elements;
											foreach(Solution,Problem.Solutions) {
												declare SElement Element;
												Element.Name = Dictionary::TranslateAllPhrases(Solution.Value);
												Element.Selectable = Solution.IsInteractive;
												Elements.add(Element);
											}
											Layers::SendEvent("ModifierSolutions", "Elements", Elements.tojson());
											Layers::Show("ModifierSolutions", True);
										}
									}
								}
								case Layers::Get("ModifierSolutions"): {
									switch(Event.CustomEventType) {
										case "Select": {
											SelectedSolution = TextLib::ToInteger(Event.CustomEventData[0]);
										}
									}
								}
								case Layers::Get("ModifierSolver"): {
									switch(Event.CustomEventType) {
										case "Button_Leave": {
											Solver = False;
											Layers::SendEvent("ModifierProblems", "Select", "-1");
											Layers::Show("ModifierResult", True);
										}
										case "Button_Next": {
											Layers::SendEvent("ModifierProblems", "Next");
										}
										case "UpdatePoint": {
											declare Problem = Problems[SelectedProblem];
											
											SelectedPoint = TextLib::ToInteger(Event.CustomEventData[0]);
										}
									}
								}
							}
						}
					}
				}
				
				declare Problem = Problems[SelectedProblem];
				Problem.ShortDescription = Dictionary::TranslateAllPhrases(Problem.ShortDescription);
				Problem.LongDescription = Dictionary::TranslateAllPhrases(Problem.LongDescription);
				
				declare Offset = 0;
				if(SelectedPoint < Problem.Waypoints.count) {
					declare Waypoint = Problem.Waypoints[SelectedPoint];
					if(Waypoint.IsBlock) {
						CamPosition = <Waypoint.Block.Coord.X*BlockSize*1.,(Waypoint.Block.Coord.Y-HeightOffset+1)*(BlockSize/4.),Waypoint.Block.Coord.Z*BlockSize*1.>+<BlockSize/2.,0.,BlockSize/2.>;
					}
					else if(Waypoint.IsItem)
						CamPosition = Waypoint.Item.Position+<BlockSize/2.,0.,BlockSize/2.>;
					Offset += 1;
				}
				else if(SelectedPoint - Offset < Problem.Blocks.count) {
					declare Block = Problem.Blocks[SelectedPoint - Offset];
					CamPosition = <Block.Coord.X*BlockSize*1.,(Block.Coord.Y-HeightOffset+1)*(BlockSize/4.),Block.Coord.Z*BlockSize*1.>+<BlockSize/2.,0.,BlockSize/2.>;
					Offset += 1;
				}
				else if(SelectedPoint - Offset < Problem.Items.count) {
					declare Item = Problem.Items[SelectedPoint - Offset];
					CamPosition = Item.Position+<BlockSize/2.,0.,BlockSize/2.>;
					Offset += 1;
				}
				else if(SelectedPoint - Offset < Problem.ApproxBlocks.count) {
					declare ApproxBlock = Problem.ApproxBlocks[SelectedPoint - Offset];
					CamPosition = <ApproxBlock.Coord.X*BlockSize*1.,(ApproxBlock.Coord.Y-HeightOffset+1)*(BlockSize/4.),ApproxBlock.Coord.Z*BlockSize*1.>+<BlockSize/2.,0.,BlockSize/2.>;
					Offset += 1;
				}
				else if(SelectedPoint - Offset < Problem.Coords.count) {
					declare Coord = Problem.Coords[SelectedPoint - Offset];
					CamPosition = <Coord.X*BlockSize*1.,(Coord.Y-HeightOffset+1)*(BlockSize/4.),Coord.Z*BlockSize*1.>+<BlockSize/2.,0.,BlockSize/2.>;
					Offset += 1;
				}
				
				UpdateCamera();
				CameraSpin();
				
				if(SelectedSolution != -1) {
					Layers::Hide("ModifierSolutions", True);
					Layers::Hide("ModifierProblems", True);
					//Layers::Hide("ModifierSolver", True);
					
					LayerAPI = UILayerCreate();
					LayerAPI.ManialinkPage = Manialink::Construct("","""#RequireContext CMapEditorPluginLayer
	
					{{{File::Read("Media/API_Base.Script.txt")}}}
								
					{{{Dictionary::TranslateAllPhrases(File::Read("Media/API.Script.txt"))}}}
								
					{{{Dictionary::TranslateAllPhrases(GetScriptFromIndex(CurrentScript))}}}
								
					{{{File::Read("Media/API_Main_Solver.Script.txt")}}}""");
					
					LayerCustomEvent(LayerAPI, "Solver", [SelectedProblem^"", Problem.tojson(), SelectedSolution^"", SelectedPoint^""]);
					
					declare Text[Integer] LastBlocks;
					foreach(Block,Blocks)
						LastBlocks[Block.BlockScriptId] = Block.BlockModel.Name;
						
					declare Text BlockModified;
					
					declare Solved = False;
					declare MapModified = False;
					while(!Solved) { // Inner solve loop
						declare SCommand[] Commands;
						
						foreach(Event,PendingEvents) {
							Layers::Event(Event);
						
							if(Event.Type == CMapEditorPluginEvent::Type::LayerCustomEvent) {
								if(Event.CustomEventType == "Button_Leave") return;
								if(Event.CustomEventType == "Ch_Solve") {
									declare ProblemId = TextLib::ToInteger(Event.CustomEventData[0]);
									declare Success = Event.CustomEventData[1] == "True";
									if(Success && Problems.existskey(ProblemId)) {
										declare Removed = Problems.removekey(ProblemId);
										log("[SOLVER] Solved successfully");
									}
									else log("[SOLVER] Solved unsuccessfully");
									Solved = True;
								}
								else if(Event.CustomEventType == "Ch_Event_MapModified") {
									if(MapModified) {
										log("[MODIFIER] Event success: MapModified");
										LayerCustomEvent(LayerAPI, "Ch_Event_MapModified_Response", [BlockModified]);
										BlockModified = "";
										MapModified = False;
									}
									else {
										LayerCustomEvent(LayerAPI, "Ch_Event_MapModified_Response", [""]);
									}
								}
								else if(TextLib::StartsWith("Ch_", Event.CustomEventType)) {
									declare SCommand Command;
									Command.Name = Event.CustomEventType;
									foreach(Data, Event.CustomEventData)
										Command.Parameters.add(Data);
									Commands.add(Command);
								}
							}
							else if(Event.Type == CMapEditorPluginEvent::Type::MapModified) {
								MapModified = True;
								foreach(Block,Blocks)
									if(LastBlocks.existskey(Block.BlockScriptId))
										declare Removed = LastBlocks.removekey(Block.BlockScriptId);
								foreach(Id => BlockName,LastBlocks) {
									BlockModified = BlockName;
								}
								LastBlocks.clear();
								foreach(Block,Blocks)
									LastBlocks[Block.BlockScriptId] = Block.BlockModel.Name;
							}
						}
						
						foreach(Command,Commands) {						
							log("[SOLVER] Request: "^Command.Name);
							declare Success = Processor::Command(LayerAPI, Command.Name, Command.Parameters);
						}
						
						if(HideEditorInterface) CameraSpin();
						if(EditorInputIsDown_Undo) declare Success = Redo();
						
						yield;
					}
					
					if(Problems.count > 0) {
						declare SElement[] Elements;
						foreach(Problem,Problems) {
							declare SElement Element;
							Element.Name = Dictionary::TranslateAllPhrases(Problem.ShortDescription);
							Element.Selectable = True;
							Elements.add(Element);
						}
						Layers::SendEvent("ModifierProblems", "Elements", Elements.tojson());
						
						Layers::SendEvent("ModifierProblems", "Select", "0");
						SelectedProblem = 0;
						Layers::Show("ModifierProblems", True);
						declare Problem = Problems[0];
						Problem.ShortDescription = Dictionary::TranslateAllPhrases(Problem.ShortDescription);
						Problem.LongDescription = Dictionary::TranslateAllPhrases(Problem.LongDescription);
						Layers::SendEvent("ModifierSolver", "Problem", Problem.tojson());
						Layers::Show("ModifierSolutions", True);
						
						declare SElement[] SolutionElements;
						foreach(Solution,Problem.Solutions) {
							declare SElement Element;
							Element.Name = Dictionary::TranslateAllPhrases(Solution.Value);
							Element.Selectable = Solution.IsInteractive;
							SolutionElements.add(Element);
						}
						
						Layers::SendEvent("ModifierSolutions", "Elements", SolutionElements.tojson());
						
						/*if(Problem.Waypoints.count > 0) {
							declare Waypoint = Problem.Waypoints[0];
							if(Waypoint.IsBlock)
								CamPosition = <Waypoint.Block.Coord.X*BlockSize*1.,(Waypoint.Block.Coord.Y-HeightOffset)*32./4.,Waypoint.Block.Coord.Z*BlockSize*1.>+<BlockSize/2.,0.,BlockSize/2.>;
							else if(Waypoint.IsItem)
								CamPosition = Waypoint.Item.Position+<16.,0.,16.>;
						}
						else if(Problem.Items.count > 0) {
							declare Item = Problem.Items[0];
							CamPosition = Item.Position+<16.,0.,16.>;
						}*/
					}
					else {
						Solver = False;
						Continue = True;
					}
					SelectedSolution = -1;
				}
				
				yield;
			}
			if(Continue) Layers::Hide("ModifierProblems", True);
			
			Layers::Hide("ModifierSolver");
			Layers::Hide("ModifierSolutions", True);
		}
	
		yield;
	}
}

Void Success() {

}

Void Confusion() {
	
}

Void Revert() {
	
}

Void Solution() {

}

Void TerminateScript() {
	Terminate = True;
}

Boolean ProcessScript(Text _ScriptName, Text _ScriptContent) {
	LayerAPI = UILayerCreate();
	LayerAPI.ManialinkPage = Manialink::Construct("","""#RequireContext CMapEditorPluginLayer

{{{File::Read("Media/API_Base.Script.txt")}}}
			
{{{File::Read("Media/API.Script.txt")}}}
			
{{{_ScriptContent}}}
			
{{{File::Read("Media/API_Main.Script.txt")}}}""");
			
	declare Completed = False;
	while(!Completed && !Terminate) {
		declare SCommand[] Commands;
		foreach(Event,PendingEvents) {
			Layers::Event(Event);
		
			if(Event.Type == CMapEditorPluginEvent::Type::LayerCustomEvent) {
				if(Event.CustomEventType == "Ch_Complete") {
					Completed = True;
					log("[MODIFIER] "^_ScriptName^" completed");
				}
				else if(TextLib::StartsWith("Ch_", Event.CustomEventType)) {
					declare SCommand Command;
					Command.Name = Event.CustomEventType;
					foreach(Data, Event.CustomEventData)
						Command.Parameters.add(Data);
					Commands.add(Command);
				}
				if(Event.CustomEventType == "ScriptMetadata") {
					Layers::SendEvent("ModifierMetadata", "Metadata", Dictionary::TranslateAllPhrases(Event.CustomEventData[0]));
				}
			}
		}
		
		foreach(Command,Commands) {
			if(Terminate) break;
		
			log("[MODIFIER] Request: "^Command.Name);
			if(!Processor::Command(LayerAPI, Command.Name, Command.Parameters)) TerminateScript();
		}
		
		UpdateCamera();
		CameraReset();
	
		yield;
	}

	UILayerDestroy(LayerAPI);

	Layers::SendEvent("ModifierStatus", "Status", Dictionary::Get("DONE"));
	
	declare metadata ModifierBase::SChProblem[] Problems for Map;
	if(Terminate) Layers::SendEvent("ModifierStatus", "Message", Dictionary::Get("SCRIPT_FINISHED_UNSUCCESSFULLY"));
	else if(Problems.count == 0) Layers::SendEvent("ModifierStatus", "Message", Dictionary::Get("SCRIPT_FINISHED_SUCCESSFULLY"));
	else Layers::SendEvent("ModifierStatus", "Message", Dictionary::Get("SCRIPT_FINISHED"));
	
	Layers::SendEvent("ModifierStatus", "Progress", "1");

	return !Terminate;
}

main() {
	if(!S_Build) return;

	Dictionary::SetTranslationFolder("Media/Translations");
	Dictionary::SetTranslationLanguage(Settings::Get().Language);
	
	declare metadata ModifierBase::SChMap OriginalMap for Map;
	declare metadata ModifierBase::SChProblem[] Problems for Map;
	declare metadata SScriptInfo[] Scripts for Map;
	declare metadata Integer CurrentScript for Map;
	
	declare SScriptInfo[] CHALLENGE_SCRIPTS for LocalUser;
	if(Scripts.count == 0) declare JsonSuccess = Scripts.fromjson(CHALLENGE_SCRIPTS.tojson());
	
	if(Problems.count == 0) {
		if(CHALLENGE_SCRIPTS.count == 0 && !S_TestMode) return;
	}

	BlockSize = 32;
	switch(Map.CollectionName) {
		case "Canyon": {
			BlockSize = 64;
			HeightOffset = 15;
		}
		case "Stadium": {
			HeightOffset = 9;
		}
		case "Valley": {
			HeightOffset = 5;
		}
		case "Lagoon": {
			HeightOffset = 5;
		}
	}
	
	CameraReset();
	LastCamPosition = CamPosition;
	LastCamDistance = CamDistance;
	CameraTargetPosition = CamPosition;
	CameraToTargetDistance = CamDistance;
	
	HideEditorInterface = True;
	EnableEditorInputsCustomProcessing = False;
	EditMode = CMapEditorPlugin::EditMode::FreeLook;

	Layers::Create("ModifierIntro",Manialink::FromFile(C_Manialink_ModifierIntro, True, ["TextAnimation"], Settings::Get().Theme));
	Layers::Create("ModifierScript",Manialink::FromFile(C_Manialink_ModifierScript, True, ["TextAnimation"], Settings::Get().Theme));
	Layers::Create("ModifierStatus",Manialink::FromFile(C_Manialink_ModifierStatus, True, ["TextAnimation"], Settings::Get().Theme));
	Layers::Create("ModifierMetadata",Manialink::FromFile(C_Manialink_ModifierMetadata, True, ["TextAnimation"], Settings::Get().Theme));
	Layers::Create("ModifierActions",Manialink::FromFile(C_Manialink_ModifierActions, True, ["TextAnimation"], Settings::Get().Theme));

	Layers::SetAnimationInOut("ModifierScript",CUILayer::EUILayerAnimation::DownSlow);
	Layers::SetAnimationInOut("ModifierStatus",CUILayer::EUILayerAnimation::DownSlow);
	Layers::SetAnimationInOut("ModifierActions",CUILayer::EUILayerAnimation::RightSlow);
	Layers::SetAnimationInOut("ModifierMetadata",CUILayer::EUILayerAnimation::UpSlow);
		
	Layers::SetAnimationInOut("ModifierResult",CUILayer::EUILayerAnimation::DownSlow);
	
	if(Problems.count > 0) {
		
	}
	else {
		declare Map::SMapInfo OriginalMapInfo for LocalUser;
		declare JsonSuccess = OriginalMap.fromjson(OriginalMapInfo.tojson());
		
		Map.MapName = """Waiting to modify... ({{{OriginalMap.Name}}})""";
		Map.Comments = OriginalMap.Comments;
		Map.TMObjective_NbLaps = OriginalMap.TMObjective_NbLaps;
		Map.TMObjective_IsLapRace = OriginalMap.TMObjective_IsLapRace;
		
		LayerCustomEvent(Layers::Get("ModifierIntro"), "Map", [OriginalMap.Name]);
		Layers::Show("ModifierIntro");
		
		CurrentScript = -1;
	
		PreloadAllBlocks();
		
		declare Continue = False;
		while(!Continue) {
			foreach(Event,PendingEvents) {
				if(Event.Type == CMapEditorPluginEvent::Type::LayerCustomEvent) {
					switch(Event.CustomEventType) {
						case "Start": {
							Continue = True;
						}
					}
				}
			}
			yield;
		}
		
		Map.MapName = """Modifying... ({{{OriginalMap.Name}}})""";
		
		LayerCustomEvent(Layers::Get("ModifierIntro"), "Hide", []);
	}
		
	if(S_TestMode) {
		declare Text CHALLENGE_CODE for LocalUser;
		SetMapStyle("Test Script");
		Layers::SendEvent("ModifierScript", "ScriptName", [Dictionary::Get("TEST_SCRIPT")]);
		Layers::SendEvent("ModifierStatus", "Status", [Dictionary::Get("MODIFYING")^"..."]);
		declare Continue = ProcessScript("TEST SCRIPT", CHALLENGE_CODE);
	}
	else {
		declare Text[] _Scripts;
		foreach(Script,Scripts)
			_Scripts.add(TextLib::SubText(Script.Name, 0, TextLib::Length(Script.Name)-11));
		SetMapStyle(TextLib::Join("+",_Scripts));

		declare Continue = True;
		for(I,0,Scripts.count-1) {
			declare Script = Scripts[I];
			
			if(Continue && I >= CurrentScript) {
				if(Problems.count > 0) Finish();
				else {
					CurrentScript += 1;
					Layers::Show("ModifierScript");
					sleep(100);
					Layers::Show("ModifierStatus");
					Layers::SendEvent("ModifierStatus", "Progress", "0");
					Layers::SendEvent("ModifierScript", "ScriptName", Script.Name);
					Layers::SendEvent("ModifierStatus", "Status", "...");
					Layers::SendEvent("ModifierStatus", "Message", "");
					sleep(100);
					Layers::Show("ModifierActions");
					sleep(100);
					Layers::Show("ModifierMetadata");
					sleep(200);
					
					ValidateScript();
					
					declare Text BuildScript;
					
					switch(Script.Type) {
						case "Official": {
							BuildScript = File::Read("Media/Challenges/"^Script.Name);
						}
						case "Local": {
							
						}
						case "Online": {
							
						}
					}
					
					Layers::SendEvent("ModifierStatus", "Status", [Dictionary::Get("MODIFYING")^"..."]);
					Continue = ProcessScript(Script.Name, BuildScript);
					sleep(500);
					if(Problems.count > 0) Finish();
				}
			}
			if(Abort) return;
		}
	}
	
	Map.MapName = OriginalMap.Name ^ "$z - " ^ TextLib::Replace(Map.MapStyle, "+", " + ");
	
	Finish();
	
	Layers::DestroyAll();
	UILayerDestroyAll();
}