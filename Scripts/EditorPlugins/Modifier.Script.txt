#RequireContext CMapEditorPlugin

#Include "TextLib" as TextLib
#Include "MapUnits" as MapUnits

#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers

#Setting S_Build True

#Setting S_ScriptType ""
#Setting S_ScriptFileName ""

#Setting S_TestMode False

#Const S_HideUI False

#Struct SChBlock {
    Integer BlockScriptId;
    Text Name;
    Int3 Coord;
    Text Direction;
    Boolean IsRoad; 
    Boolean IsTerrain;
    Boolean IsPodium;
    Text WaypointType;  
    Boolean NoRespawn;
}

declare CUILayer LayerAPI;

Text GetScriptFileName() {
	declare Path = TextLib::Split("\\", S_ScriptFileName);
	if(Path.count != 0) return Path[Path.count-1];
	return "";
}

Int3 ToInt3(Text _Int3) {
	declare Int3 Int;
	declare NewText = TextLib::Replace(TextLib::SubText(_Int3,1,TextLib::Length(_Int3)-2)," ","");
	declare Values = TextLib::Split(",",NewText);
	for(i,0,Values.count-1)
		Int[i] = TextLib::ToInteger(Values[i]);
	return Int;
}

Boolean ToBoolean(Text _Boolean) {
	return (_Boolean == "True");
}

Text CBlockCardinalDirectionsToText(CBlock::CardinalDirections _Direction) {
	switch(_Direction) {
		case CBlock::CardinalDirections::North: { return "North"; }
		case CBlock::CardinalDirections::South: { return "South"; }
		case CBlock::CardinalDirections::West: { return "West"; }
		case CBlock::CardinalDirections::East: { return "East"; }
	}
	return "";
}

CMapEditorPlugin::CardinalDirections TextToCMapEditorPluginCardinalDirections(Text _Direction) {
	switch(_Direction) {
		case "North": { return CMapEditorPlugin::CardinalDirections::North; }
		case "South": { return CMapEditorPlugin::CardinalDirections::South; }
		case "West": { return CMapEditorPlugin::CardinalDirections::West; }
		case "East": { return CMapEditorPlugin::CardinalDirections::East; }
	}
	return CMapEditorPlugin::CardinalDirections::North;
}

SChBlock CBlockToSChBlock(CBlock _Block) {
	declare SChBlock ChBlock;
	ChBlock.Name = _Block.BlockModel.Name;
	ChBlock.Coord = _Block.Coord;
	ChBlock.Direction = CBlockCardinalDirectionsToText(_Block.Direction);
	
	switch(_Block.BlockModel.WaypointType) {
		case CBlockModel::EWayPointType::Start: { ChBlock.Waypoint = "Start"; }
		case CBlockModel::EWayPointType::Finish: { ChBlock.Waypoint = "Finish"; }
		case CBlockModel::EWayPointType::Checkpoint: { ChBlock.Waypoint = "Checkpoint"; }
		case CBlockModel::EWayPointType::None: { ChBlock.Waypoint = "None"; }
		case CBlockModel::EWayPointType::StartFinish: { ChBlock.Waypoint = "Multilap"; }
		case CBlockModel::EWayPointType::Dispenser: { ChBlock.Waypoint = "Dispenser"; }
	}
	
	ChBlock.IsRoad = _Block.BlockModel.IsRoad;
	ChBlock.IsTerrain = _Block.BlockModel.IsTerrain;
	ChBlock.IsPodium = _Block.BlockModel.IsPodium;
	
	return ChBlock;
}

Void Prepare() {
	HideEditorInterface = S_HideUI;
	EditMode = CMapEditorPlugin::EditMode::FreeLook;
	SetMapType("TrackMania/Challenge");
	Map.MapName ^= "$z - Reverse";
	
	Layers::Create("ModifierIntro",Manialink::FromFile("Media/Manialinks/Modifier/ModifierIntro"));
	Layers::Create("ModifierScript",Manialink::FromFile("Media/Manialinks/Modifier/ModifierScript"));
	Layers::Create("ModifierStatus",Manialink::FromFile("Media/Manialinks/Modifier/ModifierStatus"));
	Layers::Create("ModifierMetadata",Manialink::FromFile("Media/Manialinks/Modifier/ModifierMetadata"));
	Layers::Create("ModifierActions",Manialink::FromFile("Media/Manialinks/Modifier/ModifierActions"));
	Layers::Create("ModifierResult",Manialink::FromFile("Media/Manialinks/Modifier/ModifierResult"));
	
	Layers::SetAnimationInOut("ModifierScript",CUILayer::EUILayerAnimation::DownSlow);
	Layers::SetAnimationInOut("ModifierStatus",CUILayer::EUILayerAnimation::DownSlow);
	Layers::SetAnimationInOut("ModifierActions",CUILayer::EUILayerAnimation::RightSlow);
	Layers::SetAnimationInOut("ModifierMetadata",CUILayer::EUILayerAnimation::UpSlow);
	
	Layers::SetAnimationInOut("ModifierResult",CUILayer::EUILayerAnimation::DownSlow);
}

Void ValidateScript() {

}

Void Begin() {
	Layers::Show("ModifierIntro");
	sleep(500);
	LayerCustomEvent(Layers::Get("ModifierIntro"), "Map", [Map.MapInfo.Name]);
	LayerCustomEvent(Layers::Get("ModifierIntro"), "Show", []);
	sleep(2000);
	LayerCustomEvent(Layers::Get("ModifierIntro"), "Hide", []);
	Layers::Show("ModifierScript");
	
	LayerCustomEvent(Layers::Get("ModifierScript"), "ScriptName", [GetScriptFileName()]);
	sleep(100);
	Layers::Show("ModifierStatus");
	sleep(100);
	Layers::Show("ModifierActions");
	sleep(100);
	Layers::Show("ModifierMetadata");
	sleep(200);
	//Layers::Hide("ModifierIntro");
}

Void Complete() {
	sleep(500);
	LayerCustomEvent(Layers::Get("ModifierStatus"), "Status", ["COMPUTING SHADOWS..."]);
	LayerCustomEvent(Layers::Get("ModifierStatus"), "Message", [""]);
	sleep(200);
	//ComputeShadows();
	//wait(CurrentShadowsQuality != CMapEditorPlugin::ShadowsQuality::NotComputed);
	LayerCustomEvent(Layers::Get("ModifierStatus"), "Message", ["Shadows computed."]);
	sleep(500);
	Layers::Hide("ModifierScript");
	Layers::Hide("ModifierStatus");
	Layers::Hide("ModifierActions");
	Layers::Hide("ModifierMetadata");
	sleep(500);
	Layers::Show("ModifierResult");
	LayerCustomEvent(Layers::Get("ModifierResult"), "Show", []);
}

Void Success() {

}

Void Confusion() {
	
}

Void Revert() {
	
}

Void Solution() {

}

Void Respond(CMapEditorPluginEvent _Event, Text[] _Data) {
	LayerCustomEvent(LayerAPI, _Event.CustomEventType^"_Response", _Data);
}

Void ProcessRequest(CMapEditorPluginEvent _Event) {
	declare Event <=> _Event;
	
	switch(Event.CustomEventType) {
		case "Ch_ComputeShadows": {
			ComputeShadows();
			wait(CurrentShadowsQuality == CMapEditorPlugin::ShadowsQuality::VeryFast);
			Respond(Event, []);
		}
		case "Ch_RemoveAllBlocks": {
			RemoveAllBlocks();
			Respond(Event, []);
		}
		case "Ch_RemoveAllTerrain": {
			RemoveAllTerrain();
			Respond(Event, []);
		}
		case "Ch_RemoveAllOffZone": {
			RemoveAllOffZone();
			Respond(Event, []);
		}
		case "Ch_RemoveAllObjects": {
			RemoveAllObjects();
			Respond(Event, []);
		}
		case "Ch_RemoveAll": {
			RemoveAll();
			Respond(Event, []);
		}
		case "Ch_RemoveAllBlocksAndTerrain": {
			RemoveAllBlocksAndTerrain();
			Respond(Event, []);
		}
		case "Ch_PreloadAllBlocks": {
			PreloadAllBlocks();
			Respond(Event, []);
		}
		case "Ch_PreloadAllItems": {
			PreloadAllItems();
			Respond(Event, []);
		}
		case "Ch_CanPlaceBlock": {
			declare BlockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToCardinal(Event.CustomEventData[2]);
			declare OnGround = Conversion::ToBoolean(Event.CustomEventData[3]);
			declare VariantIndex = TextLib::ToInteger(Event.CustomEventData[4]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceBlock(BlockModel, Coord, Direction, OnGround, VariantIndex);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceBlock_NoDestruction": {
			declare BlockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToCardinal(Event.CustomEventData[2]);
			declare OnGround = Conversion::ToBoolean(Event.CustomEventData[3]);
			declare VariantIndex = TextLib::ToInteger(Event.CustomEventData[4]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceBlock_NoDestruction(BlockModel, Coord, Direction, OnGround, VariantIndex);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceBlock": {
			declare BlockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToCardinal(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceBlock(BlockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceBlock_NoDestruction": {
			declare BlockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToCardinal(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceBlock_NoDestruction(BlockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceRoadBlocks": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceRoadBlocks(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceRoadBlocks": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceRoadBlocks(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceTerrainBlocks": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceTerrainBlocks(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceTerrainBlocks": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceTerrainBlocks(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceTerrainBlocks_NoDestruction": {
			declare BlockName = Event.CustomEventData[0];
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceTerrainBlocks_NoDestruction(BlockModel, StartCoord, EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToCardinal(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceMacroblock": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToCardinal(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock_NoDestruction": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToCardinal(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock_NoDestruction(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceMacroblock_NoDestruction": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToCardinal(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock_NoDestruction(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock_NoTerrain": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToCardinal(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_PlaceMacroblock_NoTerrain": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToCardinal(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_RemoveMacroblock": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToCardinal(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = RemoveMacroblock(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_RemoveMacroblock_NoTerrain": {
			declare MacroblockName = Event.CustomEventData[0];
			declare Coord = Conversion::ToInt3(Event.CustomEventData[1]);
			declare Direction = Conversion::ToCardinal(Event.CustomEventData[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = RemoveMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_GetBlock": {
			declare Coord = Conversion::ToInt3(Event.CustomEventData[0]);

			declare Response = GetBlock(Coord);
			declare Block = Conversion::ToSChBlock(Response);

			Respond(Event, [Block.tojson()]);
		}
		case "Ch_RemoveBlock": {
			declare Coord = Conversion::ToInt3(Event.CustomEventData[0]);

			declare Response = RemoveBlock(Coord);
			Respond(Event, [""^Response]);
		}
		case "Ch_RemoveTerrainBlocks": {
			declare StartCoord = Conversion::ToInt3(Event.CustomEventData[0]);
			declare EndCoord = Conversion::ToInt3(Event.CustomEventData[1]);

			declare Response = RemoveTerrainBlocks(StartCoord,EndCoord);
			Respond(Event, [""^Response]);
		}
		case "Ch_GetBlockGroundHeight": {
			declare BlockName = Event.CustomEventData[0];
			declare CoordX = Conversion::ToInt3(Event.CustomEventData[1]);
			declare CoordY = Conversion::ToInt3(Event.CustomEventData[2]);
			declare Direction = Conversion::ToCardinal(Event.CustomEventData[3]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = GetBlockGroundHeight(BlockModel,CoordX,CoordY,Direction);
			Respond(Event, [""^Response]);
		}
		case "Ch_GetGroundHeight": {
			declare CoordX = Conversion::ToInt3(Event.CustomEventData[1]);
			declare CoordY = Conversion::ToInt3(Event.CustomEventData[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = GetGroundHeight(CoordX,CoordY);
			Respond(Event, [""^Response]);
		}
		case "Ch_GetStartLineBlock": {
			declare Response = GetStartLineBlock();
			declare Block = Conversion::ToSChBlock(Response);
			Respond(Event, [""^Response]);
		}
		case "Ch_SetUndergroundMode": {
			
		}
		case "Ch_ReplaceBlock": {
			
		}
		case "Ch_ReplaceAllBlocks": {
			
		}
		case "Ch_SwapBlock": {
			
		}
		case "Ch_GetFinishLineBlocks": {
			
		}
		case "Ch_GetCheckpointBlocks": {

		}
		case "Ch_GetBlocksByBlockName": {
			
		}
		default: {
			Respond(Event, ["False"]);
		}
	}
}

main() {
	if(S_Build) {
		Prepare();
		ValidateScript();
		Begin();

		declare Text BuildScript;
		
		switch(S_ScriptType) {
			case "Official": {
				BuildScript = File::Read("Media/Challenges/"^S_ScriptFileName);
			}
			case "Local": {
				
			}
			case "Online": {
				
			}
			case "Test": {
				declare persistent Text PERSISTENT_CHALLENGE_CODE for LocalUser;
				BuildScript = PERSISTENT_CHALLENGE_CODE;
			}
		}
		
		LayerAPI = UILayerCreate();
		LayerAPI.ManialinkPage = Manialink::Construct("",File::Read("Media/API.Script.txt")^"""
		
	{{{BuildScript}}}""");
	}
	
	while(True) {
		foreach(Event,PendingEvents) {
			if(Event.Type == CMapEditorPluginEvent::Type::LayerCustomEvent) {
				if(TextLib::StartsWith("Ch_", Event.CustomEventType)) {
					log("[BUILDER] Command: "^Event.CustomEventType);
					ProcessRequest(Event);
				}
				else if(Event.CustomEventType == "Button_Exit") {
					Quit();
				}
				else if(Event.CustomEventType == "Button_SavePlay") {
					TestMapFromStart();
				}
			}
		}
	
		yield;
	}
}