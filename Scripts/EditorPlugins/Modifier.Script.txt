#RequireContext CMapEditorPlugin

#Include "TextLib" as TextLib
#Include "MapUnits" as MapUnits

#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Map.Script.txt" as Map

#Include "Libs/Challenge/Conversion.Script.txt" as Conversion
#Include "Libs/Challenge/ModifierBase.Script.txt" as ModifierBase
#Include "Libs/Challenge/Processor.Script.txt" as Processor

#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings

#Setting S_Build False
#Setting S_TestMode False

#Const S_HideUI True

#Const C_Manialink_ModifierResult "Media/Manialinks/Sandbox/Modifier/ModifierResult"
#Const C_Manialink_ModifierIntro "Media/Manialinks/Sandbox/Modifier/ModifierIntro"
#Const C_Manialink_ModifierScript "Media/Manialinks/Sandbox/Modifier/ModifierScript"
#Const C_Manialink_ModifierStatus "Media/Manialinks/Sandbox/Modifier/ModifierStatus"
#Const C_Manialink_ModifierMetadata "Media/Manialinks/Sandbox/Modifier/ModifierMetadata"
#Const C_Manialink_ModifierActions "Media/Manialinks/Sandbox/Modifier/ModifierActions"

#Struct SMetadata {
	Text Name;
	Text AuthorLogin;
	Text AuthorNickname;
	Text Description;
}

#Struct SScriptInfo {
	Text Name;
	Text Type;
	SMetadata Metadata;
}

declare CUILayer LayerAPI;
declare Boolean Terminate;

declare ::ShadowsQuality LastShadowsQuality;

Void ValidateScript() {

}

Void Begin(Text _ScriptName) {
	Layers::SendEvent("ModifierScript", "ScriptName", [_ScriptName]);
	Layers::SendEvent("ModifierStatus", "Status", [Dictionary::Get("MODIFYING")^"..."]);
}

Void Finish() {
	Layers::Hide("ModifierScript");
	Layers::Hide("ModifierStatus");
	Layers::Hide("ModifierActions");
	Layers::Hide("ModifierMetadata");
	
	sleep(500);
	
	Layers::Create("ModifierResult",Manialink::FromFile(C_Manialink_ModifierResult, True, ["TextAnimation"], Settings::Get().Theme));
	Layers::Show("ModifierResult");

	declare metadata ModifierBase::SChProblem[] Problems for Map;

	if(Terminate) Layers::SendEvent("ModifierResult", "Unsolvable");
	else {
		Layers::SendEvent("ModifierResult", "Success");
		if(Problems.count > 0) Layers::SendEvent("ModifierResult", "Problems");
	}
	
	if(CurrentShadowsQuality == ::ShadowsQuality::NotComputed) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("NOT_COMPUTED"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::VeryFast) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("VERY_FAST"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::Fast) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("FAST"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::Default) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("DEFAULT"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::High) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("HIGH"), ""^IsUltraShadowsQualityAvailable]);
	else if(CurrentShadowsQuality == ::ShadowsQuality::Ultra) Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("ULTRA"), ""^IsUltraShadowsQualityAvailable]);
	
	Layers::SendEvent("ModifierResult", "Show");
}

Void Success() {

}

Void Confusion() {
	
}

Void Revert() {
	
}

Void Solution() {

}

Void TerminateScript() {
	Terminate = True;
}

Boolean ProcessScript(Text _ScriptName, Text _ScriptContent) {
	LayerAPI = UILayerCreate();
	LayerAPI.ManialinkPage = Manialink::Construct("","""#RequireContext CMapEditorPluginLayer

{{{File::Read("Media/API_Base.Script.txt")}}}
			
{{{Dictionary::TranslateAllPhrases(_ScriptContent)}}}
			
{{{Dictionary::TranslateAllPhrases(File::Read("Media/API.Script.txt"))}}}
			
{{{File::Read("Media/API_Main.Script.txt")}}}""");
			
	declare Completed = False;
	while(!Completed && !Terminate) {
		foreach(Event,PendingEvents) {
			if(Terminate) break;
			
			if(Event.Type == CMapEditorPluginEvent::Type::LayerCustomEvent) {
				if(Event.CustomEventType == "Ch_Complete") {
					Completed = True;
					log("[MODIFIER] "^_ScriptName^" completed");
				}
				else if(TextLib::StartsWith("Ch_", Event.CustomEventType)) {
					log("[MODIFIER] Request: "^Event.CustomEventType);
					declare Text[] Data;
					foreach(D,Event.CustomEventData)
						Data.add(D);
					if(!Processor::Command(LayerAPI, Event.CustomEventType, Data)) TerminateScript();
				}
				if(Event.CustomEventType == "ScriptMetadata") {
					Layers::SendEvent("ModifierMetadata", "Metadata", Event.CustomEventData[0]);
				}
			}
		}
		
		CameraTargetPosition = <Map.Size.X*32./2,5.,Map.Size.Z*32./3>;
		CameraToTargetDistance = 24.*Map.Size.X;
		CameraHAngle = 0.;
		CameraVAngle = 1.;
	
		yield;
	}

	UILayerDestroy(LayerAPI);

	Layers::SendEvent("ModifierStatus", "Status", Dictionary::Get("DONE"));
	
	declare metadata ModifierBase::SChProblem[] Problems for Map;
	if(Terminate) Layers::SendEvent("ModifierStatus", "Message", Dictionary::Get("SCRIPT_FINISHED_UNSUCCESSFULLY"));
	else if(Problems.count == 0) Layers::SendEvent("ModifierStatus", "Message", Dictionary::Get("SCRIPT_FINISHED_SUCCESSFULLY"));
	else Layers::SendEvent("ModifierStatus", "Message", Dictionary::Get("SCRIPT_FINISHED"));
	
	Layers::SendEvent("ModifierStatus", "Progress", "1");

	return !Terminate;
}

main() {
	if(!S_Build) return;

	Dictionary::SetTranslationFolder("Media/Translations");
	Dictionary::SetTranslationLanguage(Settings::Get().Language);
	
	declare Map::SMapInfo OriginalMapInfo for LocalUser;
	declare metadata ModifierBase::SChMap OriginalMap for Map;
	declare JsonSuccess = OriginalMap.fromjson(OriginalMapInfo.tojson());
	
	Map.MapName = OriginalMap.Name;
	Map.Comments = OriginalMap.Comments;
	Map.TMObjective_NbLaps = OriginalMap.TMObjective_NbLaps;
	Map.TMObjective_IsLapRace = OriginalMap.TMObjective_IsLapRace;
	
	declare metadata ModifierBase::SChProblem[] Problems for Map;
	
	declare SScriptInfo[] CHALLENGE_SCRIPTS for LocalUser;
	
	if(Problems.count == 0) {
		if(CHALLENGE_SCRIPTS.count == 0 && !S_TestMode) return;
	}
	
	CameraTargetPosition = <Map.Size.X*32./2,5.,Map.Size.Z*32./3>;
	CameraToTargetDistance = 24.*Map.Size.X;
	CameraHAngle = 0.;
	CameraVAngle = 1.;
	
	HideEditorInterface = S_HideUI;
	EditMode = CMapEditorPlugin::EditMode::FreeLook;
	
	Map.MapName = """Waiting to modify... ({{{OriginalMap.Name}}})""";
	
	if(Problems.count > 0) {
		
	}
	else {
		Layers::Create("ModifierIntro",Manialink::FromFile(C_Manialink_ModifierIntro, True, ["TextAnimation"], Settings::Get().Theme));
		Layers::Create("ModifierScript",Manialink::FromFile(C_Manialink_ModifierScript, True, ["TextAnimation"], Settings::Get().Theme));
		Layers::Create("ModifierStatus",Manialink::FromFile(C_Manialink_ModifierStatus, True, ["TextAnimation"], Settings::Get().Theme));
		Layers::Create("ModifierMetadata",Manialink::FromFile(C_Manialink_ModifierMetadata, True, ["TextAnimation"], Settings::Get().Theme));
		Layers::Create("ModifierActions",Manialink::FromFile(C_Manialink_ModifierActions, True, ["TextAnimation"], Settings::Get().Theme));
		
		Layers::SetAnimationInOut("ModifierScript",CUILayer::EUILayerAnimation::DownSlow);
		Layers::SetAnimationInOut("ModifierStatus",CUILayer::EUILayerAnimation::DownSlow);
		Layers::SetAnimationInOut("ModifierActions",CUILayer::EUILayerAnimation::RightSlow);
		Layers::SetAnimationInOut("ModifierMetadata",CUILayer::EUILayerAnimation::UpSlow);
		
		Layers::SetAnimationInOut("ModifierResult",CUILayer::EUILayerAnimation::DownSlow);
		
		LayerCustomEvent(Layers::Get("ModifierIntro"), "Map", [OriginalMap.Name]);
		Layers::Show("ModifierIntro");
	
		PreloadAllBlocks();
		
		declare Continue = False;
		while(!Continue) {
			foreach(Event,PendingEvents) {
				if(Event.Type == CMapEditorPluginEvent::Type::LayerCustomEvent) {
					switch(Event.CustomEventType) {
						case "Start": {
							Continue = True;
						}
					}
				}
			}
			yield;
		}
		
		Map.MapName = """Modifying... ({{{OriginalMap.Name}}})""";
		
		LayerCustomEvent(Layers::Get("ModifierIntro"), "Hide", []);
	
		Layers::Show("ModifierScript");
		sleep(100);
		Layers::Show("ModifierStatus");
		sleep(100);
		Layers::Show("ModifierActions");
		sleep(100);
		Layers::Show("ModifierMetadata");
		sleep(200);
		
		if(S_TestMode) {
			declare Text CHALLENGE_CODE for LocalUser;
			SetMapStyle("Test Script");
			Begin(Dictionary::Get("TEST_SCRIPT"));
			declare Continue = ProcessScript("TEST SCRIPT", CHALLENGE_CODE);
		}
		else {
			declare Text[] _Scripts;
			foreach(Script,CHALLENGE_SCRIPTS)
				_Scripts.add(TextLib::SubText(Script.Name, 0, TextLib::Length(Script.Name)-11));
			SetMapStyle(TextLib::Join("+",_Scripts));

			declare Continue = True;
			foreach(Script,CHALLENGE_SCRIPTS) {
				if(Continue) {
					Begin(Script.Name);
					ValidateScript();
					
					declare Text BuildScript;
					
					switch(Script.Type) {
						case "Official": {
							BuildScript = File::Read("Media/Challenges/"^Script.Name);
						}
						case "Local": {
							
						}
						case "Online": {
							
						}
					}
					
					Continue = ProcessScript(Script.Name, BuildScript);
					sleep(500);
				}
			}
		}
	}
	
	Map.MapName = OriginalMap.Name ^ "$z (" ^ OriginalMap.CollectionName ^ ", " ^ TextLib::Replace(Map.MapStyle, "+", " ")^ ")";
	
	Finish();
	
	while(True) {
		foreach(Event,PendingEvents) {
			if(Event.Type == CMapEditorPluginEvent::Type::LayerCustomEvent) {
				switch(Event.CustomEventType) {
					case "Button_Exit": {
						Quit();
					}
					case "Button_Validate": {
						Validate();
					}
					case "Button_Save": {
						declare metadata ModifierBase::SChProblem[] Problems for Map;

						if(Problems.count == 0) {
							if(CurrentShadowsQuality == ::ShadowsQuality::Fast
							|| CurrentShadowsQuality == ::ShadowsQuality::Default
							|| CurrentShadowsQuality == ::ShadowsQuality::High
							|| CurrentShadowsQuality == ::ShadowsQuality::Ultra) {
								Map.MapName = OriginalMap.Name ^ "$z (" ^ TextLib::Replace(Map.MapStyle, "+", " ")^ ")";
								SaveMap("");
							}
							else {
								Layers::SendEvent("ModifierResult", "SuggestShadows");
							}
						}
						else {
							SaveMap("");
						}
					}
					case "Button_Shadows_VeryFast": {
						ComputeShadows(::ShadowsQuality::VeryFast);
					}
					case "Button_Shadows_Fast": {
						ComputeShadows(::ShadowsQuality::Fast);
					}
					case "Button_Shadows_Default": {
						ComputeShadows(::ShadowsQuality::Default);
					}
					case "Button_Shadows_High": {
						ComputeShadows(::ShadowsQuality::High);
					}
					case "Button_Shadows_Ultra": {
						ComputeShadows(::ShadowsQuality::Ultra);
					}
				}
			}
		}
		
		if(LastShadowsQuality != CurrentShadowsQuality) {
			wait(IsEditorReadyForRequest);
			sleep(200);
			if(CurrentShadowsQuality == ::ShadowsQuality::VeryFast)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("VERY_FAST"), ""^IsUltraShadowsQualityAvailable]);
			else if(CurrentShadowsQuality == ::ShadowsQuality::Fast)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("FAST"), ""^IsUltraShadowsQualityAvailable]);
			else if(CurrentShadowsQuality == ::ShadowsQuality::Default)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("DEFAULT"), ""^IsUltraShadowsQualityAvailable]);
			else if(CurrentShadowsQuality == ::ShadowsQuality::High)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("HIGH"), ""^IsUltraShadowsQualityAvailable]);
			else if(CurrentShadowsQuality == ::ShadowsQuality::Ultra)
				Layers::SendEvent("ModifierResult", "Shadows", [Dictionary::Get("ULTRA"), ""^IsUltraShadowsQualityAvailable]);
			
			LastShadowsQuality = CurrentShadowsQuality;
		}
	
		yield;
	}
}