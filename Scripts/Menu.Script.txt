#RequireContext CManiaAppTitle

#Include "TextLib" as TextLib
#Include "ColorLib" as ColorLib
#Include "TimeLib" as TimeLib

#Include "Libs/BigBang1112/Http.Script.txt" as Http
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Auth.Script.txt" as Auth
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/Time.Script.txt" as Time
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Auth2.Script.txt" as Auth2

#Include "Libs/Sandbox/Menu/Quickplay.Script.txt" as Menu_Quickplay
#Include "Libs/Sandbox/Menu/Main.Script.txt" as Menu_Main
#Include "Libs/Challenge/Menu/Top.Script.txt" as Menu_Top
#Include "Libs/Sandbox/Menu/Editor.Script.txt" as Menu_Editor
#Include "Libs/Sandbox/Menu/Playsessions.Script.txt" as Menu_Playsessions
#Include "Libs/Sandbox/Menu/News.Script.txt" as Menu_News

#Include "Libs/Challenge/Menu/AuthBeta.Script.txt" as Menu_AuthBeta
#Include "Libs/Challenge/Menu/Replays.Script.txt" as Menu_Replays
#Include "Libs/Challenge/Menu/Release.Script.txt" as Menu_Release
#Include "Libs/Challenge/Loading.Script.txt" as Loading
#Include "Libs/Challenge/Notification.Script.txt" as Notification
#Include "Libs/Challenge/NotificationPresets.Script.txt" as NotificationPresets

#Include "Libs/Challenge/Devmode.Script.txt" as Devmode
#Include "Libs/Challenge/Service/Status.Script.txt" as Service_Status

#Setting S_Devmode True

Void GetUnauthorizedToken(Service_Status::SStatus _Status) {
	declare Request = Http::SyncGET("""{{{_Status.Global.Service}}}/auth.php?login={{{LocalUser.Login}}}&token={{{Auth::GetToken().Value}}}""");
	if(Http::IsSuccessfulStatusCode(Request.StatusCode)) {
		declare Menu_AuthBeta::SAccess Access;
		declare JsonSuccess = Access.fromjson(Request.Result);
		declare Text CHALLENGE_TOKEN for LocalUser;
		CHALLENGE_TOKEN = Access.UserToken;
	}
	else Dialog_Message("HTTP ERROR "^Request.StatusCode^"\nTry to reload the title pack.");
	Http.Destroy(Request);
}

main() {
	while(True) { // Restart mechanism
		Settings::Restart(False);
		
		//Layers::Create("Background", "file://Media/Manialinks/Background.xml", True, False);
		
		Dictionary::SetTranslationFolder("Media/Translations");
		Dictionary::SetTranslationLanguage(Settings::Get().Language);
		
		Auth::Start();
		
		Notification::Init();
		yield;
		
		Layers::Create("Loading", Manialink::FromFile("Media/Manialinks/Loading", False, [], Settings::Get().Theme), True);
		
		declare Status = Service_Status::CheckStatus(LocalUser, Auth::GetToken().Value);
		while(!Status.Global.Running) {
			sleep(10000);
			Status = Service_Status::CheckStatus(LocalUser, Auth::GetToken().Value);
		}
		
		declare Authorized = False;
		
		if(Status.User.count > 0) {
			if(Status.User[0].Authorized) {
				declare Success = Auth2::AsyncAuthorize("Authorize", "b1a3d10ba7", "basic maps", Status.Global.Service^"/auth.php");
				while(True) {
					if(Auth2::IsCompleted("Authorize")) {
						if(Auth2::IsSuccessful("Authorize")) {
							declare Result = Auth2::GetAsyncAuthorizeResult("Authorize");
							if(Result.AlreadyAccepted) {
								declare Success = Http::AsyncGET("Redirect", Result.RedirectUrl);
							}
						}
						else {
							Dialog_Message("HTTP ERROR "^Auth2::GetStatusCode("Authorize")^"\nTry to reload the title pack.");
						}
						Auth2::Destroy("Authorize");
					}
					
					if(Http::IsCompleted("Redirect")) {
						if(Http::IsSuccessful("Redirect")) {
							declare Menu_AuthBeta::SAccess Access;
							declare JsonSuccess = Access.fromjson(Http::GetResult("Redirect"));
							declare Text CHALLENGE_TOKEN for LocalUser;
							CHALLENGE_TOKEN = Access.UserToken;
							break;
						}
						else {
							Dialog_Message("HTTP ERROR "^Auth2::GetStatusCode("Redirect")^"\nTry to reload the title pack.");
						}
						Http::Destroy("Redirect");
					}
					
					Auth::Loop();
					yield;
				}
				Authorized = True;
			}
			else {
				GetUnauthorizedToken(Status);
			}
		}
		else {
			GetUnauthorizedToken(Status);
		}
		
		Layers::Destroy("Loading");
		
		Menu_Release::Start();
		wait(Menu_Release::Loop());
		
		yield;
		
		Layers::Create("Preload", Manialink::FromFile("Media/Manialinks/Preload", False, [], Settings::Get().Theme), True);
		Menu_Main::Init();
		Layers::SendEvent("Preload", "Progress", 1/8.);
		yield;
		Menu_Quickplay::Init();
		Layers::SendEvent("Preload", "Progress", 2/8.);
		yield;
		Menu_Top::Init();
		Layers::SendEvent("Preload", "Progress", 3/8.);
		yield;
		Menu_Editor::Init();
		Layers::SendEvent("Preload", "Progress", 4/8.);
		yield;
		Menu_Playsessions::Init();
		Layers::SendEvent("Preload", "Progress", 5/8.);
		yield;
		Menu_News::Init();
		Layers::SendEvent("Preload", "Progress", 6/8.);
		yield;
		Menu_Replays::Init();
		Layers::SendEvent("Preload", "Progress", 7/8.);
		yield;
		Menu_AuthBeta::Init();
		Layers::SendEvent("Preload", "Progress", 8/8.);
		sleep(300);
		Layers::Destroy("Preload");
		sleep(200);
		
		Notification::Start(<150.,55.>);
		yield;
		Menu_Main::Start();
		yield;
		Menu_Quickplay::Start();
		yield;
		Menu_Top::Start();
		yield;
		Menu_Editor::Start();
		yield;
		Menu_Playsessions::Start();
		yield;
		Menu_News::Start();
		yield;
		Menu_Replays::Start();
		yield;
		if(Authorized) Layers::SendEvent("Top", "HideJoin");
		yield;
		NotificationPresets::Notify_Campaign(LocalUser);
		yield;
		if(S_Devmode) {
			Devmode::Start();
		}
		
		while(!Settings::IsRestarting()) {
			foreach(Event,PendingEvents) {
				Layers::Event(Event);
				Menu_Quickplay::Event(Event);
				Menu_Main::Event(Event);
				Menu_Top::Event(Event);
				Menu_Editor::Event(Event);
				Menu_Playsessions::Event(Event);
				Menu_News::Event(Event);
				Menu_Replays::Event(Event);
				Menu_AuthBeta::Event(Event);
				Notification::Event(Event);
			}
			
			Menu_Quickplay::Async();
			Menu_Main::Async();
			Menu_Top::Async();
			Menu_Editor::Async();
			Menu_Playsessions::Async();
			Menu_News::Async();
			Menu_Replays::Async();
			Menu_AuthBeta::Async();
			Notification::Async();
	
			Auth::Loop();
			Menu_Quickplay::Loop();
			Menu_Main::Loop();
			Menu_Top::Loop();
			Menu_Editor::Loop();
			Menu_Playsessions::Loop();
			Menu_News::Loop();
			Menu_Replays::Loop();
			Notification::Loop();
			
			if(!Time::Stamp_CreateOnce("STATUS", 10*1000)) {
				if(Time::Stamp_Reached("STATUS")) {
					declare Success = Service_Status::AsyncCheckStatus("STATUS", LocalUser);
				}
			}
			
			if(Service_Status::AsyncIsCompleted("STATUS")) {
				if(Service_Status::AsyncIsSuccessful("STATUS")) {
					declare Status = Service_Status::GetAsyncCheckStatusResult("STATUS", LocalUser);
				}
			}
		
			yield;
		}
		
		Layers::DestroyAll();
		UILayerDestroyAll();
	}
}