#RequireContext CManiaAppTitle

#Include "TextLib" as TextLib
#Include "ColorLib" as ColorLib
#Include "TimeLib" as TimeLib

#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Auth.Script.txt" as Auth
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings

#Include "Libs/Challenge/Menu/Quickplay.Script.txt" as Menu_Quickplay
#Include "Libs/Challenge/Menu/Main.Script.txt" as Menu_Main
#Include "Libs/Challenge/Menu/Top.Script.txt" as Menu_Top
#Include "Libs/Challenge/Menu/Editor.Script.txt" as Menu_Editor
#Include "Libs/Challenge/Menu/Playsessions.Script.txt" as Menu_Playsessions
#Include "Libs/Challenge/Menu/News.Script.txt" as Menu_News
#Include "Libs/Challenge/Menu/AuthBeta.Script.txt" as Menu_AuthBeta

#Include "Libs/Challenge/Devmode.Script.txt" as Devmode
#Include "Libs/Challenge/Restart.Script.txt" as Restart

#Setting S_Devmode True

main() {
	while(True) { // Restart mechanism
		Restart::Restart(False);
		
		Layers::Create("Loading", "file://Media/Manialinks/Loading.xml", True, False, CUILayer::EUILayerType::LoadingScreen);
		
		//Auth::AuthorizeInManialink("b1a3d10ba7", "basic maps", "http://localhost/challenge/auth");
		
		Dictionary::SetTranslationFolder("Media/Translations");
		Dictionary::SetTranslationLanguage(Settings::Get().Language);
		
		Auth::Start();
		
		Menu_AuthBeta::Start();
		while(!Menu_AuthBeta::GetAccess().Pass) {
			foreach(Event,PendingEvents) {
				Menu_AuthBeta::Event(Event);
			}
		
			Menu_AuthBeta::Async();
			
			Auth::Loop();
			Menu_AuthBeta::Loop();
			yield;
		}
		Menu_AuthBeta::End();
		
		Menu_Main::Start();
		Menu_Quickplay::Start();
		Menu_Top::Start();
		Menu_Editor::Start();
		Menu_Playsessions::Start();
		Menu_News::Start();
		
		if(S_Devmode) {
			Devmode::Start();
		}
		
		//EnableMenuNavigationInputs = True;
	
		while(!Restart::IsRestarting()) {
			foreach(Event,PendingEvents) {
				Layers::Event(Event);
				Menu_Quickplay::Event(Event);
				Menu_Main::Event(Event);
				Menu_Top::Event(Event);
				Menu_Editor::Event(Event);
				Menu_Playsessions::Event(Event);
				Menu_News::Event(Event);
			}
			
			Menu_Quickplay::Async();
			Menu_Main::Async();
			Menu_Top::Async();
			Menu_Editor::Async();
			Menu_Playsessions::Async();
			Menu_News::Async();
	
			Auth::Loop();
			Menu_Quickplay::Loop();
			Menu_Main::Loop();
			Menu_Top::Loop();
			Menu_Editor::Loop();
			Menu_Playsessions::Loop();
			Menu_News::Loop();
		
			yield;
		}
		
		Layers::DestroyAll();
		UILayerDestroyAll();
	}
}