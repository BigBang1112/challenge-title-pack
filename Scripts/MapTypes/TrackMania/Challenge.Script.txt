#RequireContext CTmMapType

#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink

#Include "Libs/Challenge/ModifierBase.Script.txt" as ModifierBase

#Struct SVehicle {
	Text Name;
	Ident Id;
}

Void CheckValidability() {
	declare StartsFinishes = 0;
	declare Starts = 0;
	declare Finishes = 0;
	declare Checkpoints = 0;
	foreach (Anchor in AnchorData) {
		if(Anchor.Block != Null) {
			switch(Anchor.Block.BlockModel.WaypointType) {
				case CBlockModel::EWayPointType::StartFinish: StartsFinishes += 1;
				case CBlockModel::EWayPointType::Start: Starts += 1;
				case CBlockModel::EWayPointType::Finish: Finishes += 1;
				case CBlockModel::EWayPointType::Checkpoint: Checkpoints += 1;
			}
		}
		else {
			if(Anchor.DefaultTag == "Spawn") Starts += 1;
			else if(Anchor.DefaultTag == "Goal") Finishes += 1;
			else if(Anchor.DefaultTag == "Checkpoint") Checkpoints += 1;
			else if(Anchor.DefaultTag == "StartFinish") StartsFinishes += 1;
		}
	}
	
	declare metadata ModifierBase::SChProblem[] Problems for Map;
	
	if((Finishes > 0 || (StartsFinishes == 1 && Checkpoints > 0)) && Problems.count == 0) {
		ValidationStatus = CMapType::ValidationStatus::Validated;
		if(Map.TMObjective_AuthorTime == -1) {
			Map.TMObjective_AuthorTime = 2147483647;
			Map.TMObjective_BronzeTime = 2147483647;
			Map.TMObjective_SilverTime = 2147483647;
			Map.TMObjective_GoldTime = 2147483647;
		}
	}
	else
		ValidationStatus = CMapType::ValidationStatus::NotValidable;
}

main() {
	EnableEditorInputsCustomProcessing = True;
	
	wait(AllPlayers.count>0);
	declare Player <=> Mode.AllPlayers[0];
	declare UI <=> Mode.UIManager.GetUI(Player);
	
	Mode.UIManager.UIAll.OverlayHideBackground = True;
	Mode.UIManager.UIAll.OverlayHideNotices = True;
	Mode.UIManager.UIAll.OverlayHideMapInfo = True;
	Mode.UIManager.UIAll.OverlayHideOpponentsInfo = True;
	Mode.UIManager.UIAll.OverlayHideChat = True;
	Mode.UIManager.UIAll.OverlayHideCheckPointList = True;
	Mode.UIManager.UIAll.OverlayHideCountdown = True;
	Mode.UIManager.UIAll.OverlayHideChrono = True;
	Mode.UIManager.UIAll.OverlayHideSpeedAndDist = True;
	Mode.UIManager.UIAll.OverlayHidePersonnalBestAndRank = True;
	Mode.UIManager.UIAll.OverlayHidePosition = True;
	Mode.UIManager.UIAll.OverlayHideMultilapInfos = True;
	Mode.UIManager.UIAll.OverlayHideSpectatorControllers = True;
	Mode.UIManager.UIAll.OverlayHideSpectatorInfos = True;
	Mode.UIManager.UIAll.OverlayChatHideAvatar = True;
	Mode.UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
	Mode.UIManager.UIAll.SmallScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
	Mode.UIManager.UIAll.ScoreTableOnlyManialink = True;
	
	Mode.ClientManiaAppUrl = "file://Media/ManiaApps/ChallengeSoloClient.Script.txt";
	
	while(True) {
		foreach(Event,PendingEvents) {
			switch(Event.Type) {
				case CMapEditorPluginEvent::Type::StartValidation: {					
					declare Text[] VehicleList = ["CanyonCar", "StadiumCar", "ValleyCar", "LagoonCar",
					"DesertCar", "RallyCar", "SnowCar", "IslandCar", "BayCar", "CoastCar"];
					
					foreach(Player, Players) {
						declare UI <=> Mode.UIManager.GetUI(Player);
						declare netwrite Text[] Server_Vehicles for UI;
						Server_Vehicles = VehicleList;
					}
					
					declare SVehicle[] Vehicles;
				
					Mode.ItemList_Begin();
					foreach(Name, VehicleList) {
						declare SVehicle Vehicle;
						Vehicle.Name = Name;
						Vehicle.Id = Mode.ItemList_Add(Name^"New.Item.Gbx");
						Vehicles.add(Vehicle);
					}
					Mode.ItemList_End();
				
					RequestEnterPlayground();
					wait(IsSwitchedToPlayground);
										
					wait(Mode.MapLoaded);
					
					declare SVehicle MapVehicle;
					foreach(Vehicle, Vehicles)
						if(Vehicle.Name == Mode.MapPlayerModelName) MapVehicle = Vehicle;
					
					foreach(Player, Players) {
						declare UI <=> Mode.UIManager.GetUI(Player);
						declare netwrite Text Server_MapVehicle for UI;
						Server_MapVehicle = Mode.MapPlayerModelName;
					}
					
					Player.RaceStartTime = -1;
					Player.IsSpawned = True;
					Player.Score.Clear();
					Mode.UIManager.UIAll.UISequence = CUIConfig::EUISequence::Intro;
					wait(Mode.UIManager.UIAll.UISequenceIsCompleted);
					Mode.CutOffTimeLimit = -1;
					
					
					while(IsSwitchedToPlayground) {
						if(ValidationEndRequested) {
							RequestLeavePlayground();
							wait(!IsSwitchedToPlayground);
							break;
						}
						
						foreach(Player,Mode.Players) {
							declare UI <=> UIManager.GetUI(Player);
							declare netread Integer User_VehicleIndex for UI;
							if(Vehicles.existskey(User_VehicleIndex)) Player.ForceModelId = Vehicles[User_VehicleIndex].Id;
							else Player.ForceModelId = MapVehicle.Id;
							Mode.SpawnPlayer(Player, 0, Mode.Now+10000);
						}
						
						yield;
					}
				}
			}
		}
		
		CheckValidability();
	
		yield;
	}
}