#RequireContext CTmMapType

#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/File.Script.txt" as File

#Include "Libs/Challenge/ModifierBase.Script.txt" as ModifierBase

#Struct SVehicle {
	Text Name;
	Ident Id;
}

#Struct SDefinedVehicle {
	Text Name;
	Text Image;
	Text File;
}

Void CheckValidability() {
	declare StartsFinishes = 0;
	declare Starts = 0;
	declare Finishes = 0;
	declare Checkpoints = 0;
	foreach (Anchor in AnchorData) {
		if(Anchor.Block != Null) {
			switch(Anchor.Block.BlockModel.WaypointType) {
				case CBlockModel::EWayPointType::StartFinish: StartsFinishes += 1;
				case CBlockModel::EWayPointType::Start: Starts += 1;
				case CBlockModel::EWayPointType::Finish: Finishes += 1;
				case CBlockModel::EWayPointType::Checkpoint: Checkpoints += 1;
			}
		}
		else {
			if(Anchor.DefaultTag == "Spawn") Starts += 1;
			else if(Anchor.DefaultTag == "Goal") Finishes += 1;
			else if(Anchor.DefaultTag == "Checkpoint") Checkpoints += 1;
			else if(Anchor.DefaultTag == "StartFinish") StartsFinishes += 1;
		}
	}
	
	declare metadata ModifierBase::SChProblem[] Problems for Map;
	
	if((Finishes > 0 || (StartsFinishes == 1 && Checkpoints > 0)) && Problems.count == 0) {
		ValidationStatus = CMapType::ValidationStatus::Validated;
		if(Map.TMObjective_AuthorTime == -1) {
			Map.TMObjective_AuthorTime = 2147483647;
			Map.TMObjective_BronzeTime = 2147483647;
			Map.TMObjective_SilverTime = 2147483647;
			Map.TMObjective_GoldTime = 2147483647;
		}
	}
	else
		ValidationStatus = CMapType::ValidationStatus::NotValidable;
}

main() {
	EnableEditorInputsCustomProcessing = True;
	
	wait(AllPlayers.count>0);
	declare Player <=> Mode.AllPlayers[0];
	declare UI <=> Mode.UIManager.GetUI(Player);
	
	Mode.UIManager.UIAll.OverlayHideBackground = True;
	Mode.UIManager.UIAll.OverlayHideNotices = True;
	Mode.UIManager.UIAll.OverlayHideMapInfo = True;
	Mode.UIManager.UIAll.OverlayHideOpponentsInfo = True;
	Mode.UIManager.UIAll.OverlayHideChat = True;
	Mode.UIManager.UIAll.OverlayHideCheckPointList = True;
	Mode.UIManager.UIAll.OverlayHideCountdown = True;
	Mode.UIManager.UIAll.OverlayHideChrono = True;
	Mode.UIManager.UIAll.OverlayHideSpeedAndDist = True;
	Mode.UIManager.UIAll.OverlayHidePersonnalBestAndRank = True;
	Mode.UIManager.UIAll.OverlayHidePosition = True;
	Mode.UIManager.UIAll.OverlayHideMultilapInfos = True;
	Mode.UIManager.UIAll.OverlayHideSpectatorControllers = True;
	Mode.UIManager.UIAll.OverlayHideSpectatorInfos = True;
	Mode.UIManager.UIAll.OverlayChatHideAvatar = True;
	Mode.UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
	Mode.UIManager.UIAll.SmallScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
	Mode.UIManager.UIAll.ScoreTableOnlyManialink = True;
	
	while(True) {
		foreach(Event,PendingEvents) {
			switch(Event.Type) {
				case CMapEditorPluginEvent::Type::StartValidation: {
					Mode.ClientManiaAppUrl = "file://Media/ManiaApps/ChallengeSoloClient.Script.txt";
					
					declare SDefinedVehicle[] DefinedVehicles;
					declare JsonSuccess = DefinedVehicles.fromjson(File::Read("Media/Vehicle.json"));
					
					foreach(Player, Players) {
						declare UI <=> Mode.UIManager.GetUI(Player);
						
						declare netwrite Text[] Server_Vehicles for UI;
						Server_Vehicles.clear();
						foreach(Vehicle,DefinedVehicles)
							Server_Vehicles.add(Vehicle.Name);
						
						declare netwrite Integer Server_VehicleLock for UI;
						Server_VehicleLock = -1;
						
						declare netwrite Boolean Server_Playing for UI;
						Server_Playing = False;
					}
					
					declare SVehicle[] Vehicles;
				
					Mode.ItemList_Begin();
					foreach(Vehicle, DefinedVehicles) {
						declare SVehicle V;
						V.Name = Vehicle.Name;
						V.Id = Mode.ItemList_Add(Vehicle.File);
						Vehicles.add(V);
					}
					Mode.ItemList_End();
				
					RequestEnterPlayground();
					wait(IsSwitchedToPlayground);
										
					wait(Mode.MapLoaded);
					
					declare SVehicle MapVehicle;
					foreach(Vehicle, Vehicles)
						if(Vehicle.Name == Mode.MapPlayerModelName) MapVehicle = Vehicle;
					
					foreach(Player, Players) {
						declare UI <=> Mode.UIManager.GetUI(Player);
						declare netwrite Text Server_MapVehicle for UI;
						Server_MapVehicle = Mode.MapPlayerModelName;
					}
					
					Player.RaceStartTime = -1;
					Player.IsSpawned = True;
					Player.Score.Clear();
					Mode.UIManager.UIAll.UISequence = CUIConfig::EUISequence::Intro;
					wait(Mode.UIManager.UIAll.UISequenceIsCompleted);
					Mode.UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
					Mode.CutOffTimeLimit = -1;
					
					while(IsSwitchedToPlayground) {
						foreach(Event, Mode.PendingEvents) {
							declare UI <=> Mode.UIManager.GetUI(Event.Player);
							
							declare netwrite Integer Server_VehicleLock for UI;
							declare netwrite Boolean Server_Playing for UI;
							
							declare netread Integer Client_VehicleIndex for UI;
							
							switch(Event.Type) {
								case CTmModeEvent::EType::StartLine: {									
									Server_VehicleLock = Client_VehicleIndex;
								}
								case CTmModeEvent::EType::GiveUp: {
									
								}
							}
						}
						
						foreach(Event, Mode.UIManager.PendingEvents) {
							switch(Event.Type) {
								case CUIConfigEvent::EType::OnLayerCustomEvent: {
									foreach(Player,Players) {
										if(Event.UI == UIManager.GetUI(Player)) {
											declare netwrite Boolean Server_Playing for UI;
											declare netwrite Integer Server_VehicleLock for UI;
											
											declare netread Integer Client_VehicleIndex for UI;
											
											switch(Event.CustomEventType) {
												case "Start": {
													if(Vehicles.existskey(Client_VehicleIndex)) Player.ForceModelId = Vehicles[Client_VehicleIndex].Id;
													else Player.ForceModelId = MapVehicle.Id;
													Player.IsSpawned = True;
													Player.RaceStartTime = Mode.Now+2500;
													
													Server_Playing = True;
													Server_VehicleLock = -1;
												}
												case "Menu": {
													Server_Playing = False;
													Server_VehicleLock = -1;
												}
												case "VehicleIndexChanged": {
													if(Server_VehicleLock == -1)
														Server_Playing = False;
												}
											}
										}
									}
								}
							}
						}
					
						if(ValidationEndRequested) {
							RequestLeavePlayground();
							wait(!IsSwitchedToPlayground);
							break;
						}
						
						foreach(Player,Mode.Players) {
							declare UI <=> UIManager.GetUI(Player);
							
							declare netwrite Boolean Server_Playing for UI;
							declare netwrite Integer Server_VehicleLock for UI;
							
							declare netread Integer Client_VehicleIndex for UI;
							
							if(Server_Playing) {
								
							}
							else {
								if(Server_VehicleLock == -1) {
									if(Vehicles.existskey(Client_VehicleIndex)) Player.ForceModelId = Vehicles[Client_VehicleIndex].Id;
									else Player.ForceModelId = MapVehicle.Id;
									Player.IsSpawned = True;
									Player.RaceStartTime = Mode.Now+10000;
								}
								else {
									Player.ForceModelId = Vehicles[Server_VehicleLock].Id;
									Player.IsSpawned = True;
									Player.RaceStartTime = Mode.Now+10000;
								}
							}
						}
						
						foreach(Player, Mode.PlayersWaiting) {
							declare netwrite Boolean Server_Playing for UI;
							declare netwrite Integer Server_VehicleLock for UI;
							
							declare netread Integer Client_VehicleIndex for UI;
							
							Server_VehicleLock = -1;
							
							if(Server_Playing) {
								declare UI <=> UIManager.GetUI(Player);
								
								Player.ForceModelId = Vehicles[Client_VehicleIndex].Id;
								Mode.SpawnPlayer(Player, 0, Mode.Now+2500);
							}
						}
						
						yield;
					}
					
					Mode.ClientManiaAppUrl = "";
				}
			}
		}
		
		CheckValidability();
	
		yield;
	}
}