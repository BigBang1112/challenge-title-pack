#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Http.Script.txt" as Http
#Include "Libs/BigBang1112/Task.Script.txt" as Task
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary

#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/Time.Script.txt" as Time

#Include "Libs/Challenge/Service/Status.Script.txt" as Service_Status
#Include "Libs/Challenge/Loading.Script.txt" as Loading

#Struct SElement {
	Text Name;
	Integer Count;
	Boolean Selected;
	Boolean Selectable;
}

#Const C_Manialink "Media/Manialinks/Window_List"

declare Service_Status::SPlaysession SelectedPlaysession;

Void Init() {
	Layers::Create("Playsessions", Manialink::FromFile(C_Manialink, True, ["Audio"], Settings::Get().Theme));
}

Void Start() {
	Layers::SendEvent("Playsessions", "Title", Dictionary::Get("NOW_PLAYING"));
	Layers::SendEvent("Playsessions", "Position", ["115 0"]);
	Layers::SendEvent("Playsessions", "Size", ["70 70"]);
	Layers::SendEvent("Playsessions", "Animation_Out", ["200 0"]);
	Layers::SendEvent("Playsessions", "Number_Enable", "True");
	Layers::SendEvent("Playsessions", "Do_Not_Show_One", "True");
	
	Layers::Show("Playsessions", True);
}

Void Event(CManiaAppEvent _Event) {
	declare Event <=> _Event;

	if(Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
		if(Event.CustomEventLayer == Layers::Get("Playsessions"))
		switch(Event.CustomEventType) {
			case "Select": {
				SelectedPlaysession = Service_Status::LastStatus(LocalUser).Playsessions[TextLib::ToInteger(Event.CustomEventData[0])];
				Task::Async_DataFileMgr("PLAYSESSION_MAP",DataFileMgr.Map_GetGameList("", True));
			}
		}
	}
}

Void Async() {	
	if(Task::IsCompleted("PLAYSESSION_MAP")) {
		if(Task::IsSuccessful("PLAYSESSION_MAP")) {
			declare MapList = (Task::Get("PLAYSESSION_MAP") as CTaskResult_MapList);
			declare CMapInfo PlayableMap;
			foreach(MapInfo,MapList.MapInfos)
				if(MapInfo.MapUid == SelectedPlaysession.Map.Uid)
					PlayableMap <=> MapInfo;
			if(PlayableMap != Null) {
				Loading::SetLoading(PlayableMap.CollectionName, PlayableMap.MapUid);
				TitleControl.PlayMap(PlayableMap.FileName,"","");
			}
			Task::Destroy_DataFileMgr("PLAYSESSION_MAP");
		}
	}
}

Void Loop() {
	if(!Time::Stamp_CreateOnce("PLAYSESSION_REFRESH", 1*1000)) {
		if(Time::Stamp_Reached("PLAYSESSION_REFRESH")) {
			declare Playsessions = Service_Status::LastStatus(LocalUser).Playsessions;
			declare SElement[] Elements;
			foreach(Playsession,Playsessions) {
				declare SElement Element;
				Element.Name = Playsession.Map.OriginalName;
				Element.Count = Playsession.Users.count;
				Element.Selectable = True;
				Elements.add(Element);
			}
			Layers::SendEvent("Playsessions", "Elements", Elements.tojson());
		}
	}
}