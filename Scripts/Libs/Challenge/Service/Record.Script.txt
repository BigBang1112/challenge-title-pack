#Include "Libs/BigBang1112/Http.Script.txt" as Http

#Include "Libs/Challenge/Service/Status.Script.txt" as Service_Status

#Struct SRanking {
	Integer Rank;
	Integer Count;
}

#Struct SRecord {
	Integer Rank;
	Text Login;
	Text Nickname;
	Integer Time;
	Integer[] Checkpoints;
}

#Struct SLeaderboard {
	SRecord[] Records;
}

#Struct SRecordResult {
	SRecord Record;
	Integer LastRecord;
	Integer ActivityPoints;
	Integer SkillpointsPoints;
	SRanking[Text] Rankings;
	SLeaderboard[Text] Leaderboards;
}

#Struct SRecordParams {
	Text UserToken;
	Text MapUid;
	Text Vehicle;
	Integer Time;
	Integer[] Checkpoints;
}

Void Record(CUser _User, SRecordParams _Params) {
	declare Request = Http::SyncPOST("""{{{Service_Status::LastStatus(_User).Global.Service}}}/ingame/record.php""", _Params.tojson());
}

/*
// CHttpRequest AsyncGet(Text _Name)
// Gets asynchonous request, completed or pending.

// Text _Name - Identification name

// Returns request that can or cannot be in the progress
*/
CHttpRequest AsyncGet(Text _Name) {
	return Http::Get(_Name);
}

/*
// Void AsyncDestroy(Text _Name)
// Destroys an aynchonous request.

// Text _Name - Identification name
*/
Void AsyncDestroy(Text _Name) {
	Http::Destroy(_Name);
}

/*
// Boolean AsyncIsCompleted(Text _Name, Boolean _NoLog)
// Checks if the asynchronous request was completed.

// Text _Name - Identification name
// Boolean _NoLog - If to not inform to the console

// Returns True if the request is completed but not destroyed.
*/
Boolean AsyncIsCompleted(Text _Name, Boolean _NoLog) {
	return Http::IsCompleted(_Name, _NoLog);
}

/*
// Boolean AsyncIsCompleted(Text _Name)
// Checks if the asynchronous request was completed.

// Text _Name - Identification name

// Returns True if the request is completed but not destroyed.
*/
Boolean AsyncIsCompleted(Text _Name) {
	return AsyncIsCompleted(_Name, False);
}

/*
// Boolean AsyncIsSuccessful(Text _Name)
// Checks if the asynchonous request was completed successfully.

// Text _Name - Identification name

// Returns True if the request is completed with a positive response (between 200 inclusively and 300 exclusively HTTP code).
*/
Boolean AsyncIsSuccessful(Text _Name) {
	return Http::IsSuccessful(_Name);
}

/*
// Integer AsyncGetStatusCode(Text _Name, Boolean _NoLog)
// Gets status code of the asynchronous request.

// Text _Name - Identification name
// Boolean _NoLog - If to not inform to the console

// Returns status code number of a completed request, or 0 if the request is not completed or does not exist.
*/
Integer AsyncGetStatusCode(Text _Name, Boolean _NoLog) {
	return Http::GetStatusCode(_Name, _NoLog);
}

/*
// Integer AsyncGetStatusCode(Text _Name)
// Gets status code of the asynchronous request.

// Text _Name - Identification name

// Returns status code number of a completed request, or 0 if the request is not completed or does not exist.
*/
Integer AsyncGetStatusCode(Text _Name) {
	return AsyncGetStatusCode(_Name, False);
}

/*
// Text AsyncGetResult(Text _Name)
// Gets result of the asynchronous request.

// Text _Name - Identification name

// Returns result of a completed request, or empty string if the request is not completed or does not exist.
*/
Text AsyncGetResult(Text _Name) {
	return Http::GetResult(_Name);
}

Boolean AsyncRecord(Text _Name, CUser _User, SRecordParams _Params) {
	return Http::AsyncPOST(_Name, """{{{Service_Status::LastStatus(_User).Global.Service}}}/ingame/record.php""", _Params.tojson(), "");
}

SRecord GetAsyncRecordResult(Text _Name) {
	declare SRecord Result;
	
	if(AsyncIsCompleted(_Name)) {
		if(AsyncIsSuccessful(_Name)) {
			declare JsonSuccess = Result.fromjson(AsyncGetResult(_Name));
		}
		AsyncDestroy(_Name);
	}
	
	return Result;
}