#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Http.Script.txt" as Http

#Include "Libs/Challenge/Notification.Script.txt" as Notification

#Struct SRatingQuality {
	Real Average;
	Real AverageWithoutYou;
	Real User;
	Integer Count;
}

#Struct SRatingDifficulty {
	Real Average;
	Real AverageWithoutYou;
	Real User;
	Integer Count;
}

#Struct SRating {
	SRatingDifficulty Difficulty;
	SRatingQuality Quality;
}

#Struct SVehicle {
	SRating Rating;
	Text[] Star;
}

#Struct SPublicMap {
	Boolean Public;
	Boolean IsNadeoMap;
	Text Name;
	Text Uid;
	Text Author;
	Text OriginalName;
	Text OriginalUid;
	Text OriginalAuthor;
	SVehicle[Text] Vehicles;
}

#Struct SUserStatus {
	Boolean HasSandbox;
	Boolean HasCampaign;
	Boolean HasMaker;
	Integer HasEnvimixLicense;
	Boolean Authorized;
	Notification::SNotification[] Notifications;
}

#Struct SMessage {
	Text Login;
	Text Nickname;
	Text Content;
	Text Date;
}

#Struct SUser {
	Text Login;
	Text Nickname;
}

#Struct SPlaysession {
	SPublicMap Map;
	SUser[] Users;
	SMessage[] Chat;
}

#Struct SGlobalStatus {
	Text Date;
	Text Service;
	Boolean Running;
	Boolean Emergency;
	Boolean InsiderAccess;
	Boolean Maintenance;
	Boolean IsUpdating;
	Boolean NadeoMapsBlocked;
}

#Struct STitleStatus {
	SPlaysession[] Playsessions;
	Text EnvimixReleaseDate;
	Text UnitedEnvimixReleaseDate;
}

#Struct SStatus {
	SGlobalStatus Global;
	STitleStatus[Text] Titles;
	SUserStatus[] User;
}

#Struct SStatusParams {
	Text TitleId;
	Text UserToken;
	
	Text Login; // Unauthorized but still indentifiable status check
	Text Token;
}

#Struct SMessageParams {
	Text UserToken;
	Text PlaysessionSecret;
	Text Message;
}

#Const C_Host "https://challenge.bigbang1112.eu"

Void ProcessNotifications(CUser _User, SStatus _Status) {
	if(_Status.User.count > 0)
	foreach(Notification,_Status.User[0].Notifications) {
		Notification::Notify(_User,Notification);
	}
	Notification::Update();
}

SStatusParams GetStatusParams(CUser _User, Text _IngameToken) {
	declare SStatusParams Params;
	Params.TitleId = LoadedTitle.TitleId;
	if(_User != Null) {
		if(_IngameToken == "") {
			declare Text CHALLENGE_TOKEN for _User;
			Params.UserToken = CHALLENGE_TOKEN;
		}
		else {
			Params.Login = _User.Login;
			Params.Token = _IngameToken;
		}
	}
	return Params;
}

SStatus CheckStatus(CUser _User, Text _IngameToken) {
	declare Request = Http::SyncPOST(C_Host^"/status.php", GetStatusParams(_User, _IngameToken).tojson());
	declare SStatus Status;
	while(TextLib::Find("Web application doesn't work properly", Request.Result, False, False)) {
		log("Webhost problems:\n" ^ Request.Result);
		Http.Destroy(Request);
		sleep(1000);
		Request = Http::SyncPOST(C_Host^"/status.php", GetStatusParams(_User, _IngameToken).tojson());
	}
	declare JsonSuccess = Status.fromjson(Request.Result);
	while(!Http::IsSuccessfulStatusCode(Request.StatusCode) || Status.Global.Service == "") {
		declare Json = Status.fromjson(Request.Result);
		log("Status code: " ^ Request.StatusCode);
		if(Status.Global.Service == "") log("Service URL not found.");
		Http.Destroy(Request);
		sleep(1000);
		Request = Http::SyncPOST(C_Host^"/status.php", GetStatusParams(_User, _IngameToken).tojson());
	}
	Http.Destroy(Request);
	ProcessNotifications(_User, Status);
	
	declare SStatus[] States for _User;
	States.add(Status);
	return Status;
}

SStatus CheckStatus(CUser _User) {
	return CheckStatus(_User, "");
}

SStatus LastStatus(CUser _User) {
	declare SStatus[] States for _User;
	if(States.count > 0)
		if(States[States.count-1].Global.Service != "" && States[States.count-1].User.count > 0)
			return States[States.count-1];
	return CheckStatus(_User);
}

/*
// CHttpRequest AsyncGet(Text _Name)
// Gets asynchonous request, completed or pending.

// Text _Name - Identification name

// Returns request that can or cannot be in the progress
*/
CHttpRequest AsyncGet(Text _Name) {
	return Http::Get(_Name);
}

/*
// Void AsyncDestroy(Text _Name)
// Destroys an aynchonous request.

// Text _Name - Identification name
*/
Void AsyncDestroy(Text _Name) {
	Http::Destroy(_Name);
}

/*
// Boolean AsyncIsCompleted(Text _Name, Boolean _NoLog)
// Checks if the asynchronous request was completed.

// Text _Name - Identification name
// Boolean _NoLog - If to not inform to the console

// Returns True if the request is completed but not destroyed.
*/
Boolean AsyncIsCompleted(Text _Name, Boolean _NoLog) {
	return Http::IsCompleted(_Name, _NoLog);
}

/*
// Boolean AsyncIsCompleted(Text _Name)
// Checks if the asynchronous request was completed.

// Text _Name - Identification name

// Returns True if the request is completed but not destroyed.
*/
Boolean AsyncIsCompleted(Text _Name) {
	return AsyncIsCompleted(_Name, False);
}

/*
// Boolean AsyncIsSuccessful(Text _Name)
// Checks if the asynchonous request was completed successfully.

// Text _Name - Identification name

// Returns True if the request is completed with a positive response (between 200 inclusively and 300 exclusively HTTP code).
*/
Boolean AsyncIsSuccessful(Text _Name) {
	return Http::IsSuccessful(_Name);
}

/*
// Integer AsyncGetStatusCode(Text _Name, Boolean _NoLog)
// Gets status code of the asynchronous request.

// Text _Name - Identification name
// Boolean _NoLog - If to not inform to the console

// Returns status code number of a completed request, or 0 if the request is not completed or does not exist.
*/
Integer AsyncGetStatusCode(Text _Name, Boolean _NoLog) {
	return Http::GetStatusCode(_Name, _NoLog);
}

/*
// Integer AsyncGetStatusCode(Text _Name)
// Gets status code of the asynchronous request.

// Text _Name - Identification name

// Returns status code number of a completed request, or 0 if the request is not completed or does not exist.
*/
Integer AsyncGetStatusCode(Text _Name) {
	return AsyncGetStatusCode(_Name, False);
}

/*
// Text AsyncGetResult(Text _Name)
// Gets result of the asynchronous request.

// Text _Name - Identification name

// Returns result of a completed request, or empty string if the request is not completed or does not exist.
*/
Text AsyncGetResult(Text _Name) {
	return Http::GetResult(_Name);
}

Boolean AsyncCheckStatus(Text _Name, CUser _User, Text _IngameToken) {
	return Http::AsyncPOST(_Name, C_Host^"/status.php", GetStatusParams(_User, _IngameToken).tojson(), "", True);
}

Boolean AsyncCheckStatus(Text _Name, CUser _User) {
	return AsyncCheckStatus(_Name, _User, "");
}

SStatus GetAsyncCheckStatusResult(Text _Name, CUser _User) {
	declare SStatus Status;
	
	if(AsyncIsCompleted(_Name, True)) {
		if(AsyncIsSuccessful(_Name)) {
			declare JsonSuccess = Status.fromjson(AsyncGetResult(_Name));
			ProcessNotifications(_User, Status);
			declare SStatus[] States for _User;
			States.add(Status);
		}
		AsyncDestroy(_Name);
	}
	
	return Status;
}