#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/File.Script.txt" as File

#Struct SRealVehicle {
	Text Name;
	Ident Id;
}

#Struct SVehicle {
	Text Name;
	Text Image;
	Text File;
}

#Struct SEndRaceInfo {
	Integer Time;
}

declare SVehicle[] Vehicles;
declare SRealVehicle[] RealVehicles;
declare SRealVehicle RealMapVehicle;
declare CTmPlayer[] RespawnList;

Void Init(CTmMode _Mode) {	
	declare JsonSuccess = Vehicles.fromjson(File::Read("Media/Vehicle.json"));

	_Mode.ItemList_Begin();
	foreach(Vehicle, Vehicles) {
		declare SRealVehicle RealVehicle;
		RealVehicle.Name = Vehicle.Name;
		RealVehicle.Id = _Mode.ItemList_Add(Vehicle.File);
		RealVehicles.add(RealVehicle);
	}
	_Mode.ItemList_End();
}

Void Start(CTmMode _Mode, Boolean _IsValidationMode) {
	wait(_Mode.MapLoaded);
	declare MapModelName = TextLib::Replace(_Mode.MapPlayerModelName, "\\", "/");
	
	foreach(Player, _Mode.AllPlayers) {
		declare UI <=> _Mode.UIManager.GetUI(Player);
		
		declare netwrite Boolean Server_IsValidationMode for UI;
		Server_IsValidationMode = _IsValidationMode;

		declare netwrite SVehicle[] Server_Vehicles for UI;
		Server_Vehicles = Vehicles;
		
		declare netwrite Integer Server_VehicleLock for UI;
		Server_VehicleLock = -1;
		
		declare netwrite Integer Server_CurrentVehicle for UI;
		Server_CurrentVehicle = -1;
		
		declare netwrite Boolean Server_Playing for UI;
		Server_Playing = False;
		
		declare netwrite Boolean Server_EndRace for UI;
		Server_EndRace = False;
		
		declare netwrite Boolean Server_Outro for UI;
		Server_Outro = False;
		
		declare netwrite Boolean Server_NoGravity for UI;
		Server_NoGravity = False;
		
		UI.UISequence = CUIConfig::EUISequence::Playing;
	}
					
	declare SVehicle MapVehicle;
	for(I, 0, Vehicles.count-1) {
		declare Vehicle = Vehicles[I];
		declare RealVehicle = RealVehicles[I];
		if(Vehicle.Name == MapModelName || Vehicle.File == MapModelName) {
			MapVehicle = Vehicle;
			RealMapVehicle = RealVehicle;
		}
	}
	
	foreach(Player, _Mode.AllPlayers) {
		declare UI <=> _Mode.UIManager.GetUI(Player);
		declare netwrite SVehicle Server_MapVehicle for UI;
		Server_MapVehicle = MapVehicle;
		
		Player.RaceStartTime = -1;
		Player.IsSpawned = True;
		//Player.GravityCoef = 0.;
		Player.Score.Clear();
	}
	
	_Mode.CutOffTimeLimit = -1;
}

Void Event(CTmMode _Mode, CTmModeEvent _Event) {
	declare UI <=> _Mode.UIManager.GetUI(_Event.Player);
		
	declare netwrite Integer Server_VehicleLock for UI;
	declare netwrite Integer Server_CurrentVehicle for UI;
	declare netwrite Boolean Server_Playing for UI;
	declare netwrite Boolean Server_EndRace for UI;
	declare netwrite SEndRaceInfo Server_EndRaceInfo for UI;
	declare netwrite Boolean Server_Outro for UI;
		
	declare netread Integer Client_VehicleIndex for UI;
		
	switch(_Event.Type) {
		case CTmModeEvent::EType::StartLine: {									
			Server_VehicleLock = Client_VehicleIndex;
		}
		case CTmModeEvent::EType::WayPoint: {
			if(_Event.IsEndRace) { // Finish
				if(Server_CurrentVehicle < 0) return;
				log(RealVehicles[Server_CurrentVehicle]);
				Server_EndRace = True;
				Server_EndRaceInfo.Time = _Event.RaceTime;
			}
			else if(_Event.IsEndLap) { // Lap
				
			}
			else { // Checkpoint
			
			}
		}
		case CTmModeEvent::EType::GiveUp: {
			if(Server_EndRace)
				_Mode.Discard(_Event);
			else {
				Server_EndRaceInfo.Time = -1;
			}
		}
		case CTmModeEvent::EType::OnPlayerAdded: {
			
		}
	}
}

Void EventUI(CTmMode _Mode, CUIConfigEvent _Event) {
	switch(_Event.Type) {
		case CUIConfigEvent::EType::OnLayerCustomEvent: {
			foreach(Player,_Mode.Players) {
				if(_Event.UI == _Mode.UIManager.GetUI(Player)) {
					declare netwrite Boolean Server_Playing for _Event.UI;
					declare netwrite Integer Server_VehicleLock for _Event.UI;
					declare netwrite Boolean Server_EndRace for _Event.UI;
					declare netwrite Boolean Server_Outro for _Event.UI;
					
					declare netread Integer Client_VehicleIndex for _Event.UI;
					
					switch(_Event.CustomEventType) {
						case "Start": {
							declare Force = (_Event.CustomEventData[0] == "True");
							
							if(Force || Server_VehicleLock == -1) {
								if(Vehicles.existskey(Client_VehicleIndex)) Player.ForceModelId = RealVehicles[Client_VehicleIndex].Id;
								else Player.ForceModelId = RealMapVehicle.Id;
								Player.IsSpawned = True;
								Player.RaceStartTime = -1;
								
								Server_Playing = True;
								Server_VehicleLock = -1;
							}
						}
						case "VehicleIndexChanged": {
							if(Server_VehicleLock == -1)
								Server_Playing = False;
						}
						case "Continue": {
							if(Server_Outro) {
								Server_Outro = False;
								
								Server_VehicleLock = -1;
								Player.ForceModelId = RealVehicles[Client_VehicleIndex].Id;
								_Mode.SpawnPlayer(Player, 0, -1);
							}
							else {
								Server_EndRace = False;
								Server_Outro = True;
							}
							
							/*_Mode.RaceGhost_RemoveAll();
							declare Ghost = _Mode.ScoreMgr.Playground_GetPlayerGhost(Player);
							if(Ghost != Null) {
								declare GhostId = _Mode.RaceGhost_AddWithOffset(Ghost, -2500);
								Event.UI.SpectatorForcedTarget = GhostId;
								Event.UI.SpectatorForceCameraType = 1;
							}
							else log("ghost is null");*/
						}
					}
				}
			}
		}
	}
}

Void Loop(CTmMode _Mode) {	
	foreach(Player,RespawnList) {
		Player.RaceStartTime = -1;
	}
	RespawnList.clear();
	
	foreach(Player,_Mode.Players) {
		declare UI <=> _Mode.UIManager.GetUI(Player);
		
		declare netwrite Boolean Server_Playing for UI;
		declare netwrite Integer Server_VehicleLock for UI;
		declare netwrite Integer Server_CurrentVehicle for UI;
		
		declare netread Integer Client_VehicleIndex for UI;
		
		if(Server_Playing) {
			
		}
		else {
			declare Ident OldModelId for Player;
				
			if(Server_VehicleLock == -1) {
				if(Vehicles.existskey(Client_VehicleIndex)) Player.ForceModelId = RealVehicles[Client_VehicleIndex].Id;
				else Player.ForceModelId = RealMapVehicle.Id;
				Server_CurrentVehicle = Client_VehicleIndex;
			}
			else {
				Player.ForceModelId = RealVehicles[Server_VehicleLock].Id;
				Server_CurrentVehicle = Server_VehicleLock;
			}
				
			if(Player.ForceModelId != OldModelId) {
				_Mode.SpawnPlayer(Player, 0, Now+10000);
				RespawnList.add(Player);
					
				OldModelId = Player.ForceModelId;
			}
		}
	}
	
	foreach(Player, _Mode.PlayersWaiting) {
		declare UI <=> _Mode.UIManager.GetUI(Player);
	
		declare netwrite Boolean Server_Playing for UI;
		declare netwrite Integer Server_VehicleLock for UI;
		declare netwrite Boolean Server_EndRace for UI;
		declare netwrite Boolean Server_Outro for UI;
		declare netwrite Integer Server_CurrentVehicle for UI;
		declare netwrite Boolean Server_NoGravity for UI;
		
		declare netread Integer Client_VehicleIndex for UI;
		
		Server_VehicleLock = -1;
		
		if(Server_Playing && !Server_EndRace && !Server_Outro) {			
			Player.ForceModelId = RealVehicles[Client_VehicleIndex].Id;
			if(Server_NoGravity) Player.GravityCoef = 0.;
			else Player.GravityCoef = 1.;
			Server_CurrentVehicle = Client_VehicleIndex;
			_Mode.SpawnPlayer(Player, 0, -1);
		}
		
		if(Server_Outro) {
			
		}
	}
}

Void End() {

}