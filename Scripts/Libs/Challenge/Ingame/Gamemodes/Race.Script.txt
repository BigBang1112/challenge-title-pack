#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Task.Script.txt" as Task

#Include "Libs/Challenge/Vehicle.Script.txt" as Vehicle

#Struct SFinish_Server {
	Integer Timestamp;
	CGhost Ghost;
	CGhost NicerGhost;
}

#Struct SPerformance_Server {
	Vehicle::SRealVehicle Vehicle;
	Integer BestFinishIndex;
	SFinish_Server[] Finishes;
}

#Struct SFinish {
	Integer Timestamp;
	Integer Time;
	Integer[] Checkpoints;
}

#Struct SPerformance {
	Text Vehicle;
	Integer BestFinishIndex;
	SFinish[] Finishes;
}

#Struct SEndRaceInfo {
	Text Vehicle;
	SFinish Finish;
}

declare Vehicle::SVehicle[] Vehicles;
declare Vehicle::SRealVehicle[] RealVehicles;
declare Vehicle::SRealVehicle RealMapVehicle;
declare CTmPlayer[] RespawnList;

Void SetCarModel(CTmPlayer _Player, CUIConfig _UI) {
	declare netwrite Integer Server_CurrentVehicle for _UI;
	declare persistent Text[Text] P_Skin for _Player.User;

	declare VehicleName = Vehicles[Server_CurrentVehicle].Name;
	
	if(P_Skin.existskey(VehicleName)) {
		if(Vehicles.existskey(Server_CurrentVehicle)) {
			if(RealVehicles[Server_CurrentVehicle].Id.existskey(P_Skin[VehicleName])) // If exact skin doesnt exist
				_Player.ForceModelId = RealVehicles[Server_CurrentVehicle].Id[P_Skin[VehicleName]];
			else _Player.ForceModelId = RealVehicles[Server_CurrentVehicle].Id[""];
		} else _Player.ForceModelId = RealVehicles[Server_CurrentVehicle].Id[""];
	} else _Player.ForceModelId = RealVehicles[Server_CurrentVehicle].Id[""];
}

Void SpawnEnvimixPlayer(CTmMode _Mode, CTmPlayer _Player) {
	declare UI <=> _Mode.UIManager.GetUI(_Player);
	
	declare netwrite Boolean Server_Playing for UI;
	declare netwrite Integer Server_VehicleLock for UI;
	declare netwrite Integer Server_CurrentVehicle for UI;
	declare netwrite Boolean Server_NoGravity for UI;
		
	declare netread Integer Client_VehicleIndex for UI;
	
	Server_VehicleLock = -1;
	if(!Vehicles.existskey(Client_VehicleIndex)) return;
	Server_CurrentVehicle = Client_VehicleIndex;
	
	SetCarModel(_Player, UI);
	if(Server_NoGravity) _Player.GravityCoef = 0.;
	else _Player.GravityCoef = 1.;
	_Mode.SpawnPlayer(_Player, 0, -1);
	UI.UISequence = CUIConfig::EUISequence::Playing;
	
	_Mode.RaceGhost_RemoveAll();
	
	declare VehicleName = RealVehicles[Server_CurrentVehicle].Name;
	
	declare SPerformance_Server[Text] Performances_Server for _Player.Score;
	declare Performance = Performances_Server[VehicleName];
	if(Performance.BestFinishIndex != -1)
		declare Ghost = _Mode.RaceGhost_Add(Performance.Finishes[Performance.BestFinishIndex].Ghost, True);
		
	declare netread Text[] SelectedGhostFiles for UI;
	declare netread Text[] SelectedGhostUrls for UI;
	
	foreach(File, SelectedGhostFiles) {
		declare GhostTask = DataFileMgr.Replay_Load(File);
		wait(!GhostTask.IsProcessing);
		if(GhostTask.HasSucceeded) {
			if(GhostTask.Ghosts.count > 0)
			declare Ghost = _Mode.RaceGhost_Add(GhostTask.Ghosts[0], False);
		}
		DataFileMgr.TaskResult_Release(GhostTask.Id);
	}
}

Void InitPerformances(CScore _Score) {
	declare SPerformance_Server[Text] Performances_Server for _Score;
	
	foreach(Vehicle, RealVehicles) {
		declare SPerformance_Server Performance_Server;
		Performance_Server.Vehicle = Vehicle;
		Performance_Server.BestFinishIndex = -1;
		
		if(Map.MapInfo.MapUid != "") {
			declare Record = ScoreMgr.Map_GetRecord(NullId, Map.MapInfo.MapUid, Vehicle.Name);
			if(Record != -1) {
				declare Task_Ghost = ScoreMgr.Map_GetRecordGhost(NullId, Map.MapInfo.MapUid, Vehicle.Name);
				wait(!Task_Ghost.IsProcessing);
				
				if(Task_Ghost.HasSucceeded) {
					declare SFinish_Server Finish;
					Finish.Timestamp = -1;
					Finish.Ghost = Task_Ghost.Ghost;
					Performance_Server.Finishes.add(Finish);
					
					Performance_Server.BestFinishIndex = 0;
				}
			}
		}
		
		Performances_Server[Vehicle.Name] = Performance_Server;
		
		declare netwrite SPerformance[Text] Performances for _Score;
		declare SPerformance Performance;
		Performance.Vehicle = Performance_Server.Vehicle.Name;
		Performance.BestFinishIndex = Performance_Server.BestFinishIndex;
		foreach(Finish_Ser,Performance_Server.Finishes) {
			declare SFinish Finish;
			Finish.Timestamp = Finish_Ser.Timestamp;
			Finish.Time = Finish_Ser.Ghost.Result.Time;
			foreach(Checkpoint, Finish_Ser.Ghost.Result.Checkpoints)
				Finish.Checkpoints.add(Checkpoint);
			Performance.Finishes.add(Finish);
		}
		Performances[Vehicle.Name] = Performance;
	}
}

Void Init(CTmMode _Mode) {
	Vehicles = Vehicle::FromFile("Media/Vehicle.json");
	RealVehicles = Vehicle::Load(Vehicles, _Mode);
}

Void Start(CTmMode _Mode, Boolean _IsValidationMode) {
	wait(_Mode.MapLoaded);
	declare MapModelName = TextLib::Replace(_Mode.MapPlayerModelName, "\\", "/");
	
	foreach(Player, _Mode.AllPlayers) {
		declare UI <=> _Mode.UIManager.GetUI(Player);
		
		declare netwrite Boolean Server_IsValidationMode for UI;
		Server_IsValidationMode = _IsValidationMode;

		declare netwrite Vehicle::SVehicle[] Server_Vehicles for UI;
		Server_Vehicles = Vehicles;
		
		declare netwrite Integer Server_VehicleLock for UI;
		Server_VehicleLock = -1;
		
		declare netwrite Integer Server_CurrentVehicle for UI;
		Server_CurrentVehicle = -1;
		
		declare netwrite Boolean Server_Playing for UI;
		Server_Playing = False;
		
		declare netwrite Boolean Server_EndRace for UI;
		Server_EndRace = False;
		
		declare netwrite Boolean Server_Outro for UI;
		Server_Outro = False;
		
		declare netwrite Boolean Server_NoGravity for UI;
		Server_NoGravity = False;
		
		UI.UISequence = CUIConfig::EUISequence::None;
		
		InitPerformances(Player.Score);
	}
					
	declare Vehicle::SVehicle MapVehicle;
	for(I, 0, Vehicles.count-1) {
		declare Vehicle = Vehicles[I];
		declare RealVehicle = RealVehicles[I];
		if(Vehicle.Name == MapModelName || Vehicle.File == MapModelName) {
			MapVehicle = Vehicle;
			RealMapVehicle = RealVehicle;
		}
	}
	
	foreach(Player, _Mode.AllPlayers) {
		declare UI <=> _Mode.UIManager.GetUI(Player);
		
		declare netwrite Vehicle::SVehicle Server_MapVehicle for UI;
		Server_MapVehicle = MapVehicle;
	}
	
	_Mode.CutOffTimeLimit = -1;
}

Void Event(CTmMode _Mode, CTmModeEvent _Event) {
	declare UI <=> _Mode.UIManager.GetUI(_Event.Player);
		
	declare netwrite Integer Server_VehicleLock for UI;
	declare netwrite Integer Server_CurrentVehicle for UI;
	declare netwrite Boolean Server_Playing for UI;
	declare netwrite Boolean Server_EndRace for UI;
	declare netwrite Boolean Server_Outro for UI;
	declare netwrite Boolean Server_IsValidationMode for UI;
		
	declare netread Integer Client_VehicleIndex for UI;
		
	switch(_Event.Type) {
		case CTmModeEvent::EType::StartLine: {	
			if(RealVehicles.existskey(Client_VehicleIndex))
				Server_VehicleLock = Client_VehicleIndex;
		}
		case CTmModeEvent::EType::WayPoint: {
			if(_Event.IsEndRace) { // Finish
				if(Server_CurrentVehicle < 0) return;
				
				declare VehicleName = RealVehicles[Server_CurrentVehicle].Name;
				
				// Serverside-only performance saving
				
				declare SPerformance_Server[Text] Performances_Server for _Event.Player.Score;
				
				declare SFinish_Server Finish_Server;
				Finish_Server.Timestamp = Now;
				Finish_Server.Ghost = ScoreMgr.Playground_GetPlayerGhost(_Event.Player);
				
				declare SPerformance_Server Performance_Server;
				Performance_Server.BestFinishIndex = -1;
				if(Performances_Server.existskey(VehicleName)) Performance_Server = Performances_Server[VehicleName];
				Performance_Server.Finishes.add(Finish_Server);
				
				Performance_Server.Vehicle = RealVehicles[Server_CurrentVehicle];
				if(Performance_Server.BestFinishIndex == -1 || Performance_Server.Finishes[Performance_Server.BestFinishIndex].Ghost.Result.Time > Finish_Server.Ghost.Result.Time)
					Performance_Server.BestFinishIndex = Performance_Server.Finishes.count-1;
				
				Performances_Server[VehicleName] = Performance_Server;
				
				// Shared performance saving
				
				declare SFinish Finish;
				Finish.Timestamp = Finish_Server.Timestamp;
				Finish.Time = Finish_Server.Ghost.Result.Time;
				foreach(Checkpoint, Finish_Server.Ghost.Result.Checkpoints)
					Finish.Checkpoints.add(Checkpoint);
				
				declare netwrite SPerformance[Text] Performances for _Event.Player.Score;
				declare SPerformance Performance;
				Performance.Vehicle = VehicleName;
				Performance.BestFinishIndex = Performance_Server.BestFinishIndex;
				foreach(Finish_Ser,Performance_Server.Finishes) {
					declare SFinish Finish;
					Finish.Timestamp = Finish_Ser.Timestamp;
					Finish.Time = Finish_Ser.Ghost.Result.Time;
					foreach(Checkpoint, Finish_Ser.Ghost.Result.Checkpoints)
						Finish.Checkpoints.add(Checkpoint);
					Performance.Finishes.add(Finish);
				}
				Performances[VehicleName] = Performance;
				
				if(Server_IsValidationMode) {
					declare Boolean Validated for This;
					declare Integer Validated_Time for This;
					declare Text Validated_Car for This;
					declare Text Validated_MapCar for This;
					
					Validated = True;
					Validated_Time = Finish.Time;
					Validated_Car = VehicleName;
					Validated_MapCar = RealMapVehicle.Name;
				}
				else {
					declare Task = ScoreMgr.Map_SetNewRecord(NullId, Map.MapInfo.MapUid, VehicleName, Finish_Server.Ghost);
					
					declare netwrite SEndRaceInfo Server_EndRaceInfo for UI;
					Server_EndRaceInfo.Vehicle = VehicleName;
					Server_EndRaceInfo.Finish = Finish;
				}
				
				Server_EndRace = True;
			}
			else if(_Event.IsEndLap) { // Lap
				
			}
			else { // Checkpoint
			
			}
		}
		case CTmModeEvent::EType::GiveUp: {
			if(Server_EndRace)
				_Mode.Discard(_Event);
			else {
				
			}
		}
		case CTmModeEvent::EType::OnPlayerAdded: {
			
		}
	}
}

Void EventUI(CTmMode _Mode, CUIConfigEvent _Event) {
	switch(_Event.Type) {
		case CUIConfigEvent::EType::OnLayerCustomEvent: {
			foreach(Player,_Mode.Players) {
				if(_Event.UI == _Mode.UIManager.GetUI(Player)) {
					declare netwrite Boolean Server_Playing for _Event.UI;
					declare netwrite Integer Server_VehicleLock for _Event.UI;
					declare netwrite Integer Server_CurrentVehicle for _Event.UI;
					declare netwrite Boolean Server_EndRace for _Event.UI;
					declare netwrite Boolean Server_Outro for _Event.UI;
					
					declare netread Integer Client_VehicleIndex for _Event.UI;
					
					declare persistent Text[Text] P_Skin for Player.User;
					
					switch(_Event.CustomEventType) {
						case "Start": {
							declare Force = (_Event.CustomEventData[0] == "True");
							
							if(Force || Server_VehicleLock == -1) {
								if(!Vehicles.existskey(Client_VehicleIndex)) continue;
								Server_CurrentVehicle = Client_VehicleIndex;
								
								SetCarModel(Player, _Event.UI);
								Player.IsSpawned = True;
								Player.RaceStartTime = -1;
								
								Server_Playing = True;
								Server_VehicleLock = -1;
							}
						}
						case "VehicleIndexChanged": {
							if(Server_VehicleLock == -1)
								Server_Playing = False;
						}
						case "Continue": {
							if(Server_Outro) {
								Server_Outro = False;
								
								SpawnEnvimixPlayer(_Mode, Player);
							}
							else {
								Server_EndRace = False;
								Server_Outro = True;
								
								_Event.UI.UISequence = CUIConfig::EUISequence::EndRound;
							}
						}
						case "Replay": {
							declare FilePath = _Event.CustomEventData[0];
							
							declare SPerformance_Server[Text] Performances_Server for Player.Score;
							declare VehicleName = RealVehicles[Server_CurrentVehicle].Name;
							
							if(Performances_Server[VehicleName].Finishes[Performances_Server[VehicleName].Finishes.count-1].NicerGhost == Null)
								Task::Async_DataFileMgr("SAVEREPLAY", DataFileMgr.Replay_Save(FilePath, Map, Performances_Server[VehicleName].Finishes[Performances_Server[VehicleName].Finishes.count-1].Ghost));
							else
								Task::Async_DataFileMgr("SAVEREPLAY", DataFileMgr.Replay_Save(FilePath, Map, Performances_Server[VehicleName].Finishes[Performances_Server[VehicleName].Finishes.count-1].NicerGhost));
							//Needs some kind of response from the "server" ("server" cuz DataFileMgr is solo mode only anyway)
						}
					}
				}
			}
		}
	}
}

Void Loop(CTmMode _Mode) {	
	foreach(Player,RespawnList) {
		_Mode.SpawnPlayer(Player, 0, -1);
		Player.RaceStartTime = -1;
	}
	RespawnList.clear();
	
	foreach(Player,_Mode.Players) {
		declare UI <=> _Mode.UIManager.GetUI(Player);
		
		declare netwrite Boolean Server_Playing for UI;
		declare netwrite Integer Server_VehicleLock for UI;
		declare netwrite Integer Server_CurrentVehicle for UI;
		declare netwrite Boolean Server_Outro for UI;
		
		declare netread Integer Client_VehicleIndex for UI;
		
		declare persistent Text[Text] P_Skin for Player.User;
		
		if(Server_Playing) {
			
		}
		else {
			declare Ident OldModelId for Player;
			
			if(Vehicles.existskey(Client_VehicleIndex)) {
				if(Server_VehicleLock == -1) {
					if(!Vehicles.existskey(Client_VehicleIndex)) continue;
					Server_CurrentVehicle = Client_VehicleIndex;
				}
				else
					Server_CurrentVehicle = Server_VehicleLock;

				SetCarModel(Player, UI);
			}
				
			if(Player.ForceModelId != OldModelId) {
				_Mode.SpawnPlayer(Player, 0, -1);
				RespawnList.add(Player);
				
				OldModelId = Player.ForceModelId;
			}
		}
		
		declare Boolean OldOutro for Player;
		if(Server_Outro != OldOutro) {
			declare Ident OutroGhost for Player;
			if(Server_Outro) {
				declare SPerformance_Server[Text] Performances_Server for Player.Score;
				declare Finishes = Performances_Server[RealVehicles[Server_CurrentVehicle].Name].Finishes;
				_Mode.RaceGhost_RemoveAll();
				OutroGhost = _Mode.RaceGhost_AddWithOffset(Finishes[Finishes.count-1].Ghost, -2500);
				UI.SpectatorForcedTarget = OutroGhost;
				UI.SpectatorForceCameraType = 1;
				
				_Mode.UnspawnPlayer(Player);
			}
			else {
				UI.SpectatorForcedTarget = NullId;
				UI.SpectatorForceCameraType = 0;
				if(OutroGhost != NullId)
					_Mode.RaceGhost_RemoveAll();
			}
			OldOutro = Server_Outro;
		}
		
		declare SPerformance_Server[Text] Performances_Server for Player.Score;
		declare VehicleName = RealVehicles[Server_CurrentVehicle].Name;
		
		if(Performances_Server.existskey(VehicleName))
		if(Performances_Server[VehicleName].Finishes.count > 0) {
			declare Finishes = Performances_Server[VehicleName].Finishes;
			if(Finishes[Finishes.count-1].NicerGhost == Null && Finishes[Finishes.count-1].Timestamp != -1 && _Mode.Now - Finishes[Finishes.count-1].Timestamp >= 1000) {
				if(Player.IsSpawned) {
					declare Ghost = ScoreMgr.Playground_GetPlayerGhost(Player);
					if(Ghost != Null && Ghost.Result != Null && Ghost.Result.Time != -1)
						Performances_Server[VehicleName].Finishes[Finishes.count-1].NicerGhost = Ghost;
				}
			}
		}
		
		/*declare Integer FixUnchangedTimestamp for Player;
		log("Ya:"^FixUnchangedTimestamp);
		if(FixUnchangedTimestamp != -1 && FixUnchangedTimestamp + 500 < _Mode.Now) {
			_Mode.SpawnPlayer(Player, 0, _Mode.Now+10000);
			Player.RaceStartTime = -1;
			log(_Mode.Now);
			FixUnchangedTimestamp = -1;
		}*/
	}
	
	foreach(Player, _Mode.PlayersWaiting) {
		declare UI <=> _Mode.UIManager.GetUI(Player);
	
		declare netwrite Boolean Server_Playing for UI;
		declare netwrite Integer Server_VehicleLock for UI;
		declare netwrite Boolean Server_EndRace for UI;
		declare netwrite Boolean Server_Outro for UI;
		declare netwrite Boolean Server_NoGravity for UI;
		
		declare netread Integer Client_VehicleIndex for UI;
		
		Server_VehicleLock = -1;
		
		if(Server_Playing && !Server_EndRace && !Server_Outro) {			
			SpawnEnvimixPlayer(_Mode, Player);
		}
		
		if(Server_Outro) {
			
		}
	}
}

Void End() {

}