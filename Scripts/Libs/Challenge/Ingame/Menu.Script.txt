#Include "TextLib" as TextLib
#Include "MathLib" as MathLib

#Include "Libs/BigBang1112/Http.Script.txt" as Http
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Task.Script.txt" as Task

#Include "Libs/Challenge/ModifierBase.Script.txt" as ModifierBase
#Include "Libs/Challenge/Vehicle.Script.txt" as Vehicle

#Include "Libs/Challenge/Service/Status.Script.txt" as Service_Status

#Struct SGhostInfo {
	Text Nickname;
	Text Login;
	Integer Time;
	Integer[] Checkpoints;
	Text File;
	Text Url;
	Boolean IsMedal;
	Boolean IsAuthorMedal;
	Boolean IsGoldMedal;
	Boolean IsSilverMedal;
	Boolean IsBronzeMedal;
	Text Vehicle;
}

#Struct SRecord {
	Text Login;
	Text Nickname;
	Integer Time;
	Real Distance;
	Integer Stunts;
	Text Driven;
}

#Const C_Manialink "Media/Manialinks/Base/Ingame/Menu"
#Const C_Manialink_OpenMenu "Media/Manialinks/Base/Ingame/OpenMenu"

declare Text[] VehicleNames;

Void Init() {
	Layers::Create("Menu", Manialink::FromFile(C_Manialink, True, ["Audio", "SlideText", "Navigation"], Settings::Get().Theme));

	declare netread Vehicle::SVehicle[] Server_Vehicles for UI;
	foreach(Vehicle,Server_Vehicles)
		VehicleNames.add(Vehicle.Name);
	
	declare Success = Http::AsyncGET("VALIDATION", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/validation.php?uid={{{Map.MapInfo.MapUid}}}&car={{{TextLib::Join(",",VehicleNames)}}}""");
	//declare Success2 = Http::AsyncGET("RECORDS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/records.php?uid={{{Map.MapInfo.MapUid}}}&car={{{TextLib::Join(",",VehicleNames)}}}&zone=World""", True);
}

Void Start() {
	Layers::Show("Menu", True);
	Layers::SendEvent("Menu", "Navigation", "True");

	declare metadata ModifierBase::SChMap OriginalMap for Map;
	Layers::SendEvent("Menu", "MapName", OriginalMap.Name);
	Layers::SendEvent("Menu", "Challenge", TextLib::ToUpperCase(TextLib::Replace(Map.MapStyle, "+", " + ")));

	declare metadata Integer[Text] Validations for Map;
	declare Integer[Text] OldValidations for Map;
	OldValidations = Validations;
}

Void CheckMode() {
	declare netread Boolean Server_IsValidationMode for UI;
	
	if(Server_IsValidationMode) {
		Layers::Create("OpenMenu", Manialink::FromFile(C_Manialink_OpenMenu, True, ["Audio"], Settings::Get().Theme));
	}
	else {
		Layers::SetType("Menu", CUILayer::EUILayerType::InGameMenu);
		Layers::SetType("Vehicle", CUILayer::EUILayerType::InGameMenu);
		Layers::SendEvent("Menu", "Open");
	}
}

SGhostInfo[] SortGhosts(SGhostInfo[] _Ghosts) {
	declare SGhostInfo[] Final;
	declare Integer[] Sort;
	foreach(Ghost,_Ghosts) {
		if(Ghost.Time == -1)
			Final.add(Ghost);
		else
			Sort.add(Ghost.Time);
	}
	Sort = Sort.sort();
	for(I,0,Sort.count-1) {
		foreach(Ghost,_Ghosts) {
			if(Ghost.Time == Sort[Sort.count-1-I]) Final.addfirst(Ghost);
		}
	}
	return Final;
}

Void UpdateMedals() {
	declare netread Vehicle::SVehicle[] Server_Vehicles for UI;
	declare netread Integer Server_CurrentVehicle for UI;
	if(Server_Vehicles.existskey(Server_CurrentVehicle)) {
		declare VehicleName = Server_Vehicles[Server_CurrentVehicle].Name;
		declare metadata Integer[Text] Validations for Map;

		declare SGhostInfo[] LoadedGhosts for Layers::Page("Menu");

		for(I,0,LoadedGhosts.count-1)
		for(J,0,LoadedGhosts.count-1) {
			if(LoadedGhosts.existskey(J) && LoadedGhosts[J].IsMedal) {
				declare Removed = LoadedGhosts.removekey(J);
				continue;
			}
		}

		if(Validations.existskey(VehicleName)) {
			declare SGhostInfo Ghost;
			Ghost.Nickname = LocalUser.Name;
			Ghost.Time = Validations[VehicleName];
			Ghost.IsMedal = True;
			Ghost.IsAuthorMedal = True;
			Ghost.Vehicle = VehicleName;
			LoadedGhosts.add(Ghost);

			Ghost.Time = MathLib::NearestInteger(Validations[VehicleName]*1.1);
			Ghost.IsAuthorMedal = False;
			Ghost.IsGoldMedal = True;
			LoadedGhosts.add(Ghost);

			Ghost.Time = MathLib::NearestInteger(Validations[VehicleName]*1.2);
			Ghost.IsGoldMedal = False;
			Ghost.IsSilverMedal = True;
			LoadedGhosts.add(Ghost);

			Ghost.Time = MathLib::NearestInteger(Validations[VehicleName]*1.5);
			Ghost.IsSilverMedal = False;
			Ghost.IsBronzeMedal = True;
			LoadedGhosts.add(Ghost);
		}
	}

	//LoadedGhosts = SortGhosts(LoadedGhosts);
	Layers::SendEvent("Menu", "UpdateLoadedGhosts");
}

Boolean ValidationChanged() {
	declare metadata Integer[Text] Validations for Map;
	declare Integer[Text] OldValidations for Map;

	if(Validations.count != OldValidations.count) {
		OldValidations = Validations;
		return True;
	}
	else {
		for(I,0,Validations.count-1) {
			foreach(Car => Validation,Validations)
			if(Validation != OldValidations[Car]) {
				OldValidations = Validations;
				return True;
			}
		}
	}

	return False;
}

declare Text Zone;

Void ShowRecords() {
	declare SGhostInfo[] LoadedGhosts for Layers::Page("Menu");
	LoadedGhosts.clear();

	declare netread Vehicle::SVehicle[] Server_Vehicles for UI;
	declare netread Integer Server_CurrentVehicle for UI;
	declare VehicleName = Server_Vehicles[Server_CurrentVehicle].Name;

	declare SRecord[][Text] Records for This;
	if(Records.existskey(VehicleName))
	foreach(Record, Records[VehicleName]) {
		declare SGhostInfo Info;
		if(Record.Nickname == "") Info.Nickname = Record.Login;
		else Info.Nickname = Record.Nickname;
		Info.Login = Record.Login;
		Info.Time = Record.Time;
		LoadedGhosts.add(Info);
	}

	declare Boolean Leaderboards_Request for This;
	Leaderboards_Request = True;

	Layers::SendEvent("Menu", "UpdateLoadedGhosts");
}

Void Event(CManiaAppEvent _Event) {
	declare Text[] Exchange for This;

	switch(_Event.Type) {
		case CManiaAppPlaygroundEvent::EType::LayerCustomEvent: {
			switch(_Event.CustomEventLayer) {
				case Layers::Get("Menu"): {
					switch(_Event.CustomEventType) {
						case "Open": {
							declare netread Boolean Server_IsValidationMode for UI;
							declare netread Boolean Server_EndRace for UI;
							declare netread Boolean Server_Outro for UI;

							if(!Server_EndRace && !Server_Outro) {
								Exchange.add("HideIngame");
								if(Server_IsValidationMode)
									Layers::Hide("OpenMenu");
								Layers::Hide("Flash");

								Layers::SendEvent("Menu", "Navigation", "True");
							}

							declare Integer CurrentSection for Layers::Page("Menu");
							if(CurrentSection == 0)
								Task::Async_DataFileMgr("LOCAL_GHOSTS", DataFileMgr.Replay_GetGameList("", True));

							UpdateMedals();
						}
						case "Close": {
							declare netread Boolean Server_IsValidationMode for UI;
							declare netread Boolean Server_EndRace for UI;
							declare netread Boolean Server_Outro for UI;

							if(!Server_EndRace && !Server_Outro) {
								Exchange.add("ShowIngame");
								if(Server_IsValidationMode)
									Layers::Show("OpenMenu", True);
								Layers::Show("Flash", True);
							}
						}
						case "Exit": {
							declare Boolean Close for This;
							Close = True;
						}
						case "FetchRecords": {
							Zone = _Event.CustomEventData[0];
							
							Http::Destroy("RECORDS");
							declare Success2 = Http::AsyncGET("RECORDS", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/records.php?uid={{{Map.MapInfo.MapUid}}}&car={{{TextLib::Join(",",VehicleNames)}}}&zone={{{TextLib::URLEncode(Zone)}}}""", True);
						}
						case "ShowRecords": {
							Zone = _Event.CustomEventData[0];
							ShowRecords();
						}
						case "FetchLocalGhosts": {
							Http::Destroy("RECORDS");
							Task::Async_DataFileMgr("LOCAL_GHOSTS", DataFileMgr.Replay_GetGameList("", True));
							declare SGhostInfo[] LoadedGhosts for Layers::Page("Menu");
							LoadedGhosts.clear();
						}
						case "UpdateMedals": {
							UpdateMedals();
						}
					}
				}
				case Layers::Get("OpenMenu"): {
					switch(_Event.CustomEventType) {
						case "Menu": {
							SendCustomEvent("Menu", []);

							Layers::Show("Menu", True);
							Layers::Show("Vehicle", True);

							Exchange.add("HideIngame");

							Layers::Hide("OpenMenu");

							Layers::Hide("Flash");
						}
					}
				}
			}
		}
	}
}

declare CTaskResult_GhostList[] LoadedGhosts_Task;
declare Text[Ident] LoadedGhosts_Task_Files;

Void Async() {
	if(Task::IsCompleted("LOCAL_GHOSTS")) {
		if(Task::IsSuccessful("LOCAL_GHOSTS")) {
			declare ReplayList = (Task::Get("LOCAL_GHOSTS") as CTaskResult_ReplayList);

			declare SGhostInfo[] LoadedGhosts for Layers::Page("Menu");
			LoadedGhosts.clear();

			foreach(Replay, ReplayList.ReplayInfos) {
				if(Map.MapInfo.MapUid != "" && Replay.MapUid == Map.MapInfo.MapUid) {
					declare Continue = False;
					foreach(Ghost, LoadedGhosts)
						if(Replay.FileName == Ghost.File) Continue = True;
					if(Continue) continue;

					declare Task = DataFileMgr.Replay_Load(Replay.FileName);
					LoadedGhosts_Task_Files[Task.Id] = Replay.FileName;
					LoadedGhosts_Task.add(Task);
				}
			}

			Task::Destroy_DataFileMgr("LOCAL_GHOSTS");
		}
	}

	if(Http::IsCompleted("RECORDS")) {
		if(Http::IsSuccessful("RECORDS")) {
			declare SRecord[][Text] Records for This;
			declare Success = Records.fromjson(Http::GetResult("RECORDS"));

			declare CTaskResult_NaturalLeaderBoardInfoList[Text] Leaderboards for This;
			//declare CTaskResult_NaturalLeaderBoardInfoList[Text] LeaderboardsAdditional for This;
			foreach(LB in Leaderboards) {
				if(LB != Null) {
					if(LB.IsProcessing)
						LB.Cancel();
					ScoreMgr.TaskResult_Release(LB.Id);
				}
			}
			Leaderboards.clear();
			
			foreach(Vehicle in VehicleNames) {
				declare Request = ScoreMgr.MapLeaderBoard_GetPlayerList(NullId, Map.MapInfo.MapUid, Vehicle, Zone, 1, 10);
				declare RequestAdditional = ScoreMgr.MapLeaderBoard_GetPlayerList(NullId, Map.MapInfo.MapUid, Vehicle, Zone, 10, 10);
				if(Request == Null || RequestAdditional == Null)
					log("Records on " ^ Map.MapInfo.MapUid ^ " with car " ^ Vehicle ^ " in " ^ Zone ^ " are not available in this title pack.");
				else {
					Leaderboards[Vehicle] = Request;
					//LeaderboardsAdditional[Vehicle] = RequestAdditional;
				}
			}

			ShowRecords();
		}
		else {
			log("Records error " ^ Http::GetStatusCode("RECORDS"));
		}
		Http::Destroy("RECORDS");
	}

	if(Http::IsCompleted("VALIDATION")) {
		if(Http::IsSuccessful("VALIDATION")) {
			declare SRecord[Text] Validations;
			declare Success = Validations.fromjson(Http::GetResult("VALIDATION"));

			declare Text[Text] Validators for Layers::Page("Menu");
			foreach(Car => Record, Validations) {
				if(Record.Nickname == "")
					Validators[Car] = Record.Login;
				else
					Validators[Car] = Record.Nickname;
			}
		}
		else {
			log("Validation error " ^ Http::GetStatusCode("VALIDATION"));
		}
		Http::Destroy("VALIDATION");
	}

	declare SGhostInfo[] LoadedGhosts for Layers::Page("Menu");
	for(I, 0, LoadedGhosts_Task.count-1) {
		if(LoadedGhosts_Task.existskey(I)) {
			declare GhostTask = LoadedGhosts_Task[I];
			if(!GhostTask.IsProcessing) {
				if(GhostTask.HasSucceeded && GhostTask.Ghosts.count > 0) {
					declare Ghost = GhostTask.Ghosts[0];
					declare SGhostInfo Info;
					Info.Nickname = Ghost.Nickname;
					Info.Time = Ghost.Result.Time;
					Info.File = LoadedGhosts_Task_Files[GhostTask.Id];
					foreach(Checkpoint, Ghost.Result.Checkpoints)
						Info.Checkpoints.add(Checkpoint);
					LoadedGhosts.add(Info);

					//LoadedGhosts = SortGhosts(LoadedGhosts);

					Layers::SendEvent("Menu", "UpdateLoadedGhosts");
				}
				else if(GhostTask.HasFailed) {

				}

				declare Removed = LoadedGhosts_Task.removekey(I);
				declare Removed2 = LoadedGhosts_Task_Files.removekey(GhostTask.Id);

				DataFileMgr.TaskResult_Release(GhostTask.Id);
			}
		}
	}

	declare Boolean Leaderboards_Request for This;
	if(Leaderboards_Request) {
		Leaderboards_Request = False;
		declare CTaskResult_NaturalLeaderBoardInfoList[Text] Leaderboards for This;
		declare netread Vehicle::SVehicle[] Server_Vehicles for UI;
		declare netread Integer Server_CurrentVehicle for UI;
		declare Car = Server_Vehicles[Server_CurrentVehicle].Name;
		if(Leaderboards.existskey(Car)) {
			//log("Exists " ^ Car);
			declare L = Leaderboards[Car];
			if(L.IsProcessing) {
				Leaderboards_Request = True;
			}
			else {
				if(L.HasSucceeded) {
					//log("Success " ^ Car ^ " (" ^ L.LeaderBoardInfo.count ^ " ghosts found)");
					for(I, 0, LoadedGhosts.count-1) {
						LoadedGhosts[I].Url = "";
						LoadedGhosts[I].File = "";
						foreach(Record, L.LeaderBoardInfo) {
							if(LoadedGhosts[I].Login == Record.Login && LoadedGhosts[I].Time == Record.Score) {
								LoadedGhosts[I].Url = Record.ReplayUrl;
								LoadedGhosts[I].File = Record.FileName; // should be a proper replay name instead
							}
						}
					}
				}
				else {
					log("oof");
				}
				Layers::SendEvent("Menu", "UpdateLoadedGhosts");
			}
		}
	}

	if(ValidationChanged()) {
		UpdateMedals();
	}
}