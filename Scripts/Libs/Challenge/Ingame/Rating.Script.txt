#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Http.Script.txt" as Http
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary

#Include "Libs/Challenge/Vehicle.Script.txt" as Vehicle

#Include "Libs/Challenge/Service/Status.Script.txt" as Service_Status

#Struct SRateParams {
	Text UserToken;
	Text MapUid;
	Text Car;
	Real Difficulty;
	Real Quality;
}

#Const C_Manialink "Media/Manialinks/Base/Ingame/Rating"

Text[] GetDifficultyNames() {
	return [
		Dictionary::Get("VERY_EASY"),
		Dictionary::Get("EASY"),
		Dictionary::Get("SIMPLE"),
		Dictionary::Get("INTERMEDIATE"),
		Dictionary::Get("ADVANCED"),
		Dictionary::Get("HARD"),
		Dictionary::Get("VERY_HARD"),
		Dictionary::Get("COMPLICATED"),
		Dictionary::Get("EXTREME"),
		Dictionary::Get("NEARLY_IMPOSSIBLE")
	];
}

Text[] GetQualityNames() {
	return [
		Dictionary::Get("THE_WORST"),
		Dictionary::Get("BAD"),
		Dictionary::Get("WEIRD"),
		Dictionary::Get("ALRIGHT"),
		Dictionary::Get("NOT_BAD"),
		Dictionary::Get("GOOD"),
		Dictionary::Get("ENJOYABLE"),
		Dictionary::Get("GREAT"),
		Dictionary::Get("VERY_FUN"),
		Dictionary::Get("INCREDIBLE")
	];
}

Void ApplyRating() {
	declare netread Vehicle::SVehicle[] Server_Vehicles for UI;
	declare netread Integer Server_CurrentVehicle for UI;

	declare Real DifficultyValue for Layers::Page("Rating");
	declare Real QualityValue for Layers::Page("Rating");
	declare Text CHALLENGE_TOKEN for LocalUser;

	declare SRateParams Params;
	Params.UserToken = CHALLENGE_TOKEN;
	Params.MapUid = Map.MapInfo.MapUid;
	Params.Car = Server_Vehicles[Server_CurrentVehicle].Name;
	Params.Difficulty = DifficultyValue;
	Params.Quality = QualityValue;

	declare Success = Http::AsyncPOST("RATE", Service_Status::LastStatus(LocalUser).Global.Service^"/ingame/rate.php", Params.tojson());
}

Void UpdateRating(Service_Status::SPublicMap _PublicMap) {
	declare netread Vehicle::SVehicle[] Server_Vehicles for UI;
	declare netread Integer Server_CurrentVehicle for UI;

	declare VehicleName = Server_Vehicles[Server_CurrentVehicle].Name;

	declare Real DifficultyValue for Layers::Page("Rating");
	declare Real AverageDifficultyValue for Layers::Page("Rating");
	declare Integer AverageDifficultyCount for Layers::Page("Rating");
	declare Real QualityValue for Layers::Page("Rating");
	declare Real AverageQualityValue for Layers::Page("Rating");
	declare Integer AverageQualityCount for Layers::Page("Rating");

	if(_PublicMap.Vehicles.existskey(VehicleName)) {
		DifficultyValue = _PublicMap.Vehicles[VehicleName].Rating.Difficulty.User;
		QualityValue = _PublicMap.Vehicles[VehicleName].Rating.Quality.User;

		AverageDifficultyValue = _PublicMap.Vehicles[VehicleName].Rating.Difficulty.AverageWithoutYou;
		AverageDifficultyCount = _PublicMap.Vehicles[VehicleName].Rating.Difficulty.Count;
		AverageQualityValue = _PublicMap.Vehicles[VehicleName].Rating.Quality.AverageWithoutYou;
		AverageQualityCount = _PublicMap.Vehicles[VehicleName].Rating.Quality.Count;
	}
}

Void Init() {
	Layers::Create("Rating", Manialink::FromFile(C_Manialink, True, ["Audio"], Settings::Get().Theme));

	declare Real DifficultyValue for Layers::Page("Rating");
	declare Real AverageDifficultyValue for Layers::Page("Rating");
	declare Integer AverageDifficultyCount for Layers::Page("Rating");
	declare Real QualityValue for Layers::Page("Rating");
	declare Real AverageQualityValue for Layers::Page("Rating");
	declare Integer AverageQualityCount for Layers::Page("Rating");

	DifficultyValue = -1.;
	QualityValue = -1.;

	declare Text[] Difficulties for Layers::Page("Rating");
	declare Text[] Qualities for Layers::Page("Rating");

	Difficulties = GetDifficultyNames();
	Qualities = GetQualityNames();
}

Void ShowInOutro() {
	Layers::Show("Rating", True);
	Layers::SendEvent("Rating", "Position", "105 51.5");
	Layers::SendEvent("Rating", "Blur", "False");

	declare Service_Status::SPublicMap PublicMap for This;
	UpdateRating(PublicMap);
}

Void Show() {
	Layers::Show("Rating", True);
	Layers::SendEvent("Rating", "Position", "0 0");
	Layers::SendEvent("Rating", "Blur", "True");

	declare Service_Status::SPublicMap PublicMap for This;
	UpdateRating(PublicMap);
}

Void Start() {
	declare Service_Status::SPublicMap PublicMap for This;
	UpdateRating(PublicMap);
}

Void Event(CManiaAppEvent _Event) {
	switch(_Event.Type) {
		case CManiaAppPlaygroundEvent::EType::LayerCustomEvent: {
			switch(_Event.CustomEventLayer) {
				case Layers::Get("Rating"): {
					switch(_Event.CustomEventType) {
						case "Apply": {
							ApplyRating();

							Layers::Hide("Rating");
						}
						case "Exit": {
							Layers::Hide("Rating");
						}
					}
				}
			}
		}
	}
}

Void Async() {
	if(Http::IsCompleted("RATE")) {
		if(Http::IsSuccessful("RATE")) {
			log(Http::GetResult("RATE")); // TODO: give response that the request was successful

			declare netread Vehicle::SVehicle[] Server_Vehicles for UI;
			declare Text[] VehicleNames;
			foreach(Vehicle, Server_Vehicles) VehicleNames.add(Vehicle.Name);

			declare netread Boolean Server_IsValidationMode for UI;

			if(!Server_IsValidationMode) {
				declare Service_Status::SPublicMap PublicMap for This;
				declare Text CHALLENGE_TOKEN for LocalUser;
				declare Success = Http::AsyncPOST("MAP", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/map.php?uid={{{Map.MapInfo.MapUid}}}&vehicle={{{TextLib::Join(",",VehicleNames)}}}""", CHALLENGE_TOKEN);
			}
		}
		Http::Destroy("RATE");
	}

	if(Http::IsCompleted("MAP")) {
		if(Http::IsSuccessful("MAP")) {
			declare Service_Status::SPublicMap PublicMap for This;
			declare JsonSuccess = PublicMap.fromjson(Http::GetResult("MAP"));
			UpdateRating(PublicMap);
		}
		Http::Destroy("MAP");
	}
}

Void Loop() {
	
}