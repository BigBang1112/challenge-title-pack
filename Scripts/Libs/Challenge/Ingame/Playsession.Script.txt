#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Http.Script.txt" as Http
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Random.Script.txt" as Random

#Include "Libs/Challenge/Vehicle.Script.txt" as Vehicle
#Include "Libs/Challenge/ModifierBase.Script.txt" as ModifierBase

#Include "Libs/Challenge/Service/Status.Script.txt" as Service_Status
#Include "Libs/Challenge/Service/Map.Script.txt" as Service_Map

#Const C_Manialink "Media/Manialinks/Base/Ingame/Playsession"

#Struct SPlaysession {
	Text UserToken;
	Text MapUid;
	Text Car;
	Text Secret;
	Text Action;
	Text TitleId;
}

Void UpdatePublicMap(Service_Status::SPublicMap _PublicMap) {
	if(_PublicMap.Public) {
		Layers::SendEvent("Playsession", "Public", _PublicMap.tojson());
	}
	else {
		Layers::SendEvent("Playsession", "Private");
	}
}

declare Integer PlaysessionPingTime;

Boolean AsyncPlaysession(Text _Secret, Text _Action) {
	declare Text CHALLENGE_TOKEN for LocalUser;
	declare netread Vehicle::SVehicle[] Server_Vehicles for UI;
	declare netread Integer Server_CurrentVehicle for UI;

	declare persistent Text[Text] CHALLENGE_SETTINGS for LocalUser;
	if(CHALLENGE_SETTINGS.existskey("PrivateSession") && CHALLENGE_SETTINGS["PrivateSession"] == "True") return False;

	declare SPlaysession Playsession;
	Playsession.UserToken = CHALLENGE_TOKEN;
	Playsession.MapUid = Map.MapInfo.MapUid;
	if(Server_CurrentVehicle == -1)
		Playsession.Car = "";
	else
		Playsession.Car = Server_Vehicles[Server_CurrentVehicle].Name;
	Playsession.Secret = _Secret;
	Playsession.Action = _Action;
	Playsession.TitleId = LoadedTitle.TitleId;

	PlaysessionPingTime = Now;

	return Http::AsyncPOST("PLAYSESSION", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/ingame/playsession.php""", Playsession.tojson());
}

Void Init() {
	Layers::Create("Playsession", Manialink::FromFile(C_Manialink, True, ["Audio", "TextAnimation"], Settings::Get().Theme));

	PlaysessionPingTime = -1;
}

Void Start() {
	declare netread Boolean Server_IsValidationMode for UI;

	declare netread Vehicle::SVehicle[] Server_Vehicles for UI;
	declare Text[] VehicleNames;
	foreach(Vehicle, Server_Vehicles) VehicleNames.add(Vehicle.Name);

	declare Service_Status::SPublicMap PublicMap for This;
	if(!Server_IsValidationMode) {
		declare Text CHALLENGE_TOKEN for LocalUser;
		declare ReqMap = Http::SyncPOST("""{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/map.php?uid={{{Map.MapInfo.MapUid}}}&vehicle={{{TextLib::Join(",",VehicleNames)}}}""", CHALLENGE_TOKEN);
		if(Http::IsSuccessfulStatusCode(ReqMap.StatusCode)) {
			declare JsonSuccess = PublicMap.fromjson(ReqMap.Result);
			Layers::SendEvent("Vehicle", "Update", ReqMap.Result);
		}
		Http.Destroy(ReqMap);
	}
	UpdatePublicMap(PublicMap);

	declare Text PlaysessionSecret for This;
	PlaysessionSecret = Random::String(32);
	if(PublicMap.Public && !Server_IsValidationMode)
		AsyncPlaysession(PlaysessionSecret, "Playing");

	if(Server_IsValidationMode || !(LoadedTitle.TitleId == "Challenge@bigbang1112" || LoadedTitle.TitleId == "Challenge_Stadium@bigbang1112")) Layers::SendEvent("Playsession", "DisablePublish");
}

Void Event(CManiaAppEvent _Event) {
	switch(_Event.Type) {
		case CManiaAppPlaygroundEvent::EType::LayerCustomEvent: {
			switch(_Event.CustomEventLayer) {
				case Layers::Get("Playsession"): {
					switch(_Event.CustomEventType) {
						case "PublishMap": {
							declare metadata ModifierBase::SChMap OriginalMap for Map;
							declare Text CHALLENGE_TOKEN for LocalUser;

							declare Service_Map::SPublishParams Params;
							Params.UserToken = CHALLENGE_TOKEN;
							Params.MapUid = Map.MapInfo.MapUid;
							Params.MapName = Map.MapName;
							Params.MapAuthor = Map.AuthorNickName;
							Params.OriginalMapUid = OriginalMap.MapUid;
							Params.OriginalMapName = OriginalMap.Name;
							Params.OriginalMapAuthor = OriginalMap.AuthorNickName;
							Params.OriginalGame = "";
							Params.TitleId = LoadedTitle.TitleId;
							Params.Environment = Map.MapInfo.CollectionName;
							Params.Modifiers = TextLib::Split("+",Map.MapInfo.MapStyle);

							declare Success = Service_Map::AsyncPublish("PUBLISH", LocalUser, Params);
						}
						case "SendMessage": {
							declare Text PlaysessionSecret for This;
							declare Text CHALLENGE_TOKEN for LocalUser;

							declare Service_Status::SMessageParams Params;
							Params.UserToken = CHALLENGE_TOKEN;
							Params.PlaysessionSecret = PlaysessionSecret;
							Params.Message = _Event.CustomEventData[0];

							declare Success = Http::AsyncPOST("MESSAGE", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/ingame/message.php""", Params.tojson());
						}
					}
				}
			}
		}
	}
}

Void Async() {
	if(Service_Map::AsyncIsCompleted("PUBLISH")) {
		if(Service_Map::AsyncIsSuccessful("PUBLISH")) {
			declare Text PlaysessionSecret for This;
			UpdatePublicMap(Service_Map::GetAsyncPublishResult("PUBLISH"));
			PlaysessionSecret = Random::String(32);
			AsyncPlaysession(PlaysessionSecret, "Playing");

			declare netread Vehicle::SVehicle[] Server_Vehicles for UI;
			declare Text[] VehicleNames;
			foreach(Vehicle, Server_Vehicles) VehicleNames.add(Vehicle.Name);

			declare Text CHALLENGE_TOKEN for LocalUser;
			declare SuccessMap = Http::AsyncPOST("MAP", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/map.php?uid={{{Map.MapInfo.MapUid}}}&vehicle={{{TextLib::Join(",",VehicleNames)}}}""", CHALLENGE_TOKEN);
		}
		else {
			Dialog_Message("HTTP ERROR "^Service_Map::AsyncGetStatusCode("PUBLISH")^"\nCouldn't publish the map.");
		}
		Service_Map::AsyncDestroy("PUBLISH");
	}

	if(Http::IsCompleted("PLAYSESSION")) {
		if(Http::IsSuccessful("PLAYSESSION")) {
			declare Integer Ping for Layers::Page("Playsession");
			Ping = Now - PlaysessionPingTime;
		}
		Http::Destroy("PLAYSESSION");
	}

	if(Http::IsCompleted("MESSAGE")) {
		if(Http::IsSuccessful("MESSAGE")) {
			declare Success = Service_Status::AsyncCheckStatus("STATUS", LocalUser, "", Map.MapInfo.MapUid);
		}
		Http::Destroy("MESSAGE");
	}
}