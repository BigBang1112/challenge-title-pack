#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Discord.Script.txt" as Discord
#Include "Libs/BigBang1112/Http.Script.txt" as Http

#Include "Libs/Challenge/Ingame/Gamemodes/Race.Script.txt" as Race
#Include "Libs/Challenge/Vehicle.Script.txt" as Vehicle
#Include "Libs/Challenge/ModifierBase.Script.txt" as ModifierBase

#Include "Libs/Challenge/Service/Status.Script.txt" as Service_Status
#Include "Libs/Challenge/Service/Record.Script.txt" as Service_Record

#Const C_Manialink "Media/Manialinks/Base/Ingame/Endscreen"

declare Boolean RaceEnded;
declare CAudioSource Music_Endscreen;

Void Init() {
	Music_Endscreen = Audio.CreateSound("file://Media/Musics/Never Give Up.ogg", 1.0, True, False, False);

	Layers::Create("Endscreen", Manialink::FromFile(C_Manialink, True, ["Audio", "SlideText"], Settings::Get().Theme));
}

Void SubmitRecord() {
	declare netread Race::SEndRaceInfo Server_EndRaceInfo for UI;
	declare Text CHALLENGE_TOKEN for LocalUser;

	declare Service_Record::SRecordParams RecordParams for This;
	RecordParams.UserToken = CHALLENGE_TOKEN;
	RecordParams.Vehicle = Server_EndRaceInfo.Vehicle;
	RecordParams.MapUid = Map.MapInfo.MapUid;
	RecordParams.Time = Server_EndRaceInfo.Finish.Time;
	RecordParams.Checkpoints = Server_EndRaceInfo.Finish.Checkpoints;
	RecordParams.Distance = Server_EndRaceInfo.Finish.Distance;
	RecordParams.Stunts = Server_EndRaceInfo.Finish.Stunts;

	declare Success = Service_Record::AsyncRecord("RECORD", LocalUser, RecordParams);
	if(!Success) Layers::SendEvent("Endscreen", "RecordFail");
}

Void Event(CManiaAppEvent _Event) {
	declare Text[] Exchange for This;

	switch(_Event.Type) {
		case CManiaAppPlaygroundEvent::EType::LayerCustomEvent: {
			switch(_Event.CustomEventLayer) {
				case Layers::Get("Endscreen"): {
					switch(_Event.CustomEventType) {
						case "Continue": {
							SendCustomEvent("Continue", []);
							Layers::Show("Outro");
							Exchange.add("Rating_ShowInOutro");
							Layers::SendEvent("Notification", "Position", ["155 22.5"]);
						}
						case "FailRefresh": {
							SubmitRecord();
						}
					}
				}
			}
		}
	}
}

Void Async() {
	if(Discord::AsyncIsCompleted("Discord")) {
		if(Discord::AsyncIsSuccessful("Discord")) {
			Layers::SendEvent("Endscreen", "Discord", Discord::GetAsyncWidgetResult("Discord").tojson());
		}
		Discord::AsyncDestroy("Discord");
	}

	if(Http::IsCompleted("RECORD")) {
		if(Http::IsSuccessful("RECORD")) {
			declare Service_Record::SRecordResult[Text] RecordResult for Layers::Page("Endscreen");
			declare Json = RecordResult.fromjson(Http::GetResult("RECORD"));
			Layers::SendEvent("Endscreen", "Record", RecordResult.tojson());
			Http::Destroy("RECORD");

			declare Text CHALLENGE_TOKEN for LocalUser;
			declare Success = Http::AsyncPOST("TASKS", Service_Status::LastStatus(LocalUser).Global.Service^"/tasks.php?title="^LoadedTitle.TitleId, CHALLENGE_TOKEN);
		}
		else {
			declare StatusCode = Http::GetStatusCode("RECORD");
			Layers::SendEvent("Endscreen", "RecordFail");
			Http::Destroy("RECORD");

			declare Service_Record::SRecordParams RecordParams for This;
			//declare Success = Service_Record::AsyncRecord("RECORD", LocalUser, RecordParams);
		}
	}
}

Void Loop() {
	declare netread Boolean Server_EndRace for UI;

	if(Server_EndRace != RaceEnded) {
		if(Server_EndRace) {
			declare netread Boolean Server_IsValidationMode for UI;
			declare netread Vehicle::SVehicle[] Server_Vehicles for UI;
			declare netread Integer Server_CurrentVehicle for UI;

			declare metadata ModifierBase::SChMap OriginalMap for Map;

			declare Record = ScoreMgr.Map_GetRecord(NullId, Map.MapInfo.MapUid, Server_Vehicles[Server_CurrentVehicle].Name);
			Layers::SendEvent("Menu", "Car", Server_Vehicles[Server_CurrentVehicle].Name);

			declare Text[] Exchange for This;
			Exchange.add("HideIngame");

			if(Server_IsValidationMode)
				Layers::Hide("OpenMenu");

			Music_Endscreen.Play();

			declare Text Map_Name for Layers::Page("Endscreen");
			Map_Name = OriginalMap.Name;

			declare Text Map_Env for Layers::Page("Endscreen");
			Map_Env = OriginalMap.CollectionName;

			declare Text Car for Layers::Page("Endscreen");
			Car = Server_Vehicles[Server_CurrentVehicle].Name;

			declare Text[] Challenges for Layers::Page("Endscreen");
			Challenges = TextLib::Split("+", Map.MapStyle);

			declare DiscordRequest = Discord::AsyncWidget("Discord", "311139012553211914");

			declare netread Race::SEndRaceInfo Server_EndRaceInfo for UI;

			declare Service_Status::SPublicMap PublicMap for This;

			Layers::SendEvent("Endscreen", "Update");

			if(Server_IsValidationMode) {
				Layers::SendEvent("Endscreen", "PrivateMap");
			}
			else if(PublicMap.Public) {
				SubmitRecord();
			}
			else {
				Layers::SendEvent("Endscreen", "PrivateMap");
			}
			Layers::Show("Endscreen", True);
		}
		else {
			Layers::Hide("Endscreen");
			Layers::Hide("Flash");
			Music_Endscreen.Stop();
		}
		RaceEnded = Server_EndRace;
	}
}