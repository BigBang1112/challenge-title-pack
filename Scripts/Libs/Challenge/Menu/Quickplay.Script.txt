#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/MX.Script.txt" as MX
#Include "Libs/BigBang1112/Task.Script.txt" as Task
#Include "Libs/BigBang1112/Data.Script.txt" as Data
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Map.Script.txt" as Map

#Include "Libs/Challenge/Nicknames.Script.txt" as Nicknames

#Struct SMetadata {
	Text Name;
	Text AuthorLogin;
	Text AuthorNickname;
	Text Description;
}

#Struct SScriptInfo {
	Text Name;
	Text Type;
	SMetadata Metadata;
}

declare CUILayer[Text] LayerAPIs;

declare Text MapDownloadApproximateLocation;
declare Text MapDownloadUid;
declare SScriptInfo[] MapDownloadScripts;

Void UpdateLocalMaps(Text _Folder, Text _SearchMapName, Text _SearchAuthorName) {
	declare FlatSearch = (_SearchMapName != "" || _SearchAuthorName != "");
	Task::Async_DataFileMgr("MAPLIST_LOCAL_FOLDER",DataFileMgr.Map_GetFilteredGameList(2,_Folder,FlatSearch));
	Data::Set("MAPLIST_LOCAL_SEARCHMAPNAME",_SearchMapName);
	Data::Set("MAPLIST_LOCAL_SEARCHAUTHORNAME",_SearchAuthorName);
}

Void UpdateOfficialScripts(Text[] _Scripts) {
	declare SScriptInfo[] Scripts;
	foreach(Script,_Scripts) {
		declare SScriptInfo Info;
		Info.Name = Script;
		Info.Type = "Official";
		Scripts.add(Info);
	}
	Layers::SendEvent("Quickplay", "ScriptList_Official_Update", [Scripts.tojson()]);
}

Void StartMap(Text _MapLocation, Map::SMapInfo _MapInfo, SScriptInfo[] _Scripts) {
	if(_MapInfo.MapUid == "") {
		Dialog_Message("Please select a map.");
		return;
	}
	if(!_MapInfo.IsPlayable) {
		Dialog_Message("This map wasn't validated in original version.");
		return;
	}
	if(_Scripts.count == 0) {
		Dialog_Message("Please select at least one script.");
		return;
	}

	if(TitleFlow.IsReady) {
		TitleFlow.EditNewMapFromBaseMap(_MapInfo.FileName, "", "", "Challenge.Script.txt", "Modifier.Script.txt", """<settings>
		<setting name="S_Build" type="boolean" value="True"/>
		<setting name="S_ScriptNames" type="text" value="{{{TextLib::Replace(_Scripts.tojson(), "\"", "'")}}}"/>
		<setting name="S_OriginalMapName" type="text" value="{{{_MapInfo.Name}}}"/>
	</settings>""");
	}
}

Void Start() {
	Layers::Create("Quickplay", Manialink::FromFile("Media/Manialinks/Quickplay", True), True);

	declare OfficialScripts = [
		"Checkpointless.Script.txt",
		"Reverse.Script.txt",
		"Terrainless.Script.txt",
		"Default.Script.txt"
	];
	
	UpdateLocalMaps("","","");
	UpdateOfficialScripts(OfficialScripts);
}

Void Event(CManiaAppEvent _Event) {
	declare Event <=> _Event;

	if(Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
		switch(Event.CustomEventType) {
			case "Button_Start": {
				declare MapLocation = Event.CustomEventData[0];
				
				if(MapLocation == "ManiaExchange") {
					declare MX::SMXTrack Track;
					declare JsonSuccessMapInfo = Track.fromjson(Event.CustomEventData[1]);
					OpenLink("""challenge:downloadmap?id={{{Track.TrackID}}}&displayname={{{TextLib::URLEncode(Track.GbxMapName)}}}""", ::ELinkType::ManialinkBrowser);
					MapDownloadApproximateLocation = """Downloaded/TrackMania/{{{Track.MapType}}}/{{{Track.EnvironmentName}}}""";
					MapDownloadUid = Track.TrackUID;
					declare JsonSuccessScripts = MapDownloadScripts.fromjson(Event.CustomEventData[2]);
				}
				if(MapLocation == "Local") {
					declare Map::SMapInfo MapInfo;
					declare JsonSuccessMapInfo = MapInfo.fromjson(Event.CustomEventData[1]);
					declare SScriptInfo[] Scripts;
					declare JsonSuccessScripts = Scripts.fromjson(Event.CustomEventData[2]);
					StartMap(MapLocation, MapInfo, Scripts);
				}
			}
			case "MapList_Local_Folder": {
				declare Folder = Event.CustomEventData[0];
				declare SearchMapName = Event.CustomEventData[1];
				declare SearchAuthorName = Event.CustomEventData[2];
				UpdateLocalMaps(Folder, SearchMapName, SearchAuthorName);
			}
			case "MapList_ManiaExchange_Add": {
				declare MX::SMXSearchFilter Search;
				Search.Page = Event.CustomEventData[0];
				Search.TrackName = Event.CustomEventData[1];
				Search.Author = Event.CustomEventData[2];
				Search.Limit = "20";
				if(!MX::AsyncSearch("MX_SEARCH_ADD", "tm", Search, True)) {
				
				}
			}
			case "MapList_ManiaExchange_Update": {
				declare MX::SMXSearchFilter Search;
				Search.Page = Event.CustomEventData[0];
				Search.TrackName = Event.CustomEventData[1];
				Search.Author = Event.CustomEventData[2];
				Search.Limit = "20";
				if(!MX::AsyncSearch("MX_SEARCH_UPDATE", "tm", Search, True)) {
				
				}
			}
			case "ScriptList_Metadata": {
				declare SScriptInfo Info;
				declare JsonSuccess = Info.fromjson(Event.CustomEventData[0]);
				
				declare Text ScriptContent;
				
				if(Info.Type == "Official") ScriptContent = File::Read("Media/Challenges/"^Info.Name);
				
				declare LayerAPI = UILayerCreate();
				LayerAPI.ManialinkPage = Manialink::Construct("",File::Read("Media/API_Base_Metadata.Script.txt")^"""
declare SMetadata Script;

{{{Dictionary::TranslateAllPhrases(ScriptContent)}}}

"""^File::Read("Media/API_Main_Metadata.Script.txt"));

				LayerAPIs[Info.Name] = LayerAPI;
			}
			case "ScriptMetadata": {
				foreach(Name => API,LayerAPIs) {
					if(API == Event.CustomEventLayer) {
						Layers::SendEvent("Quickplay", "ScriptList_Metadata_Response", [Name, Event.CustomEventData[0]]);
						UILayerDestroy(API);
						declare Removed = LayerAPIs.removekey(Name);
					}
				}
			}
			case "Nickname": {
				Nicknames::Submit(Event.CustomEventData[0]);
			}
		}
	}
}

Void Async() {
	Nicknames::Async();

	if(MX::IsCompleted("MX_SEARCH_ADD")) {
		if(MX::IsSuccessful("MX_SEARCH_ADD")) {
			Layers::SendEvent("Quickplay", "MapList_MX_Add", [MX::GetAsyncSearchResult("MX_SEARCH_ADD").tojson()]);
		}
		MX::Destroy("MX_SEARCH_ADD");
	}
	if(MX::IsCompleted("MX_SEARCH_UPDATE")) {
		if(MX::IsSuccessful("MX_SEARCH_UPDATE")) {
			Layers::SendEvent("Quickplay", "MapList_MX_Update", [MX::GetAsyncSearchResult("MX_SEARCH_UPDATE").tojson()]);
		}
		else {
			log("Can't load MX: " ^ MX::GetStatusCode("MX_SEARCH_UPDATE"));
		}
		MX::Destroy("MX_SEARCH_UPDATE");
	}
	
	if(Task::IsCompleted("MAPLIST_LOCAL_FOLDER")) {
		if(Task::IsSuccessful("MAPLIST_LOCAL_FOLDER")) {
			declare MapList = (Task::Get("MAPLIST_LOCAL_FOLDER") as CTaskResult_MapList);
			
			declare Text[] SubFolders;
			
			declare SearchMapName = Data::Get("MAPLIST_LOCAL_SEARCHMAPNAME");
			declare SearchAuthorName = Data::Get("MAPLIST_LOCAL_SEARCHAUTHORNAME");
			
			if(SearchMapName == "" && SearchAuthorName == "") {
				SubFolders.add("...");
				foreach(Folder,MapList.SubFolders) SubFolders.add(Folder);
			}
			
			declare Map::SMapInfo[] MapInfos;
			foreach(MapInfo,MapList.MapInfos) {
				if(SearchMapName != "")
					if(!TextLib::Find(SearchMapName, MapInfo.Name, False, False)) continue;
				if(SearchAuthorName != "")
					if(!TextLib::Find(SearchAuthorName, MapInfo.AuthorLogin ^ MapInfo.AuthorNickName, False, False)) continue;
			
				declare Map::SMapInfo Info;
				Info = Map::ToSMapInfo(MapInfo);
				MapInfos.add(Info);
			}
					
			Layers::SendEvent("Quickplay", "MapList_Local_Update", [MapList.Path,SubFolders.tojson(),MapInfos.tojson()]);
			Task::Destroy_DataFileMgr("MAPLIST_LOCAL_FOLDER");
		}
	}
}

Void Loop() {
	if(MapDownloadApproximateLocation != "") {
		declare List = Task::SyncMapList(DataFileMgr.Map_GetFilteredGameList(4, MapDownloadApproximateLocation, True));
		foreach(MapInfo,List.MapInfos) {
			if(MapInfo.MapUid == MapDownloadUid) {
				wait(TitleFlow.IsReady);
				TitleFlow.EditNewMapFromBaseMap(MapInfo.FileName, "", "", "Challenge.Script.txt", "Modifier.Script.txt", """<settings>
				<setting name="S_Build" type="boolean" value="True"/>
				<setting name="S_ScriptNames" type="text" value="{{{TextLib::Replace(MapDownloadScripts.tojson(), "\"", "'")}}}"/>
				<setting name="S_OriginalMapName" type="text" value="{{{MapInfo.Name}}}"/>
				</settings>""");
				
				MapDownloadApproximateLocation = "";
			}
		}
		DataFileMgr.TaskResult_Release(List.Id);
	}
}