#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Http.Script.txt" as Http
#Include "Libs/BigBang1112/MX.Script.txt" as MX
#Include "Libs/BigBang1112/Task.Script.txt" as Task
#Include "Libs/BigBang1112/Data.Script.txt" as Data
#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/File.Script.txt" as File
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Map.Script.txt" as Map
#Include "Libs/BigBang1112/Web.Script.txt" as Web

#Include "Libs/Challenge/Menu/AuthBeta.Script.txt" as Menu_AuthBeta

#Include "Libs/Challenge/Nicknames.Script.txt" as Nicknames
#Include "Libs/Challenge/Scope.Script.txt" as Scope

#Struct SMetadata {
	Text Name;
	Text AuthorLogin;
	Text AuthorNickname;
	Text Description;
}

#Struct SScriptInfo {
	Text Name;
	Text Type;
	SMetadata Metadata;
}

#Struct SMapInfoFilter {
	Text Name;
	Text Author;
}

declare CUILayer[Text] LayerAPIs;

declare Text MapDownloadApproximateLocation;
declare Text MapDownloadUid;
declare SScriptInfo[] MapDownloadScripts;
declare MX::SMXTrack MXTrack;
declare Web::SMap ManagerTrack;
declare Boolean MapDownload;
declare Text MapDownloadType;

declare Text[] DownloadedMapUids;
declare Text ManagerMapUid;
declare Boolean ManagerShowPrivate;

Void UpdateLocalMaps(Text _Folder, SMapInfoFilter _Filter) {
	declare FlatSearch = (_Filter.Name != "");
	Task::Async_DataFileMgr("MAPLIST_LOCAL_FOLDER",DataFileMgr.Map_GetFilteredGameList(Scope::C_BrowserScope,_Folder,FlatSearch));
	Data::Set("MAPLIST_LOCAL_FILTER",_Filter.tojson());
}

Void UpdateOfficialScripts(Text[] _Scripts) {
	declare SScriptInfo[] Scripts;
	foreach(Script,_Scripts) {
		declare SScriptInfo Info;
		Info.Name = Script;
		Info.Type = "Official";
		Scripts.add(Info);
	}
	Layers::SendEvent("Quickplay", "ScriptList_Official_Update", [Scripts.tojson()]);
}

Void StartMap(Text _MapLocation, Map::SMapInfo _MapInfo, SScriptInfo[] _Scripts) {
	if(_MapInfo.MapUid == "") {
		Dialog_Message("Please select a map.");
		return;
	}
	if(!_MapInfo.IsPlayable) {
		Dialog_Message("This map wasn't validated in original version.");
		return;
	}
	if(_Scripts.count == 0 && _MapInfo.MapType != "Challenge") {
		Dialog_Message("Please select at least one script.");
		return;
	}

	if(TitleFlow.IsReady) {
		TitleFlow.EditNewMapFromBaseMap(_MapInfo.FileName, "", "", "Challenge.Script.txt", "Modifier.Script.txt", """<settings>
		<setting name="S_Build" type="boolean" value="True"/>
		<setting name="S_ScriptNames" type="text" value="{{{TextLib::Replace(_Scripts.tojson(), "\"", "'")}}}"/>
		<setting name="S_OriginalMapName" type="text" value="{{{_MapInfo.Name}}}"/>
	</settings>""");
	}
}

Boolean StartMapIfExists() {	
	declare List = Task::SyncMapList(DataFileMgr.Map_GetFilteredGameList(Scope::C_BrowserScope, MapDownloadApproximateLocation, True));
	foreach(MapInfo,List.MapInfos) {
		if(MapInfo.MapUid == MapDownloadUid) {
			wait(TitleFlow.IsReady);
			TitleFlow.EditNewMapFromBaseMap(MapInfo.FileName, "", "", "Challenge.Script.txt", "Modifier.Script.txt", """<settings>
			<setting name="S_Build" type="boolean" value="True"/>
			<setting name="S_ScriptNames" type="text" value="{{{TextLib::Replace(MapDownloadScripts.tojson(), "\"", "'")}}}"/>
			<setting name="S_OriginalMapName" type="text" value="{{{MapInfo.Name}}}"/>
			</settings>""");
			
			MapDownloadApproximateLocation = "";
			DataFileMgr.TaskResult_Release(List.Id);

			Task::Async_DataFileMgr("DOWNLOADED_MAPUIDS",DataFileMgr.Map_GetFilteredGameList(Scope::C_BrowserScope, "Downloaded", True));
			
			MapDownload = False;
			
			return True;
		}
	}
	DataFileMgr.TaskResult_Release(List.Id);
	return False;
}

Void Start() {
	Layers::Create("Quickplay", Manialink::FromFile("Media/Manialinks/Quickplay", True, ["TextAnimation"]), True);

	declare OfficialScripts = [
		"Reverse.Script.txt",
		"Checkpointless.Script.txt",
		"Comeback.Script.txt",
		"Default.Script.txt",
		"NoCP.Script.txt"
	];
	
	declare SMapInfoFilter Filter;
	UpdateLocalMaps("",Filter);
	UpdateOfficialScripts(OfficialScripts);
	
	Task::Async_DataFileMgr("DOWNLOADED_MAPUIDS",DataFileMgr.Map_GetFilteredGameList(Scope::C_BrowserScope, "Downloaded", True));
}

Void Event(CManiaAppEvent _Event) {
	declare Event <=> _Event;

	if(Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
		switch(Event.CustomEventType) {
			case "Button_Start": {
				declare MapLocation = Event.CustomEventData[0];
				
				if(MapLocation == "ManiaExchange") {
					declare JsonSuccessMapInfo = MXTrack.fromjson(Event.CustomEventData[1]);
					declare JsonSuccessScripts = MapDownloadScripts.fromjson(Event.CustomEventData[2]);
				
					if(MXTrack.TrackUID == "") {
						Dialog_Message("Please select a map.");
					}
					else if(MapDownloadScripts.count == 0 && MXTrack.MapType != "Challenge") {
						Dialog_Message("Please select at least one script.");
					}
					else {
						declare JsonSuccessMapInfo = MXTrack.fromjson(Event.CustomEventData[1]);
						MapDownloadApproximateLocation = """Downloaded/TrackMania/{{{MXTrack.MapType}}}/{{{MXTrack.EnvironmentName}}}""";
						MapDownloadUid = MXTrack.TrackUID;
						MapDownloadType = "mx";
					}
				}
				if(MapLocation == "Local") {
					declare Map::SMapInfo MapInfo;
					declare JsonSuccessMapInfo = MapInfo.fromjson(Event.CustomEventData[1]);
					declare SScriptInfo[] Scripts;
					declare JsonSuccessScripts = Scripts.fromjson(Event.CustomEventData[2]);
					if(MapInfo.MapType == "TrackMania\\Challenge")
						TitleFlow.PlayMap(MapInfo.FileName,"","");
					else
						StartMap(MapLocation, MapInfo, Scripts);
				}
				if(MapLocation == "MapManager") {
					declare JsonSuccessMapInfo = ManagerTrack.fromjson(Event.CustomEventData[1]);
					declare JsonSuccessScripts = MapDownloadScripts.fromjson(Event.CustomEventData[2]);
					
					if(ManagerTrack.Uid == "") {
						Dialog_Message("Please select a map.");
					}
					else if(MapDownloadScripts.count == 0) {
						Dialog_Message("Please select at least one script.");
					}
					else {
						declare JsonSuccessMapInfo = ManagerTrack.fromjson(Event.CustomEventData[1]);
						MapDownloadApproximateLocation = """Downloaded/TrackMania""";
						MapDownloadUid = ManagerTrack.Uid;
						MapDownloadType = "manager";
					}
				}
			}
			case "MapList_Local_Folder": {
				MX::AsyncDestroy("MX_SEARCH_UPDATE");
				Web::AsyncDestroy("MAPMANAGER_MAPS");
			
				declare Folder = Event.CustomEventData[0];
				declare SMapInfoFilter Filter;
				declare JsonSuccess = Filter.fromjson(Event.CustomEventData[1]);
				UpdateLocalMaps(Folder, Filter);
			}
			case "MapList_ManiaExchange_Add": {
				declare MX::SMXSearchFilter Search;
				declare JsonSuccess = Search.fromjson(Event.CustomEventData[1]);
				Search.Page = Event.CustomEventData[0];
				Search.Limit = "20";
				if(!MX::AsyncSearch("MX_SEARCH_ADD", "tm", Search, True)) {
				
				}
			}
			case "MapList_ManiaExchange_Update": {				
				declare MX::SMXSearchFilter Search;
				declare JsonSuccess = Search.fromjson(Event.CustomEventData[1]);
				Search.Page = Event.CustomEventData[0];
				Search.Limit = "20";
				if(!MX::AsyncSearch("MX_SEARCH_UPDATE", "tm", Search, True)) {
				
				}
			}
			case "MapList_MapManager_Update": {
				MX::AsyncDestroy("MX_SEARCH_UPDATE");
				
				declare ManagerSearch = Event.CustomEventData[0];
				ManagerShowPrivate = Event.CustomEventData[1] == "True";
			
				declare Token = Menu_AuthBeta::GetAccess().Token;
				declare Successful = Web::AsyncMeMaps("MAPMANAGER_MAPS", Token);
			}
			case "ScriptList_Metadata": {
				declare SScriptInfo Info;
				declare JsonSuccess = Info.fromjson(Event.CustomEventData[0]);
				
				declare Text ScriptContent;
				
				if(Info.Type == "Official") ScriptContent = File::Read("Media/Challenges/"^Info.Name);
				
				declare LayerAPI = UILayerCreate();
				LayerAPI.ManialinkPage = Manialink::Construct("",File::Read("Media/API_Base.Script.txt")^"""
declare SChMetadata Script;

{{{Dictionary::TranslateAllPhrases(ScriptContent)}}}

"""^File::Read("Media/API_Main_Metadata.Script.txt"));
				
				LayerAPIs[Info.Name] = LayerAPI;
			}
			case "ScriptMetadata": {
				foreach(Name => API,LayerAPIs) {
					if(API == Event.CustomEventLayer) {
						declare SMetadata Metadata;
						declare JsonSuccess = Metadata.fromjson(Event.CustomEventData[0]);
						if(Metadata.AuthorLogin != "") {
							Layers::SendEvent("Quickplay", "ScriptList_Metadata_Response", [Name, Metadata.tojson()]);
						}
						UILayerDestroy(API);
						declare Removed = LayerAPIs.removekey(Name);
					}
				}
			}
			case "Nickname": {
				Nicknames::Submit(Event.CustomEventData[0]);
			}
			case "UpdateDownloaded": {
				Task::Async_DataFileMgr("DOWNLOADED_MAPUIDS",DataFileMgr.Map_GetFilteredGameList(Scope::C_BrowserScope, "Downloaded", True));
			}
			case "MapList_DestroyMapManager": {
				Web::AsyncDestroy("MAPMANAGER_MAPS");
			}
			case "MapList_Local_Refresh": {
				DataFileMgr.Map_RefreshFromDisk();
				Layers::SendEvent("Quickplay", "MapList_Local_Refresh_Response", []);
			}
			case "MapList_Local_QuickUid": {
				ManagerMapUid = Event.CustomEventData[0];
				Task::Async_DataFileMgr("QUICKUID_LOCAL",DataFileMgr.Map_GetFilteredGameList(Scope::C_BrowserScope, "", True));
			}
			case "MapList_ManiaExchange_QuickUid": {
				declare Successful = MX::AsyncTrack("MX_QUICKUID", "tm", Event.CustomEventData[0], True);
			}
			case "MapList_MapManager_QuickUid": {
				declare Successful = Web::AsyncMap("QUICKUID_MAPMANAGER", Event.CustomEventData[0]);
			}
		}
	}
}

Void Async() {
	Nicknames::Async();

	if(MX::AsyncIsCompleted("MX_SEARCH_ADD")) {
		if(MX::AsyncIsSuccessful("MX_SEARCH_ADD")) {
			Layers::SendEvent("Quickplay", "MapList_MX_Add", [MX::GetAsyncSearchResult("MX_SEARCH_ADD").tojson()]);
		}
		MX::AsyncDestroy("MX_SEARCH_ADD");
	}
	if(MX::AsyncIsCompleted("MX_SEARCH_UPDATE")) {
		if(MX::AsyncIsSuccessful("MX_SEARCH_UPDATE")) {
			Layers::SendEvent("Quickplay", "MapList_MX_Update", [MX::GetAsyncSearchResult("MX_SEARCH_UPDATE").tojson()]);
		}
		else {
			log("Can't load MX: " ^ MX::AsyncGetStatusCode("MX_SEARCH_UPDATE"));
		}
		MX::AsyncDestroy("MX_SEARCH_UPDATE");
	}
	if(MX::AsyncIsCompleted("MX_QUICKUID")) {
		if(MX::AsyncIsSuccessful("MX_QUICKUID")) {
			Layers::SendEvent("Quickplay", "MapList_ManiaExchange_QuickUid_Response", [MX::GetAsyncTrackResult("MX_QUICKUID").tojson()]);
		}
		else {
			log("Can't load MX: " ^ MX::AsyncGetStatusCode("MX_QUICKUID"));
		}
		MX::AsyncDestroy("MX_QUICKUID");
	}
	
	if(Task::IsCompleted("MAPLIST_LOCAL_FOLDER")) {
		if(Task::IsSuccessful("MAPLIST_LOCAL_FOLDER")) {
			declare MapList = (Task::Get("MAPLIST_LOCAL_FOLDER") as CTaskResult_MapList);
			
			declare Text[] SubFolders;
			
			declare SMapInfoFilter Filter;
			declare JsonSuccess = Filter.fromjson(Data::Get("MAPLIST_LOCAL_FILTER"));
			
			if(Filter.Name == "") {
				SubFolders.add("...");
				foreach(Folder,MapList.SubFolders) SubFolders.add(Folder);
			}
			
			declare Map::SMapInfo[] MapInfos;
			foreach(MapInfo,MapList.MapInfos) {
				if(Filter.Name != "")
					if(!TextLib::Find(Filter.Name, MapInfo.Name, False, False)) continue;
				if(Filter.Author != "")
					if(!TextLib::Find(Filter.Author, MapInfo.AuthorLogin ^ MapInfo.AuthorNickName, False, False)) continue;
			
				declare Map::SMapInfo Info;
				Info = Map::ToSMapInfo(MapInfo);
				MapInfos.add(Info);
			}
					
			Layers::SendEvent("Quickplay", "MapList_Local_Update", [MapList.Path,SubFolders.tojson(),MapInfos.tojson()]);
			Task::Destroy_DataFileMgr("MAPLIST_LOCAL_FOLDER");
		}
	}
	if(Task::IsCompleted("DOWNLOADED_MAPUIDS")) {
		if(Task::IsSuccessful("DOWNLOADED_MAPUIDS")) {
			declare MapList = (Task::Get("DOWNLOADED_MAPUIDS") as CTaskResult_MapList);
			DownloadedMapUids.clear();
			foreach(MapInfo,MapList.MapInfos)
				DownloadedMapUids.add(MapInfo.MapUid);
			Layers::SendEvent("Quickplay", "Downloaded_MapUids", [DownloadedMapUids.tojson()]);
			Task::Destroy_DataFileMgr("DOWNLOADED_MAPUIDS");
		}
	}
	if(Task::IsCompleted("QUICKUID_LOCAL")) {
		if(Task::IsSuccessful("QUICKUID_LOCAL")) {
			declare MapList = (Task::Get("QUICKUID_LOCAL") as CTaskResult_MapList);
			
			foreach(MapInfo,MapList.MapInfos)
				if(MapInfo.MapUid == ManagerMapUid)
					Layers::SendEvent("Quickplay", "MapList_Local_QuickUid_Response", [Map::ToSMapInfo(MapInfo).tojson()]);
			
			Task::Destroy_DataFileMgr("QUICKUID_LOCAL");
		}
	}
	
	if(Web::AsyncIsCompleted("MAPMANAGER_MAPS")) {
		if(Web::AsyncIsSuccessful("MAPMANAGER_MAPS")) {
			declare Maps = Web::GetAsyncMeMapsResult("MAPMANAGER_MAPS");
			declare Offset = 0;
			if(!ManagerShowPrivate) {
				for(i,0,Maps.count-1) {
					if(Maps.existskey(i))
					if(Maps[i].Private) {
						declare Removed = Maps.removekey(i-Offset);
						Offset += 1;
					}
				}
			}
			Layers::SendEvent("Quickplay", "MapManager_Maps", [Maps.tojson()]);
		}
		else {
			log("Map Manager HTTP error: "^Web::AsyncGetStatusCode("MAPMANAGER_MAPS"));
		}
		Web::AsyncDestroy("MAPMANAGER_MAPS");
	}
	if(Web::AsyncIsCompleted("QUICKUID_MAPMANAGER")) {
		if(Web::AsyncIsSuccessful("QUICKUID_MAPMANAGER")) {
			Layers::SendEvent("Quickplay", "MapList_MapManager_QuickUid_Response", [Web::GetAsyncMapResult("QUICKUID_MAPMANAGER").tojson()]);
		}
		else {
			log("Map Manager HTTP error: "^Web::AsyncGetStatusCode("QUICKUID_MAPMANAGER"));
		}
		Web::AsyncDestroy("QUICKUID_MAPMANAGER");
	}
}

Void Loop() {
	if(MapDownloadApproximateLocation != "") {
		if(!StartMapIfExists()) {
			if(!MapDownload) {
				switch(MapDownloadType) {
					case "mx": {
						OpenLink("""challenge:downloadmap?type=mx&id={{{MXTrack.TrackID}}}&displayname={{{MXTrack.GbxMapName}}}""", ::ELinkType::ManialinkBrowser);
					}
					case "manager": {
						OpenLink("""challenge:downloadmap?type=manager&id={{{MapDownloadUid}}}&displayname={{{ManagerTrack.Name}}}""", ::ELinkType::ManialinkBrowser);
					}
				}
				MapDownload = True;
			}
			if(MXTrack.MapType == "Challenge" && MapDownloadType == "mx") {
				declare List = Task::SyncMapList(DataFileMgr.Map_GetFilteredGameList(Scope::C_BrowserScope, MapDownloadApproximateLocation, True));
				foreach(MapInfo,List.MapInfos) {
					if(MapInfo.MapUid == MapDownloadUid) {
						wait(TitleFlow.IsReady);
						TitleFlow.PlayMap(MapInfo.FileName,"","");
						
						MapDownloadApproximateLocation = "";
						DataFileMgr.TaskResult_Release(List.Id);
						Task::Async_DataFileMgr("DOWNLOADED_MAPUIDS",DataFileMgr.Map_GetFilteredGameList(Scope::C_BrowserScope, "Downloaded", True));
						MapDownload = False;
					}
				}
				DataFileMgr.TaskResult_Release(List.Id);
			}
			else
				declare MustBeTrue = StartMapIfExists();
		}
	}
}