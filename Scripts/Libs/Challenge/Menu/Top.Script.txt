#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Map.Script.txt" as Map
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/Http.Script.txt" as Http

#Include "Libs/Challenge/Loading.Script.txt" as Loading
#Include "Libs/Challenge/LoadMap.Script.txt" as LoadMap

#Include "Libs/Challenge/Service/Status.Script.txt" as Service_Status

#Const C_Manialink "Media/Manialinks/Base/Top"

#Struct STaskMap {
	Text OriginalName;
	Text Uid;
	Text[] Challenge;
	Boolean Finished;
	Boolean[] Completed;
}

#Struct STasks {
	Integer Start;
	Integer Current;
	Integer End;
	STaskMap[] Maps;
}

Void Init() {
	Layers::Create("Top", Manialink::FromFile(C_Manialink, True, ["TextAnimation", "Audio"], Settings::Get().Theme));
	Layers::Create("Authors", Manialink::FromFile("Media/Manialinks/Base/Authors", True, ["TextAnimation", "Audio"], Settings::Get().Theme));
}

Void Start() {
	Layers::Show("Top", True);
	
	declare Text CHALLENGE_TOKEN for LocalUser;
	declare Success = Http::AsyncPOST("TASKS", Service_Status::LastStatus(LocalUser).Global.Service^"/tasks.php?title="^LoadedTitle.TitleId, CHALLENGE_TOKEN);
}

declare Boolean VisitMap;
declare Text VisitTaskMap;
declare Boolean Authorize;

Void Event(CManiaAppEvent _Event) {
	declare Event <=> _Event;

	if(Event.Type == CManiaAppEvent::EType::LayerCustomEvent) {
		switch(_Event.CustomEventLayer) {
			case Layers::Get("Top"): {
				switch(Event.CustomEventType) {
					case "Button_Skins": {
						VisitMap = True;
					}
					case "Button_Authorize": {
						Layers::Hide("Menu", True);
						Layers::Hide("Quickplay", True);
						Layers::Hide("Top", True);
						Layers::Hide("Playsessions", True);
						Layers::Hide("News", True);
						Layers::Show("AuthBeta", True);
					}
					case "Button_Authors": {
						Layers::Hide("Menu", True);
						Layers::Hide("Quickplay", True);
						Layers::Hide("Top", True);
						Layers::Hide("Playsessions", True);
						Layers::Hide("News", True);
						Layers::Show("Authors", True);
					}
					case "TasksRequestNew": {
						declare Text CHALLENGE_TOKEN for LocalUser;
						declare Success = Http::AsyncPOST("TASKS", Service_Status::LastStatus(LocalUser).Global.Service^"/tasks.php?title="^LoadedTitle.TitleId, CHALLENGE_TOKEN);
					}
					case "VisitTaskMap": {
						VisitTaskMap = Event.CustomEventData[0];
					}
				}
			}
			case Layers::Get("Authors"): {
				switch(Event.CustomEventType) {
					case "Button_Exit": {
						Layers::Show("Menu", True);
						Layers::Show("Quickplay", True);
						Layers::Show("Top", True);
						Layers::Show("Playsessions", True);
						Layers::Show("News", True);
						Layers::Hide("Authors", False);
					}
				}
			}
		}
	}
}

Void Async() {
	if(Http::IsCompleted("TASKS")) {
		if(Http::IsSuccessful("TASKS")) {
			declare STasks Tasks for Layers::Page("Top");
			declare Json = Tasks.fromjson(Http::GetResult("TASKS"));
			Layers::SendEvent("Top", "TaskStartCountTime");
		}
		else {
			Layers::SendEvent("Top", "TasksError", Http::GetStatusCode("TASKS"));
		}
		Http::Destroy("TASKS");
	}
}

Void Loop() {
	if(VisitMap) {
		LoadMap::Play(Map::FromFileName("THE SKIN SELECT.Map.Gbx"), "TrackMania/SkinSelect.Script.txt");
		VisitMap = False;
	}
	if(VisitTaskMap != "") {
		LoadMap::Play(Map::FromUid(VisitTaskMap), "Modes/TrackMania/ChallengeSolo.Script.txt");
		VisitTaskMap = "";
	}
}