#Include "TextLib" as TextLib

#Include "Libs/BigBang1112/Map.Script.txt" as Map

#Include "Libs/Challenge/ModifierBase.Script.txt" as ModifierBase

#Struct SChallengeBlock {
	Boolean Placed;
	CBlock Block;
	CMacroblockInstance Macroblock;
	CAnchorData[] Anchors;
	Text Waypoint;
}

Int3 ToInt3(Text _Text) {
	declare Txt = TextLib::Replace(_Text,",","");
	Txt = TextLib::Replace(Txt,"<","");
	Txt = TextLib::Replace(Txt,">","");
	declare Txts = TextLib::Split(" ",Txt);
	
	return <TextLib::ToInteger(Txts[0]),TextLib::ToInteger(Txts[1]),TextLib::ToInteger(Txts[2])>;
}

Text GetBlockNameFromMacroblockName(Text _Name) {
	declare Separate = TextLib::Split("-",_Name);
	declare Removed = Separate.removekey(Separate.count-1);
	return TextLib::Join("-",Separate);
}

CMapEditorPlugin::CardinalDirections ToDirectionMap(Text _Direction) {
	switch(_Direction) {
		case "North": { return CMapEditorPlugin::CardinalDirections::North; }
		case "South": { return CMapEditorPlugin::CardinalDirections::South; }
		case "West": { return CMapEditorPlugin::CardinalDirections::West; }
		case "East": { return CMapEditorPlugin::CardinalDirections::East; }
	}
	return CMapEditorPlugin::CardinalDirections::North;
}

CMapEditorPlugin::CardinalDirections ToDirectionMap(CBlock::CardinalDirections _Direction) {
	switch(_Direction) {
		case CBlock::CardinalDirections::North: { return CMapEditorPlugin::CardinalDirections::North; }
		case CBlock::CardinalDirections::South: { return CMapEditorPlugin::CardinalDirections::South; }
		case CBlock::CardinalDirections::West: { return CMapEditorPlugin::CardinalDirections::West; }
		case CBlock::CardinalDirections::East: { return CMapEditorPlugin::CardinalDirections::East; }
	}
	return CMapEditorPlugin::CardinalDirections::North;
}

CBlock::CardinalDirections ToDirectionBlock(Text _Direction) {
	switch(_Direction) {
		case "North": { return CBlock::CardinalDirections::North; }
		case "South": { return CBlock::CardinalDirections::South; }
		case "West": { return CBlock::CardinalDirections::West; }
		case "East": { return CBlock::CardinalDirections::East; }
	}
	return CBlock::CardinalDirections::North;
}

CBlock::CardinalDirections ToDirectionBlock(CMapEditorPlugin::CardinalDirections _Direction) {
	switch(_Direction) {
		case CMapEditorPlugin::CardinalDirections::North: { return CBlock::CardinalDirections::North; }
		case CMapEditorPlugin::CardinalDirections::South: { return CBlock::CardinalDirections::South; }
		case CMapEditorPlugin::CardinalDirections::West: { return CBlock::CardinalDirections::West; }
		case CMapEditorPlugin::CardinalDirections::East: { return CBlock::CardinalDirections::East; }
	}
	return CBlock::CardinalDirections::North;
}

Text ToText(CMapEditorPlugin::CardinalDirections _Direction) {
	switch(_Direction) {
		case CMapEditorPlugin::CardinalDirections::North: { return "North"; }
		case CMapEditorPlugin::CardinalDirections::South: { return "South"; }
		case CMapEditorPlugin::CardinalDirections::West: { return "West"; }
		case CMapEditorPlugin::CardinalDirections::East: { return "East"; }
	}
	return "";
}

Text ToText(CBlock::CardinalDirections _Direction) {
	switch(_Direction) {
		case CBlock::CardinalDirections::North: { return "North"; }
		case CBlock::CardinalDirections::South: { return "South"; }
		case CBlock::CardinalDirections::West: { return "West"; }
		case CBlock::CardinalDirections::East: { return "East"; }
	}
	return "";
}

ModifierBase::SChBlock ToSChBlock(CBlock _Block) {
	declare ModifierBase::SChBlock ChBlock;
	if(_Block == Null) return ChBlock;
	
	ChBlock.Id = _Block.Id^"";
	ChBlock.Name = _Block.BlockModel.Name;
	ChBlock.Coord = _Block.Coord;
	ChBlock.Direction = ToText(_Block.Direction);
	
	switch(_Block.BlockModel.WaypointType) {
		case CBlockModel::EWayPointType::Start: { ChBlock.Waypoint = "Start"; }
		case CBlockModel::EWayPointType::Finish: { ChBlock.Waypoint = "Finish"; }
		case CBlockModel::EWayPointType::Checkpoint: { ChBlock.Waypoint = "Checkpoint"; }
		case CBlockModel::EWayPointType::None: { ChBlock.Waypoint = "None"; }
		case CBlockModel::EWayPointType::StartFinish: { ChBlock.Waypoint = "Multilap"; }
		case CBlockModel::EWayPointType::Dispenser: { ChBlock.Waypoint = "Dispenser"; }
	}
	
	ChBlock.IsRoad = _Block.BlockModel.IsRoad;
	ChBlock.IsTerrain = _Block.BlockModel.IsTerrain;
	ChBlock.IsPodium = _Block.BlockModel.IsPodium;
	
	return ChBlock;
}

ModifierBase::SChAnchor ToSChAnchor(CAnchorData _Anchor) {
	declare ModifierBase::SChAnchor ChAnchor;
	if(_Anchor == Null) return ChAnchor;
	
	ChAnchor.Id = _Anchor.Id^"";
	ChAnchor.DefaultTag = _Anchor.DefaultTag;
	ChAnchor.DefaultOrder = _Anchor.DefaultOrder;
	ChAnchor.Tag = _Anchor.Tag;
	ChAnchor.Order = _Anchor.Order;
	
	return ChAnchor;
}

ModifierBase::SChBlock ToSChBlock(SChallengeBlock _Block) {
	declare ModifierBase::SChBlock ChBlock;

	if(_Block.Block != Null) {
		ChBlock.Id = _Block.Block.Id^"";
		ChBlock.Name = _Block.Block.BlockModel.Name;
		ChBlock.Coord = _Block.Block.Coord;
		ChBlock.Direction = ToText(_Block.Block.Direction);
		ChBlock.Waypoint = _Block.Waypoint;
		
		ChBlock.IsRoad = _Block.Block.BlockModel.IsRoad;
		ChBlock.IsTerrain = _Block.Block.BlockModel.IsTerrain;
		ChBlock.IsPodium = _Block.Block.BlockModel.IsPodium;

		foreach(Anchor,_Block.Anchors)
			ChBlock.Anchors.add(ToSChAnchor(Anchor));
	}
	else {
		ChBlock.Id = _Block.Macroblock.Id^"";
		ChBlock.Name = GetBlockNameFromMacroblockName(_Block.Macroblock.MacroblockModel.Name);
		ChBlock.Coord = _Block.Macroblock.Coord;
		ChBlock.Direction = ToText(_Block.Macroblock.Dir);
		ChBlock.Waypoint = _Block.Waypoint;
		ChBlock.IsSpecial = True;

		foreach(Anchor,_Block.Anchors)
			ChBlock.Anchors.add(ToSChAnchor(Anchor));
	}
	
	return ChBlock;
}

ModifierBase::SChItem ToSChItem(CAnchorData _Anchor) {
	declare ModifierBase::SChItem ChItem;
	if(_Anchor == Null || _Anchor.Item == Null) return ChItem;

	ChItem.Position = _Anchor.Item.Position;
	ChItem.Anchor = ToSChAnchor(_Anchor);
	
	return ChItem;
}

ModifierBase::SChItem ToSChItem(CItemAnchor _Item) {
	declare ModifierBase::SChItem ChItem;
	if(_Item == Null) return ChItem;

	ChItem.Position = _Item.Position;
	return ChItem;
}

ModifierBase::SChMap ToSChMap(CMapInfo _MapInfo) {
	declare ModifierBase::SChMap ChMap;
	declare JsonSuccess = ChMap.fromjson(Map::ToSMapInfo(_MapInfo).tojson());
	return ChMap;
}

ModifierBase::SChMap ToSChMap(CMap _Map) {
	declare ModifierBase::SChMap ChMap;
	ChMap.MapUid = _Map.MapInfo.MapUid;
	ChMap.Comments = _Map.Comments;
	ChMap.CopperPrice = _Map.CopperPrice;
	ChMap.CollectionName = _Map.CollectionName;
	ChMap.AuthorLogin = _Map.AuthorLogin;
	ChMap.AuthorNickName = _Map.AuthorNickName;
	ChMap.AuthorZonePath = _Map.AuthorZonePath;
	ChMap.AuthorZoneFlagUrl = _Map.MapInfo.AuthorZoneFlagUrl;
	ChMap.AuthorCountryFlagUrl = _Map.MapInfo.AuthorCountryFlagUrl;
	ChMap.MapType = _Map.MapType;
	ChMap.MapStyle = _Map.MapStyle;
	ChMap.Unlocked = _Map.MapInfo.Unlocked;
	ChMap.IsPlayable = _Map.MapInfo.IsPlayable;
	ChMap.CreatedWithSimpleEditor = _Map.MapInfo.CreatedWithSimpleEditor;
	ChMap.CreatedWithPartyEditor = _Map.MapInfo.CreatedWithPartyEditor;
	ChMap.TMObjective_AuthorTime = _Map.TMObjective_AuthorTime;
	ChMap.TMObjective_GoldTime = _Map.TMObjective_GoldTime;
	ChMap.TMObjective_SilverTime = _Map.TMObjective_SilverTime;
	ChMap.TMObjective_BronzeTime = _Map.TMObjective_BronzeTime;
	ChMap.TMObjective_NbLaps = _Map.TMObjective_NbLaps;
	ChMap.TMObjective_IsLapRace = _Map.TMObjective_IsLapRace;
	ChMap.Name = _Map.MapName;
	ChMap.Path = _Map.MapInfo.Path;
	ChMap.FileName = _Map.MapInfo.FileName;
	return ChMap;
}

Boolean ToBoolean(Text _Boolean) {
	return _Boolean == "True";
}

Boolean SChBlockEquals(ModifierBase::SChBlock _ChBlock, CBlock _Block) {
	if(_Block == Null) return False;
	
	if(_ChBlock.Id != _Block.Id^"") return False;
	if(_ChBlock.Name != _Block.BlockModel.Name) return False;
	if(_ChBlock.Coord != _Block.Coord) return False;
	if(_ChBlock.Direction != ToText(_Block.Direction)) return False;
	
	declare Text Waypoint;
	switch(_Block.BlockModel.WaypointType) {
		case CBlockModel::EWayPointType::Start: { Waypoint = "Start"; }
		case CBlockModel::EWayPointType::Finish: { Waypoint = "Finish"; }
		case CBlockModel::EWayPointType::Checkpoint: { Waypoint = "Checkpoint"; }
		case CBlockModel::EWayPointType::None: { Waypoint = "None"; }
		case CBlockModel::EWayPointType::StartFinish: { Waypoint = "Multilap"; }
		case CBlockModel::EWayPointType::Dispenser: { Waypoint = "Dispenser"; }
	}
	
	if(_ChBlock.Waypoint != Waypoint) return False;
	
	if(_ChBlock.IsRoad != _Block.BlockModel.IsRoad) return False;
	if(_ChBlock.IsTerrain != _Block.BlockModel.IsTerrain) return False;
	if(_ChBlock.IsPodium != _Block.BlockModel.IsPodium) return False;
	
	return True;
}

Boolean SChItemEquals(ModifierBase::SChItem _ChAnchor, CItemAnchor _Item) {
	if(_Item == Null) return False;
	return _ChAnchor.Position == _Item.Position;
}

Boolean SChAnchorEquals(ModifierBase::SChAnchor _ChAnchor, CAnchorData _Anchor) {
	if(_Anchor == Null) return False;
	return _Anchor.Id^"" == _ChAnchor.Id;
}

Boolean SetCAnchorData(CAnchorData _Anchor, ModifierBase::SChAnchor _ChAnchor) {
	if(_Anchor == Null) return False;
	if(_Anchor.Id^"" != _ChAnchor.Id) return False;
	
	_Anchor.Tag = _ChAnchor.Tag;
	_Anchor.Order = _ChAnchor.Order;
	return True;
}