#Include "TextLib" as TextLib
#Include "MapUnits" as MapUnits

#Include "Libs/BigBang1112/Layers.Script.txt" as Layers

#Include "Libs/Challenge/ModifierBase.Script.txt" as ModifierBase
#Include "Libs/Challenge/Conversion.Script.txt" as Conversion

#Struct SPlaceBlockResult {
	Boolean Placed;
	CBlock Block;
	CMacroblockInstance SpecialBlock;
	Boolean IsAnchor;
	Ident Anchor;
}

Text GetVariant(Int3 _Coord) {
	declare Variant = "Air";
	if(GetGroundHeight(_Coord.X, _Coord.Z) == _Coord.Y) {
		Variant = "Ground";
		declare Block = GetBlock(_Coord);
		if(Block != Null) {
			if(Block.BlockModel.Name == "Forest") Variant = "Forest";
		}
	}
	return Variant;
}

Boolean SafeRemoveBlock(CBlock _Block) {
	if(_Block == Null) return False;
	if(GetBlock(_Block.Coord) == Null) return False;
	
	if(GetBlock(_Block.Coord).BlockScriptId == _Block.BlockScriptId) 
		return RemoveBlock(_Block.Coord);
	return False;
}

Boolean SafeRemoveBlock(ModifierBase::SChBlock _ChBlock) {
	for(i,0,Blocks.count-1)
		if(Blocks[i].BlockScriptId == _ChBlock.Id) return SafeRemoveBlock(Blocks[i]);
	return False;
}

SPlaceBlockResult PlaceBlockSpecial(Text _BlockModelName, Int3 _Coord, ::CardinalDirections _Direction) {
	declare SPlaceBlockResult Result;

	declare BlockModel = GetBlockModelFromName(_BlockModelName);
	if(BlockModel == Null) {
		declare MacroblockModel = GetMacroblockModelFromFilePath("""{{{Map.CollectionName}}}\{{{_BlockModelName}}}-{{{GetVariant(_Coord)}}}.Macroblock.Gbx""");
		if(MacroblockModel == Null) return Result;
		Result.Placed = PlaceMacroblock(MacroblockModel, _Coord, _Direction);
		Result.SpecialBlock = GetMacroblockInstanceFromUnitCoord(_Coord);
		return Result;
	}
	Result.Placed = PlaceBlock(BlockModel, _Coord, _Direction);
	if(Result.Placed) {
		yield; //Required so that AnchorData actually updates, thanks Nadeo
		Result.Block = GetBlock(_Coord);
		foreach(Anchor, AnchorData) {
			if(Anchor.Block != Null && Result.Block != Null)
			if(Anchor.Block.BlockScriptId == Result.Block.BlockScriptId) {
				Result.IsAnchor = True;
				Result.Anchor = Anchor.Id;
			}
		}
	}
	return Result;
}

Integer GetNewOrder() {
	declare Integer[] UsedOrders;
	foreach(Anchor,AnchorData)
		if(!UsedOrders.exists(Anchor.Order))
			UsedOrders.add(Anchor.Order);
	
	declare NewOrder = 0;
	while(UsedOrders.exists(NewOrder)) {
		NewOrder+=1;
	}
	return NewOrder;
}

Void Respond(CUILayer _LayerAPI, Text _Type, Text[] _Data) {
	LayerCustomEvent(_LayerAPI, _Type^"_Response", _Data);
}

Boolean Command(CUILayer _LayerAPI, Text _Type, Text[] _Data) {
	switch(_Type) {
		case "Ch_ComputeShadows": {
			ComputeShadows();
			wait(CurrentShadowsQuality == ::ShadowsQuality::VeryFast);
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_RemoveAllBlocks": {
			RemoveAllBlocks();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_RemoveAllTerrain": {
			RemoveAllTerrain();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_RemoveAllOffZone": {
			RemoveAllOffZone();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_RemoveAllObjects": {
			RemoveAllObjects();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_RemoveAll": {
			RemoveAll();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_RemoveAllBlocksAndTerrain": {
			RemoveAllBlocksAndTerrain();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_PreloadAllBlocks": {
			PreloadAllBlocks();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_PreloadAllItems": {
			PreloadAllItems();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_CanPlaceBlock": {
			declare BlockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);
			declare OnGround = Conversion::ToBoolean(_Data[3]);
			declare VariantIndex = TextLib::ToInteger(_Data[4]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceBlock(BlockModel, Coord, Direction, OnGround, VariantIndex);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_CanPlaceBlock_NoDestruction": {
			declare BlockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);
			declare OnGround = Conversion::ToBoolean(_Data[3]);
			declare VariantIndex = TextLib::ToInteger(_Data[4]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceBlock_NoDestruction(BlockModel, Coord, Direction, OnGround, VariantIndex);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_PlaceBlock": {
			declare BlockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare Response = PlaceBlockSpecial(BlockName, Coord, Direction);
			declare IsSpecial = Response.SpecialBlock != Null;
			declare ModifierBase::SPlaceBlockResult Result;
			Result.Placed = Response.Placed;
			Result.Block = Conversion::ToSChBlock(Response.Block);
			Result.IsAnchor = Response.IsAnchor;
			foreach(Anchor, AnchorData)
				if(Anchor.Id == Response.Anchor)
					Result.Anchor = Conversion::ToSChAnchor(Anchor);
			Respond(_LayerAPI, _Type, [Result.tojson()]);
		}
		case "Ch_PlaceBlock_NoDestruction": {
			declare BlockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare Response = PlaceBlockSpecial(BlockName, Coord, Direction);
			declare IsSpecial = Response.SpecialBlock != Null;
			declare ModifierBase::SPlaceBlockResult Result;
			Result.Placed = Response.Placed;
			Result.Block = Conversion::ToSChBlock(Response.Block);
			Result.IsAnchor = Response.IsAnchor;
			foreach(Anchor, AnchorData)
				if(Anchor.Id == Response.Anchor)
					Result.Anchor = Conversion::ToSChAnchor(Anchor);
			Respond(_LayerAPI, _Type, [Result.tojson()]);
		}
		case "Ch_CanPlaceRoadBlocks": {
			declare BlockName = _Data[0];
			declare StartCoord = Conversion::ToInt3(_Data[1]);
			declare EndCoord = Conversion::ToInt3(_Data[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceRoadBlocks(BlockModel, StartCoord, EndCoord);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_PlaceRoadBlocks": {
			declare BlockName = _Data[0];
			declare StartCoord = Conversion::ToInt3(_Data[1]);
			declare EndCoord = Conversion::ToInt3(_Data[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceRoadBlocks(BlockModel, StartCoord, EndCoord);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_CanPlaceTerrainBlocks": {
			declare BlockName = _Data[0];
			declare StartCoord = Conversion::ToInt3(_Data[1]);
			declare EndCoord = Conversion::ToInt3(_Data[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceTerrainBlocks(BlockModel, StartCoord, EndCoord);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_PlaceTerrainBlocks": {
			declare BlockName = _Data[0];
			declare StartCoord = Conversion::ToInt3(_Data[1]);
			declare EndCoord = Conversion::ToInt3(_Data[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceTerrainBlocks(BlockModel, StartCoord, EndCoord);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_PlaceTerrainBlocks_NoDestruction": {
			declare BlockName = _Data[0];
			declare StartCoord = Conversion::ToInt3(_Data[1]);
			declare EndCoord = Conversion::ToInt3(_Data[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceTerrainBlocks_NoDestruction(BlockModel, StartCoord, EndCoord);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_PlaceMacroblock": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock_NoDestruction": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock_NoDestruction(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_PlaceMacroblock_NoDestruction": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock_NoDestruction(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock_NoTerrain": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_PlaceMacroblock_NoTerrain": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_RemoveMacroblock": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = RemoveMacroblock(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_RemoveMacroblock_NoTerrain": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = RemoveMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_GetBlock": {
			declare Coord = Conversion::ToInt3(_Data[0]);

			declare Response = GetBlock(Coord);
			declare Block = Conversion::ToSChBlock(Response);

			Respond(_LayerAPI, _Type, [Block.tojson()]);
		}
		case "Ch_RemoveBlock": {
			declare Coord = Conversion::ToInt3(_Data[0]);

			declare Response = RemoveBlock(Coord);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_RemoveTerrainBlocks": {
			declare StartCoord = Conversion::ToInt3(_Data[0]);
			declare EndCoord = Conversion::ToInt3(_Data[1]);

			declare Response = RemoveTerrainBlocks(StartCoord,EndCoord);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_GetBlockGroundHeight": {
			declare BlockName = _Data[0];
			declare CoordX = TextLib::ToInteger(_Data[1]);
			declare CoordY = TextLib::ToInteger(_Data[2]);
			declare Direction = Conversion::ToDirectionMap(_Data[3]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = GetBlockGroundHeight(BlockModel,CoordX,CoordY,Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_GetGroundHeight": {
			declare CoordX = TextLib::ToInteger(_Data[0]);
			declare CoordY = TextLib::ToInteger(_Data[1]);

			declare Response = GetGroundHeight(CoordX,CoordY);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_GetStartLineBlock": {
			declare Block = GetStartLineBlock();
			declare Response = Conversion::ToSChBlock(Block);
			Respond(_LayerAPI, _Type, [Response.tojson()]);
		}
		case "Ch_GetBlocks": {
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, Blocks) ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(_LayerAPI, _Type, [ChBlocks.tojson()]);
		}
		case "Ch_GetAnchorData": {
			declare ModifierBase::SChAnchor[] Anchor;
			foreach(Data, AnchorData) Anchor.add(Conversion::ToSChAnchor(Data));
			Respond(_LayerAPI, _Type, [Anchor.tojson()]);
		}
		case "Ch_RemoveAnchor": {
			declare ModifierBase::SChAnchor ChAnchor;
			declare JsonSuccess = ChAnchor.fromjson(_Data[0]);
			declare Boolean Removed;
			for(i,0,AnchorData.count-1) {
				if(AnchorData.existskey(i)) {
					declare Data <=> AnchorData[i];
					if(Conversion::SChAnchorEquals(ChAnchor, Data)) {
						if(ChAnchor.IsItem) Removed = RemoveItem(Data);
						if(ChAnchor.IsBlock) Removed = SafeRemoveBlock(Data.Block);
					}
				}
			}
			Respond(_LayerAPI, _Type, [Removed^""]);
		}
		
		case "Ch_RemoveAnchorItem": {
			declare ModifierBase::SChAnchorItem ChAnchor;
			declare JsonSuccess = ChAnchor.fromjson(_Data[0]);
			declare Boolean Removed;
			
			for(i,0,AnchorData.count-1) {
				if(AnchorData.existskey(i)) {
					declare Data <=> AnchorData[i];
					if(Conversion::SChAnchorItemEquals(ChAnchor, Data)) {
						Removed = RemoveItem(Data);
					}
				}
			}
			
			Respond(_LayerAPI, _Type, [Removed^""]);
		}
		case "Ch_RemoveAnchorBlock": {
			declare ModifierBase::SChAnchorBlock ChAnchor;
			declare JsonSuccess = ChAnchor.fromjson(_Data[0]);
			declare Boolean Removed;
			
			for(i,0,AnchorData.count-1) {
				if(AnchorData.existskey(i)) {
					declare Data <=> AnchorData[i];
					if(Conversion::SChAnchorBlockEquals(ChAnchor, Data)) {
						Removed = SafeRemoveBlock(Data.Block);
					}
				}
			}
			
			Respond(_LayerAPI, _Type, [Removed^""]);
		}
		case "Ch_GetMapInfo": {
			Respond(_LayerAPI, _Type, [Conversion::ToSChMap(Map.MapInfo).tojson()]);
		}
		case "Ch_GetOriginalMapInfo": {
			declare metadata ModifierBase::SChMap OriginalMap for Map;
			Respond(_LayerAPI, _Type, [OriginalMap.tojson()]);
		}
		case "Ch_Underground": {
			UndergroundMode = True;
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_Aboveground": {
			UndergroundMode = False;
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_PlaceGhostBlock": {
			declare BlockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare Variant = GetVariant(Coord);
			
			declare MacroblockModel = GetMacroblockModelFromFilePath("""{{{Map.CollectionName}}}\Ghost\{{{BlockName}}}-{{{Variant}}}-Ghost.Macroblock.Gbx""");
			declare Response = PlaceMacroblock(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_ReplaceBlock": {
			declare ModifierBase::SChBlock Block;
			declare JsonSuccess = Block.fromjson(_Data[0]);
			declare Replacement = _Data[1];
			declare OppositeDirection = Conversion::ToBoolean(_Data[2]);
			
			declare Direction = Conversion::ToDirectionMap(Block.Direction);
			declare Coord = Block.Coord;
			if(OppositeDirection) Direction = MapUnits::GetOpposedDir(Direction);
			
			declare Removed = SafeRemoveBlock(Block);
			declare Placed = PlaceBlockSpecial(Replacement, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Removed, ""^Placed.Placed]);
		}
		case "Ch_ReplaceAllBlocks": {
			declare BlockName = _Data[0];
			declare Replacement = _Data[1];

			foreach(Block, Blocks) {
				if(Block.BlockModel.Name == BlockName) {
					declare Direction = Conversion::ToDirectionMap(Block.Direction);
					declare Coord = Block.Coord;
			
					declare Removed = RemoveBlock(Coord);
					declare Placed = PlaceBlockSpecial(Replacement, Coord, Direction);
				}
			}

			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_SwapBlock": {
			declare ModifierBase::SChBlock Block1;
			declare JsonSuccessBlock1 = Block1.fromjson(_Data[0]);
			declare ModifierBase::SChBlock Block2;
			declare JsonSuccessBlock2 = Block2.fromjson(_Data[1]);

			declare RemovedBlock1 = RemoveBlock(Block1.Coord);
			declare RemovedBlock2 = RemoveBlock(Block2.Coord);

			declare PlacedBlock1 = PlaceBlockSpecial(Block2.Name, Block1.Coord, Conversion::ToDirectionMap(Block1.Direction));
			declare PlacedBlock2 = PlaceBlockSpecial(Block1.Name, Block2.Coord, Conversion::ToDirectionMap(Block2.Direction));

			Respond(_LayerAPI, _Type, [""^(RemovedBlock1 && RemovedBlock2 && PlacedBlock1.Placed && PlacedBlock2.Placed)]);
		}
		case "Ch_GetStartLines": {
			declare ModifierBase::SChAnchor[] ChAnchors;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Spawn")
					ChAnchors.add(Conversion::ToSChAnchor(Anchor));
			Respond(_LayerAPI, _Type, [ChAnchors.tojson()]);
		}
		case "Ch_GetFinishLines": {
			declare ModifierBase::SChAnchor[] ChAnchors;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Goal")
					ChAnchors.add(Conversion::ToSChAnchor(Anchor));
			Respond(_LayerAPI, _Type, [ChAnchors.tojson()]);
		}
		case "Ch_GetCheckpoints": {
			declare ModifierBase::SChAnchor[] ChAnchors;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Checkpoint")
					ChAnchors.add(Conversion::ToSChAnchor(Anchor));
			Respond(_LayerAPI, _Type, [ChAnchors.tojson()]);
		}
		case "Ch_GetMultilaps": {
			declare ModifierBase::SChAnchor[] ChAnchors;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "StartFinish")
					ChAnchors.add(Conversion::ToSChAnchor(Anchor));
			Respond(_LayerAPI, _Type, [ChAnchors.tojson()]);
		}
		case "Ch_GetStartLineBlocks": {
			declare ModifierBase::SChAnchorBlock[] ChBlocks;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Spawn" && Anchor.Block != Null)
					ChBlocks.add(Conversion::ToSChAnchorBlock(Anchor));
			Respond(_LayerAPI, _Type, [ChBlocks.tojson()]);
		}
		case "Ch_GetFinishLineBlocks": {
			declare ModifierBase::SChAnchorBlock[] ChBlocks;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Goal" && Anchor.Block != Null)
					ChBlocks.add(Conversion::ToSChAnchorBlock(Anchor));
			Respond(_LayerAPI, _Type, [ChBlocks.tojson()]);
		}
		case "Ch_GetCheckpointBlocks": {
			declare ModifierBase::SChAnchorBlock[] ChBlocks;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Checkpoint" && Anchor.Block != Null)
					ChBlocks.add(Conversion::ToSChAnchorBlock(Anchor));
			Respond(_LayerAPI, _Type, [ChBlocks.tojson()]);
		}
		case "Ch_GetMultilapBlocks": {
			declare ModifierBase::SChAnchorBlock[] ChBlocks;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "StartFinish" && Anchor.Block != Null)
					ChBlocks.add(Conversion::ToSChAnchorBlock(Anchor));
			Respond(_LayerAPI, _Type, [ChBlocks.tojson()]);
		}
		case "Ch_GetBlocksByBlockName": {
			declare BlockName = _Data[0];
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, Blocks)
				if(Block.BlockModel.Name == BlockName)
					ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(_LayerAPI, _Type, [ChBlocks.tojson()]);
		}
		case "Ch_MultipleBlocks": {
			declare Coord = Conversion::ToInt3(_Data[0]);
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, Blocks)
				if(Block.Coord == Coord)
					ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(_LayerAPI, _Type, [ChBlocks.tojson()]);
		}
		case "Ch_GetStartLineItems": {
			declare ModifierBase::SChAnchorItem[] ChItems;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Spawn" && Anchor.Item != Null)
					ChItems.add(Conversion::ToSChAnchorItem(Anchor));
			Respond(_LayerAPI, _Type, [ChItems.tojson()]);
		}
		case "Ch_GetCheckpointItems": {
			declare ModifierBase::SChAnchorItem[] ChItems;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Checkpoint" && Anchor.Item != Null)
					ChItems.add(Conversion::ToSChAnchorItem(Anchor));
			Respond(_LayerAPI, _Type, [ChItems.tojson()]);
		}
		case "Ch_GetFinishLineItems": {
			declare ModifierBase::SChAnchorItem[] ChItems;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Goal" && Anchor.Item != Null)
					ChItems.add(Conversion::ToSChAnchorItem(Anchor));
			Respond(_LayerAPI, _Type, [ChItems.tojson()]);
		}
		case "Ch_GetMultilapItems": {
			declare ModifierBase::SChAnchorItem[] ChItems;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "StartFinish" && Anchor.Item != Null)
					ChItems.add(Conversion::ToSChAnchorItem(Anchor));
			Respond(_LayerAPI, _Type, [ChItems.tojson()]);
		}
		case "Ch_UpdateAnchor": {
			declare ModifierBase::SChAnchor ChAnchor;
			declare JsonSuccess = ChAnchor.fromjson(_Data[0]);
			foreach(Anchor, AnchorData)
				if(Anchor.Id^"" == ChAnchor.Id)
					declare Success = Conversion::SetCAnchorData(Anchor, ChAnchor);
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_LinkCheckpoints": {
			declare ModifierBase::SChAnchor[] ChAnchors;
			declare JsonSuccess = ChAnchors.fromjson(_Data[0]);
			declare Order = GetNewOrder();
			foreach(Anchor, AnchorData) {
				foreach(ChAnchor, ChAnchors) {
					if(Anchor.Id^"" == ChAnchor.Id) {
						if(Anchor.DefaultTag == "Checkpoint") {
							Anchor.Tag = "LinkedCheckpoint";
							Anchor.Order = Order;
						}
					}
				}
			}
			
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_Problem": {
			declare ModifierBase::SChProblem Problem;
			declare JsonSuccess = Problem.fromjson(_Data[0]);
			declare metadata ModifierBase::SChProblem[] Problems for Map;
			Problems.add(Problem);
			if(Problem.Solutions.count == 0) return False;
			else Respond(_LayerAPI, _Type, []);
		}
		case "Ch_Message": {
			Dialog_Message(_Data[0]);
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_SetStatusProgress": {
			Layers::SendEvent("ModifierStatus", "Progress", [_Data[0]]);
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_SetStatusMessage": {
			Layers::SendEvent("ModifierStatus", "Message", [_Data[0]]);
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_SetStatusColor": {
			Layers::SendEvent("ModifierStatus", "Color", [_Data[0]]);
			Respond(_LayerAPI, _Type, []);
		}
		default: {
			log("Unknown request: "^_Type);
			Respond(_LayerAPI, _Type, ["False"]);
		}
	}
	
	return True;
}