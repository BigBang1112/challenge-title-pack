#Include "TextLib" as TextLib
#Include "MapUnits" as MapUnits

#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/File.Script.txt" as File

#Include "Libs/Challenge/ModifierBase.Script.txt" as ModifierBase
#Include "Libs/Challenge/Conversion.Script.txt" as Conversion

Text GetVariant(Int3 _Coord) {
	declare Variant = "Air";
	if(GetGroundHeight(_Coord.X, _Coord.Z) == _Coord.Y) {
		Variant = "Ground";
		declare Block = GetBlock(_Coord);
		if(Block != Null) {
			if(Block.BlockModel.Name == "Forest") Variant = "Forest";
		}
	}
	return Variant;
}

ModifierBase::SChallengeBlock[] GetBlocks() {
	declare ModifierBase::SChallengeBlock[] ChallengeBlocks;

	declare ModifierBase::SChWaypoints Waypoints;
	declare JsonSuccess = Waypoints.fromjson(File::Read("Media/Waypoints.json"));
	declare Int3[] Coords;

	foreach(Instance, MacroblockInstances) {
		declare ModifierBase::SChallengeBlock Block;
		Block.Placed = True;
		Block.Macroblock = Instance;
		Coords.add(Instance.Coord);
		foreach(Anchor, AnchorData)
			if(Anchor.Block != Null)
				if(Anchor.Block.Coord == Instance.Coord)
					Block.Anchors.add(Anchor);
		
		declare IsStart = Waypoints.Starts.exists(Conversion::GetBlockNameFromMacroblockName(Instance.MacroblockModel.Name));
		declare IsCheckpoint = Waypoints.Checkpoints.exists(Conversion::GetBlockNameFromMacroblockName(Instance.MacroblockModel.Name));
		declare IsFinish = Waypoints.Finishes.exists(Conversion::GetBlockNameFromMacroblockName(Instance.MacroblockModel.Name));
		declare IsMultilap = Waypoints.Multilaps.exists(Conversion::GetBlockNameFromMacroblockName(Instance.MacroblockModel.Name));

		if(IsStart) Block.Waypoint = "Start";
		if(IsCheckpoint) Block.Waypoint = "Checkpoint";
		if(IsFinish) Block.Waypoint = "Finish";
		if(IsMultilap) Block.Waypoint = "Multilap";
		
		ChallengeBlocks.add(Block);
	}

	foreach(Block, Blocks) {
		if(Block != Null && !Coords.exists(Block.Coord)) {
			declare ModifierBase::SChallengeBlock ChBlock;
			ChBlock.Placed = True;
			ChBlock.Block <=> Block;

			foreach(Anchor, AnchorData)
				if(Anchor.Block != Null)
					if(Anchor.Block.Id == Block.Id)
						ChBlock.Anchors.add(Anchor);

			if(Block.BlockModel.WaypointType == CBlockModel::EWayPointType::Start) ChBlock.Waypoint = "Start";
			else if(Block.BlockModel.WaypointType == CBlockModel::EWayPointType::Checkpoint) ChBlock.Waypoint = "Checkpoint";
			else if(Block.BlockModel.WaypointType == CBlockModel::EWayPointType::Finish) ChBlock.Waypoint = "Finish";
			else if(Block.BlockModel.WaypointType == CBlockModel::EWayPointType::StartFinish) ChBlock.Waypoint = "Multilap";
			
			ChallengeBlocks.add(ChBlock);
		}
	}

	return ChallengeBlocks;
}

Boolean IsSpecialBlock(Text _BlockName) {
	declare IsSpecial = False;
	foreach(MacroblockModel,MacroblockModels) {
		if(MacroblockModel.Name == """{{{_BlockName}}}-Ground"""
		|| MacroblockModel.Name == """{{{_BlockName}}}-Air"""
		|| MacroblockModel.Name == """{{{_BlockName}}}-Forest"""
		|| MacroblockModel.Name == """{{{_BlockName}}}-Field""")
			IsSpecial = True;
	}
	return IsSpecial;
}

Boolean SafeRemoveBlock(CBlock _Block) {
	if(_Block == Null) return False;
	declare Block = GetBlock(_Block.Coord);
	if(Block == Null) return False;
	
	if(Block.BlockScriptId == _Block.BlockScriptId) 
		return RemoveBlock(_Block.Coord);
	return False;
}

Boolean SafeRemoveMacroblock(CMacroblockInstance _Macroblock) {
	if(_Macroblock == Null) return False;
	declare Macroblock = GetMacroblockInstanceFromUnitCoord(_Macroblock.Coord);
	if(Macroblock == Null) return False;
	
	if(Macroblock.Id == _Macroblock.Id) {
		return RemoveMacroblock(_Macroblock.MacroblockModel, _Macroblock.Coord, _Macroblock.Dir) && RemoveMacroblockInstance(_Macroblock);
	}
	return False;
}

Boolean SafeRemoveBlock(ModifierBase::SChBlock _ChBlock) {
	if(_ChBlock.IsSpecial) {
		for(i,0,MacroblockInstances.count-1)
			if(MacroblockInstances[i].Id^"" == _ChBlock.Id) return SafeRemoveMacroblock(MacroblockInstances[i]);
		return False;
	}
	
	for(i,0,Blocks.count-1)
		if(Blocks[i].Id^"" == _ChBlock.Id) return SafeRemoveBlock(Blocks[i]);
	return False;
}

ModifierBase::SChallengeBlock PlaceBlockSpecial(Text _BlockName, Int3 _Coord, ::CardinalDirections _Direction) {
	declare ModifierBase::SChallengeBlock Result;
	
	if(IsSpecialBlock(_BlockName)) {
		declare ModifierBase::SChWaypoints Waypoints;
		declare JsonSuccess = Waypoints.fromjson(File::Read("Media/Waypoints.json"));

		declare MacroblockModel = GetMacroblockModelFromFilePath("""{{{Map.CollectionName}}}\{{{_BlockName}}}-{{{GetVariant(_Coord)}}}.Macroblock.Gbx""");
		if(MacroblockModel == Null) return Result;
		Result.Placed = PlaceMacroblock(MacroblockModel, _Coord, _Direction);
		Result.Macroblock = CreateMacroblockInstance(MacroblockModel, _Coord, _Direction);

		foreach(Anchor, AnchorData)
			if(Anchor.Block != Null)
				if(Anchor.Block.Coord == Result.Macroblock.Coord)
					Result.Anchors.add(Anchor);

		declare IsStart = Waypoints.Starts.exists(Conversion::GetBlockNameFromMacroblockName(MacroblockModel.Name));
		declare IsCheckpoint = Waypoints.Checkpoints.exists(Conversion::GetBlockNameFromMacroblockName(MacroblockModel.Name));
		declare IsFinish = Waypoints.Finishes.exists(Conversion::GetBlockNameFromMacroblockName(MacroblockModel.Name));
		declare IsMultilap = Waypoints.Multilaps.exists(Conversion::GetBlockNameFromMacroblockName(MacroblockModel.Name));

		if(IsStart) Result.Waypoint = "Start";
		if(IsCheckpoint) Result.Waypoint = "Checkpoint";
		if(IsFinish) Result.Waypoint = "Finish";
		if(IsMultilap) Result.Waypoint = "Multilap";
	}
	else {
		declare BlockModel = GetBlockModelFromName(_BlockName);
		declare BlockPlaced = PlaceBlock(BlockModel, _Coord, _Direction);
		
		if(!BlockPlaced) return Result;

		yield; //Required so that AnchorData actually updates, thanks Nadeo

		declare Block = GetBlock(_Coord);
		if(Block != Null) {
			Result.Placed = True;
			Result.Block = Block;
		}

		foreach(Anchor, AnchorData)
			if(Anchor.Block != Null)
				if(Anchor.Block.Id == Block.Id)
					Result.Anchors.add(Anchor);

		if(Block.BlockModel.WaypointType == CBlockModel::EWayPointType::Start) Result.Waypoint = "Start";
		else if(Block.BlockModel.WaypointType == CBlockModel::EWayPointType::Checkpoint) Result.Waypoint = "Checkpoint";
		else if(Block.BlockModel.WaypointType == CBlockModel::EWayPointType::Finish) Result.Waypoint = "Finish";
		else if(Block.BlockModel.WaypointType == CBlockModel::EWayPointType::StartFinish) Result.Waypoint = "Multilap";
	}
	return Result;
}

Integer GetNewOrder() {
	declare Integer[] UsedOrders;
	foreach(Anchor,AnchorData)
		if(!UsedOrders.exists(Anchor.Order))
			UsedOrders.add(Anchor.Order);
	
	declare NewOrder = 0;
	while(UsedOrders.exists(NewOrder)) {
		NewOrder+=1;
	}
	return NewOrder;
}

Void Respond(CUILayer _LayerAPI, Text _Type, Text[] _Data) {
	LayerCustomEvent(_LayerAPI, _Type^"_Response", _Data);
}

Boolean Command(CUILayer _LayerAPI, Text _Type, Text[] _Data) {
	switch(_Type) {
		case "Ch_ComputeShadows": {
			ComputeShadows();
			wait(CurrentShadowsQuality == ::ShadowsQuality::VeryFast);
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_RemoveAllBlocks": {
			RemoveAllBlocks();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_RemoveAllTerrain": {
			RemoveAllTerrain();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_RemoveAllOffZone": {
			RemoveAllOffZone();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_RemoveAllObjects": {
			RemoveAllObjects();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_RemoveAll": {
			RemoveAll();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_RemoveAllBlocksAndTerrain": {
			RemoveAllBlocksAndTerrain();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_PreloadAllBlocks": {
			PreloadAllBlocks();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_PreloadAllItems": {
			PreloadAllItems();
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_CanPlaceBlock": {
			declare BlockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);
			declare OnGround = Conversion::ToBoolean(_Data[3]);
			declare VariantIndex = TextLib::ToInteger(_Data[4]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceBlock(BlockModel, Coord, Direction, OnGround, VariantIndex);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_CanPlaceBlock_NoDestruction": {
			declare BlockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);
			declare OnGround = Conversion::ToBoolean(_Data[3]);
			declare VariantIndex = TextLib::ToInteger(_Data[4]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceBlock_NoDestruction(BlockModel, Coord, Direction, OnGround, VariantIndex);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_PlaceBlock": {
			declare BlockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare Response = PlaceBlockSpecial(BlockName, Coord, Direction);
			
			declare ModifierBase::SPlaceBlockResult Result;
			Result.Placed = Response.Placed;
			Result.Block = Conversion::ToSChBlock(Response);
			
			Respond(_LayerAPI, _Type, [Result.tojson()]);
		}
		case "Ch_PlaceBlock_NoDestruction": {
			declare BlockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare Response = PlaceBlockSpecial(BlockName, Coord, Direction);
			
			declare ModifierBase::SPlaceBlockResult Result;
			Result.Placed = Response.Placed;
			Result.Block = Conversion::ToSChBlock(Response);
			
			Respond(_LayerAPI, _Type, [Result.tojson()]);
		}
		case "Ch_CanPlaceRoadBlocks": {
			declare BlockName = _Data[0];
			declare StartCoord = Conversion::ToInt3(_Data[1]);
			declare EndCoord = Conversion::ToInt3(_Data[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceRoadBlocks(BlockModel, StartCoord, EndCoord);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_PlaceRoadBlocks": {
			declare BlockName = _Data[0];
			declare StartCoord = Conversion::ToInt3(_Data[1]);
			declare EndCoord = Conversion::ToInt3(_Data[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceRoadBlocks(BlockModel, StartCoord, EndCoord);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_CanPlaceTerrainBlocks": {
			declare BlockName = _Data[0];
			declare StartCoord = Conversion::ToInt3(_Data[1]);
			declare EndCoord = Conversion::ToInt3(_Data[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = CanPlaceTerrainBlocks(BlockModel, StartCoord, EndCoord);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_PlaceTerrainBlocks": {
			declare BlockName = _Data[0];
			declare StartCoord = Conversion::ToInt3(_Data[1]);
			declare EndCoord = Conversion::ToInt3(_Data[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceTerrainBlocks(BlockModel, StartCoord, EndCoord);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_PlaceTerrainBlocks_NoDestruction": {
			declare BlockName = _Data[0];
			declare StartCoord = Conversion::ToInt3(_Data[1]);
			declare EndCoord = Conversion::ToInt3(_Data[2]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = PlaceTerrainBlocks_NoDestruction(BlockModel, StartCoord, EndCoord);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_PlaceMacroblock": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock_NoDestruction": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock_NoDestruction(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_PlaceMacroblock_NoDestruction": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock_NoDestruction(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_CanPlaceMacroblock_NoTerrain": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = CanPlaceMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_PlaceMacroblock_NoTerrain": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = PlaceMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_RemoveMacroblock": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = RemoveMacroblock(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_RemoveMacroblock_NoTerrain": {
			declare MacroblockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare MacroblockModel = GetMacroblockModelFromFilePath(MacroblockName);
			declare Response = RemoveMacroblock_NoTerrain(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_GetBlock": {
			declare Coord = Conversion::ToInt3(_Data[0]);

			declare Response = GetBlock(Coord);
			declare Block = Conversion::ToSChBlock(Response);

			Respond(_LayerAPI, _Type, [Block.tojson()]);
		}
		case "Ch_RemoveBlock": {
			declare Coord = Conversion::ToInt3(_Data[0]);

			declare Response = RemoveBlock(Coord);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_RemoveTerrainBlocks": {
			declare StartCoord = Conversion::ToInt3(_Data[0]);
			declare EndCoord = Conversion::ToInt3(_Data[1]);

			declare Response = RemoveTerrainBlocks(StartCoord,EndCoord);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_GetBlockGroundHeight": {
			declare BlockName = _Data[0];
			declare CoordX = TextLib::ToInteger(_Data[1]);
			declare CoordY = TextLib::ToInteger(_Data[2]);
			declare Direction = Conversion::ToDirectionMap(_Data[3]);

			declare BlockModel = GetBlockModelFromName(BlockName);
			declare Response = GetBlockGroundHeight(BlockModel,CoordX,CoordY,Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_GetGroundHeight": {
			declare CoordX = TextLib::ToInteger(_Data[0]);
			declare CoordY = TextLib::ToInteger(_Data[1]);

			declare Response = GetGroundHeight(CoordX,CoordY);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_GetStartLineBlock": {
			declare Block = GetStartLineBlock();
			declare Response = Conversion::ToSChBlock(Block);
			Respond(_LayerAPI, _Type, [Response.tojson()]);
		}
		case "Ch_GetBlocks": {
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, GetBlocks()) ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(_LayerAPI, _Type, [ChBlocks.tojson()]);
		}
		case "Ch_GetAnchorData": {
			declare ModifierBase::SChAnchor[] Anchor;
			foreach(Data, AnchorData) Anchor.add(Conversion::ToSChAnchor(Data));
			Respond(_LayerAPI, _Type, [Anchor.tojson()]);
		}
		case "Ch_RemoveSpecificBlock": {
			declare ModifierBase::SChBlock ChBlock;
			declare JsonSuccess = ChBlock.fromjson(_Data[0]);
			
			declare Removed = SafeRemoveBlock(ChBlock);
			Respond(_LayerAPI, _Type, [Removed^""]);
		}
		case "Ch_GetMapInfo": {
			Respond(_LayerAPI, _Type, [Conversion::ToSChMap(Map).tojson()]);
		}
		case "Ch_GetOriginalMapInfo": {
			declare metadata ModifierBase::SChMap OriginalMap for Map;
			Respond(_LayerAPI, _Type, [OriginalMap.tojson()]);
		}
		case "Ch_Underground": {
			UndergroundMode = True;
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_Aboveground": {
			UndergroundMode = False;
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_ShowEditor": {
			HideEditorInterface = False;
			EnableEditorInputsCustomProcessing = False;
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_HideEditor": {
			HideEditorInterface = True;
			EnableEditorInputsCustomProcessing = True;
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_RemoveItem": {
			declare ModifierBase::SChItem Item;
			declare JsonSuccess = Item.fromjson(_Data[0]);
			log(Item);
			declare CAnchorData Anch;
			foreach(Anchor, AnchorData) {
				if(Anchor.Item != Null) {
					if(Anchor.Id^"" == Item.Anchor.Id) {
						Anch <=> Anchor;
					}
				}
			}
			declare Removed = Anch != Null && RemoveItem(Anch);
			Respond(_LayerAPI, _Type, [Removed^""]);
		}
		case "Ch_PlaceGhostBlock": {
			declare BlockName = _Data[0];
			declare Coord = Conversion::ToInt3(_Data[1]);
			declare Direction = Conversion::ToDirectionMap(_Data[2]);

			declare Variant = GetVariant(Coord);
			
			declare MacroblockModel = GetMacroblockModelFromFilePath("""{{{Map.CollectionName}}}\Ghost\{{{BlockName}}}-{{{Variant}}}-Ghost.Macroblock.Gbx""");
			declare Response = PlaceMacroblock(MacroblockModel, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Response]);
		}
		case "Ch_ReplaceBlock": {
			declare ModifierBase::SChBlock Block;
			declare JsonSuccess = Block.fromjson(_Data[0]);
			declare Replacement = _Data[1];
			declare OppositeDirection = Conversion::ToBoolean(_Data[2]);
			
			declare Direction = Conversion::ToDirectionMap(Block.Direction);
			declare Coord = Block.Coord;
			if(OppositeDirection) Direction = MapUnits::GetOpposedDir(Direction);
			
			declare Removed = SafeRemoveBlock(Block);
			declare Placed = PlaceBlockSpecial(Replacement, Coord, Direction);
			Respond(_LayerAPI, _Type, [""^Removed, ""^Placed.Placed]);
		}
		case "Ch_ReplaceAllBlocks": {
			declare BlockName = _Data[0];
			declare Replacement = _Data[1];

			foreach(Block, Blocks) {
				if(Block.BlockModel.Name == BlockName) {
					declare Direction = Conversion::ToDirectionMap(Block.Direction);
					declare Coord = Block.Coord;
			
					declare Removed = RemoveBlock(Coord);
					declare Placed = PlaceBlockSpecial(Replacement, Coord, Direction);
				}
			}

			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_SwapBlock": {
			declare ModifierBase::SChBlock Block1;
			declare JsonSuccessBlock1 = Block1.fromjson(_Data[0]);
			declare ModifierBase::SChBlock Block2;
			declare JsonSuccessBlock2 = Block2.fromjson(_Data[1]);

			declare RemovedBlock1 = RemoveBlock(Block1.Coord);
			declare RemovedBlock2 = RemoveBlock(Block2.Coord);

			declare PlacedBlock1 = PlaceBlockSpecial(Block2.Name, Block1.Coord, Conversion::ToDirectionMap(Block1.Direction));
			declare PlacedBlock2 = PlaceBlockSpecial(Block1.Name, Block2.Coord, Conversion::ToDirectionMap(Block2.Direction));

			Respond(_LayerAPI, _Type, [""^(RemovedBlock1 && RemovedBlock2 && PlacedBlock1.Placed && PlacedBlock2.Placed)]);
		}
		case "Ch_GetStartLines": {
			declare ModifierBase::SChWaypoint[] Waypoints;

			foreach(Block, GetBlocks()) {
				if(Block.Waypoint == "Start") {
					declare ModifierBase::SChWaypoint Waypoint;
					Waypoint.Type = "Start";
					Waypoint.Block = Conversion::ToSChBlock(Block);
					Waypoint.IsBlock = True;
					Waypoints.add(Waypoint);
				}
			}
				
			foreach(Anchor, AnchorData) {
				if(Anchor.Item != Null) {
					if(Anchor.DefaultTag == "Spawn") {
						declare ModifierBase::SChWaypoint Waypoint;
						Waypoint.Type = "Finish";
						Waypoint.Item = Conversion::ToSChItem(Anchor);
						Waypoint.IsItem = True;
						Waypoints.add(Waypoint);
					}
				}
			}
			
			Respond(_LayerAPI, _Type, [Waypoints.tojson()]);
		}
		case "Ch_GetFinishLines": {
			declare ModifierBase::SChWaypoint[] Waypoints;

			foreach(Block, GetBlocks()) {
				if(Block.Macroblock != Null) log(Block ^ " " ^ Block.Macroblock);
				if(Block.Waypoint == "Finish") {
					declare ModifierBase::SChWaypoint Waypoint;
					Waypoint.Type = "Finish";
					Waypoint.Block = Conversion::ToSChBlock(Block);
					Waypoint.IsBlock = True;
					Waypoints.add(Waypoint);
				}
			}
				
			foreach(Anchor, AnchorData) {
				if(Anchor.Item != Null) {
					if(Anchor.DefaultTag == "Goal") {
						declare ModifierBase::SChWaypoint Waypoint;
						Waypoint.Type = "Finish";
						Waypoint.Item = Conversion::ToSChItem(Anchor);
						Waypoint.IsItem = True;
						Waypoints.add(Waypoint);
					}
				}
			}
			
			Respond(_LayerAPI, _Type, [Waypoints.tojson()]);
		}
		case "Ch_GetCheckpoints": {
			declare ModifierBase::SChWaypoint[] Waypoints;

			foreach(Block, GetBlocks()) {
				if(Block.Waypoint == "Checkpoint") {
					declare ModifierBase::SChWaypoint Waypoint;
					Waypoint.Type = "Checkpoint";
					Waypoint.Block = Conversion::ToSChBlock(Block);
					Waypoint.IsBlock = True;
					Waypoints.add(Waypoint);
				}
			}
				
			foreach(Anchor, AnchorData) {
				if(Anchor.Item != Null) {
					if(Anchor.DefaultTag == "Checkpoint") {
						declare ModifierBase::SChWaypoint Waypoint;
						Waypoint.Type = "Checkpoint";
						Waypoint.Item = Conversion::ToSChItem(Anchor);
						Waypoint.IsItem = True;
						Waypoints.add(Waypoint);
					}
				}
			}
			
			Respond(_LayerAPI, _Type, [Waypoints.tojson()]);
		}
		case "Ch_GetMultilaps": {
			declare ModifierBase::SChWaypoint[] Waypoints;

			foreach(Block, GetBlocks()) {
				if(Block.Waypoint == "Multilap") {
					declare ModifierBase::SChWaypoint Waypoint;
					Waypoint.Type = "Multilap";
					Waypoint.Block = Conversion::ToSChBlock(Block);
					Waypoint.IsBlock = True;
					Waypoints.add(Waypoint);
				}
			}
				
			foreach(Anchor, AnchorData) {
				if(Anchor.Item != Null) {
					if(Anchor.DefaultTag == "StartFinish") {
						declare ModifierBase::SChWaypoint Waypoint;
						Waypoint.Type = "Multilap";
						Waypoint.Item = Conversion::ToSChItem(Anchor);
						Waypoint.IsItem = True;
						Waypoints.add(Waypoint);
					}
				}
			}
			
			Respond(_LayerAPI, _Type, [Waypoints.tojson()]);
		}
		case "Ch_GetStartLineBlocks": {
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, GetBlocks())
				if(Block.Waypoint == "Start")
					ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(_LayerAPI, _Type, [ChBlocks.tojson()]);
		}
		case "Ch_GetFinishLineBlocks": {
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, GetBlocks())
				if(Block.Waypoint == "Finish")
					ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(_LayerAPI, _Type, [ChBlocks.tojson()]);
		}
		case "Ch_GetCheckpointBlocks": {
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, GetBlocks())
				if(Block.Waypoint == "Checkpoint")
					ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(_LayerAPI, _Type, [ChBlocks.tojson()]);
		}
		case "Ch_GetMultilapBlocks": {
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, GetBlocks())
				if(Block.Waypoint == "Multilap")
					ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(_LayerAPI, _Type, [ChBlocks.tojson()]);
		}
		case "Ch_GetBlocksByBlockName": {
			declare BlockName = _Data[0];
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, Blocks)
				if(Block.BlockModel.Name == BlockName)
					ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(_LayerAPI, _Type, [ChBlocks.tojson()]);
		}
		case "Ch_MultipleBlocks": {
			declare Coord = Conversion::ToInt3(_Data[0]);
			declare ModifierBase::SChBlock[] ChBlocks;
			foreach(Block, Blocks)
				if(Block.Coord == Coord)
					ChBlocks.add(Conversion::ToSChBlock(Block));
			Respond(_LayerAPI, _Type, [ChBlocks.tojson()]);
		}
		case "Ch_GetStartLineItems": {
			declare ModifierBase::SChItem[] ChItems;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Spawn" && Anchor.Item != Null)
					ChItems.add(Conversion::ToSChItem(Anchor));
			Respond(_LayerAPI, _Type, [ChItems.tojson()]);
		}
		case "Ch_GetCheckpointItems": {
			declare ModifierBase::SChItem[] ChItems;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Checkpoint" && Anchor.Item != Null)
					ChItems.add(Conversion::ToSChItem(Anchor));
			Respond(_LayerAPI, _Type, [ChItems.tojson()]);
		}
		case "Ch_GetFinishLineItems": {
			declare ModifierBase::SChItem[] ChItems;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "Goal" && Anchor.Item != Null)
					ChItems.add(Conversion::ToSChItem(Anchor));
			Respond(_LayerAPI, _Type, [ChItems.tojson()]);
		}
		case "Ch_GetMultilapItems": {
			declare ModifierBase::SChItem[] ChItems;
			foreach(Anchor, AnchorData)
				if(Anchor.DefaultTag == "StartFinish" && Anchor.Item != Null)
					ChItems.add(Conversion::ToSChItem(Anchor));
			Respond(_LayerAPI, _Type, [ChItems.tojson()]);
		}
		case "Ch_UpdateAnchor": {
			declare ModifierBase::SChAnchor ChAnchor;
			declare JsonSuccess = ChAnchor.fromjson(_Data[0]);
			foreach(Anchor, AnchorData)
				if(Anchor.Id^"" == ChAnchor.Id)
					declare Success = Conversion::SetCAnchorData(Anchor, ChAnchor);
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_LinkCheckpoints": {
			declare ModifierBase::SChAnchor[] ChAnchors;
			declare JsonSuccess = ChAnchors.fromjson(_Data[0]);
			declare Order = GetNewOrder();
			foreach(Anchor, AnchorData) {
				foreach(ChAnchor, ChAnchors) {
					if(Anchor.Id^"" == ChAnchor.Id) {
						if(Anchor.DefaultTag == "Checkpoint") {
							Anchor.Tag = "LinkedCheckpoint";
							Anchor.Order = Order;
						}
					}
				}
			}
			
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_IsSpecialBlock": {
			declare BlockName = _Data[0];
			
			declare IsSpecial = IsSpecialBlock(BlockName);
			Respond(_LayerAPI, _Type, [IsSpecial^""]);
		}
		case "Ch_Problem": {
			declare ModifierBase::SChProblem Problem;
			declare JsonSuccess = Problem.fromjson(_Data[0]);
			declare metadata ModifierBase::SChProblem[] Problems for Map;
			Problems.add(Problem);
			if(Problem.Solutions.count == 0) return False;
			else Respond(_LayerAPI, _Type, []);
		}
		case "Ch_Message": {
			Dialog_Message(_Data[0]);
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_SetStatusProgress": {
			Layers::SendEvent("ModifierStatus", "Progress", [_Data[0]]);
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_SetStatusMessage": {
			Layers::SendEvent("ModifierStatus", "Message", [_Data[0]]);
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_SetStatusColor": {
			Layers::SendEvent("ModifierStatus", "Color", [_Data[0]]);
			Respond(_LayerAPI, _Type, []);
		}
		case "Ch_SetCursorBlock": {
			CursorBlockModel = GetBlockModelFromName(_Data[0]);
			Respond(_LayerAPI, _Type, ["True"]);
		}
		default: {
			log("Unknown request: "^_Type);
			Respond(_LayerAPI, _Type, ["False"]);
		}
	}
	
	return True;
}