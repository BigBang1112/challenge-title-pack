#Struct SChAnchor {
	Text Id;
	Text DefaultTag;
	Integer DefaultOrder;
	Text Tag;
	Integer Order;
}

#Struct SChBlock {
	Text Id;
	Text Name;
	Int3 Coord;
	Text Direction;
	Boolean IsRoad; 
	Boolean IsTerrain;
	Boolean IsPodium;
	Text Waypoint;
	SChAnchor[] Anchors;
	Boolean NoRespawn;
	Boolean IsSpecial;
}

#Struct SChItem {
	Vec3 Position;
	SChAnchor Anchor;
}

#Struct SChWaypoint {
	Text Type;
	Boolean IsBlock;
	SChBlock Block;
	Boolean IsItem;
	SChItem Item;
}

#Struct SChMacroblock {
	Boolean IsGround;
	Boolean HasStart;
	Boolean HasFinish;
	Boolean HasCheckpoint;
	Boolean HasMultilap;
	Text Name;
}

#Struct SPlaceBlockResult {
	Boolean Placed;
	SChBlock Block;
}

#Struct SChSolution {
	Text Value;
	Text AdditionalInfo;
	Boolean IsInteractive;
}

#Struct SChProblem {
	Text Name;
	Int3 Coord;
	Text Direction;
	SChWaypoint Waypoint;
	SChWaypoint[] Waypoints;
	SChBlock Block;
	SChBlock[] Blocks;
	SChItem Item;
	SChItem[] Items;
	Text BlockName;
	Text ShortDescription;
	Text LongDescription;
	SChSolution[] Solutions;
}

#Struct SChNote {
	Text Name;
	SChWaypoint Waypoint;
	SChWaypoint[] Waypoints;
	SChBlock Block;
	SChBlock[] Blocks;
	SChItem Item;
	SChItem[] Items;
}

#Struct SChMap {
	Text MapUid;
	Text Comments;
	Integer CopperPrice;
	Text CollectionName;
	Text AuthorLogin;
	Text AuthorNickName;
	Text AuthorZonePath;
	Text AuthorZoneFlagUrl;
	Text AuthorCountryFlagUrl;
	Text MapType;
	Text MapStyle;
	Boolean Unlocked;
	Boolean IsPlayable;
	Boolean CreatedWithSimpleEditor;
	Boolean CreatedWithPartyEditor;
	Integer TMObjective_AuthorTime;
	Integer TMObjective_GoldTime;
	Integer TMObjective_SilverTime;
	Integer TMObjective_BronzeTime;
	Integer TMObjective_NbLaps;
	Boolean TMObjective_IsLapRace;
	Text Name;
	Text Path;
	Text FileName;
}

#Struct SChWaypoints {
	Text[] Starts;
	Text[] Finishes;
	Text[] Checkpoints;
	Text[] Multilaps;
}

#Struct SChallengeBlock {
	Boolean Placed;
	CBlock Block;
	CMacroblockInstance Macroblock;
	CAnchorData[] Anchors;
	Text Waypoint;
}

declare SChProblem[] Problems;
declare Integer SelectedProblem;

Void UpdateProblems() {
	declare Offset = 0;
	declare List = (Page.GetFirstChild("FRAME_LIST") as CMlFrame);
	for(i,0,List.Controls.count-1) {
		declare Selector = (List.Controls[i] as CMlFrame);
		if(Problems.existskey(i)) {
			declare Problem = Problems[i];
			declare Quad_Button = (Selector.GetFirstChild("QUAD_BUTTON") as CMlQuad);
			declare Frame_Button = (Selector.GetFirstChild("FRAME_LABEL_BUTTON") as CMlFrame);
			declare Label_Button = (Frame_Button.GetFirstChild("LABEL_BUTTON") as CMlLabel);

			if(SelectedProblem == i)
				Quad_Button.Substyle = "BgCard";
			else
				Quad_Button.Substyle = "BgCardInventoryItem";

			Label_Button.SetText(Problem.ShortDescription);
			Selector.DataAttributeSet("problem",i^"");
			Selector.Show();
		}
		else {
			Selector.Hide();
		}
	}
}

***Start***
***
declare Start = Now;
declare End = -1;

SelectedProblem = -1;
***

***Loop***
***
foreach(Event,PendingEvents) {
	switch(Event.Type) {
		case CMlScriptEvent::Type::MouseClick: {
			switch(Event.ControlId) {
				case "QUAD_BUTTON": {
					SelectedProblem = TextLib::ToInteger(Event.Control.Parent.DataAttributeGet("problem"));
					SendCustomEvent("SelectProblem", [SelectedProblem^""]);
					UpdateProblems();
				}
			}
		}
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch(Event.CustomEventType) {
				case "Show": {
					Start = Now;
					End = -1;

					Page.GetFirstChild("FRAME_PROBLEMS").RelativePosition_V3 = <120.,10.>;
					AnimMgr.Add(Page.GetFirstChild("FRAME_PROBLEMS"), "<frame pos=\"120 40\"/>", Now + 500, 500, CAnimManager::EAnimManagerEasing::QuadOut);

					foreach(Control,(Page.GetFirstChild("FRAME_BACKGROUND") as CMlFrame).Controls) {
						(Control as CMlQuad).Opacity = 0.;
						AnimMgr.Add(Control, "<quad opacity=\"1\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
					}

					(Page.GetFirstChild("LABEL_PROBLEMS") as CMlLabel).Opacity = 0.;
					AnimMgr.Add(Page.GetFirstChild("LABEL_PROBLEMS"), "<label opacity=\"1\"/>", Now, 500, CAnimManager::EAnimManagerEasing::QuadOut);
					

					declare Delay = 0;
					foreach(Control,(Page.GetFirstChild("FRAME_LIST") as CMlFrame).Controls) {
						declare Frame = (Control as CMlFrame);
						(Frame.GetFirstChild("QUAD_BUTTON") as CMlQuad).Hide();
						AnimMgr.Add(Frame.GetFirstChild("QUAD_BUTTON"), "<quad hidden=\"0\"/>", Now + 1000 + Delay, 200, CAnimManager::EAnimManagerEasing::QuadOut);
						((Frame.GetFirstChild("FRAME_LABEL_BUTTON") as CMlFrame).GetFirstChild("LABEL_BUTTON") as CMlLabel).Opacity = 0.;
						AnimMgr.Add((Frame.GetFirstChild("FRAME_LABEL_BUTTON") as CMlFrame).GetFirstChild("LABEL_BUTTON"), "<label opacity=\"1\"/>", Now + 1000 + Delay, 200, CAnimManager::EAnimManagerEasing::QuadOut);

						Delay += 100;
					}
				}
				case "Hide": {
					End = Now;
					AnimMgr.Add(Page.GetFirstChild("FRAME_PROBLEMS"), "<frame pos=\"130 40\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
				}
				case "UpdateProblems": {
					declare JsonSuccess = Problems.fromjson(Event.CustomEventData[0]);
					UpdateProblems();
				}
				case "SelectProblem": {
					SelectedProblem = TextLib::ToInteger(Event.CustomEventData[0]);
					UpdateProblems();
				}
				case "NextProblem": {
					if(Problems.count-1 == SelectedProblem)
						SelectedProblem = 0;
					else
						SelectedProblem += 1;
					SendCustomEvent("SelectProblem", [SelectedProblem^""]);
					UpdateProblems();
				}
			}
		}
	}
}

declare Time = Now - Start - 500;

if(End != -1) {
	if(Now - End > 1000) {
		SendCustomEvent("Hide_Response", []);
		End = -1;
	}
}
else {
	foreach(Control,(Page.GetFirstChild("FRAME_BACKGROUND") as CMlFrame).Controls) {
		Control.Size.Y = AnimLib::EaseOutQuad(Time, 15.0, 45.0, 500);
	}
	Page.GetFirstChild("QUAD_SCROLLBAR_BACKGROUND").Size.Y = AnimLib::EaseOutQuad(Time, 0.0, 40.0, 500);
	Page.GetFirstChild("QUAD_LIST_BG").Size.Y = AnimLib::EaseOutQuad(Time, 0.0, 40.0, 500);
	Page.GetFirstChild("QUAD_SCROLLBAR").Size.Y = AnimLib::EaseOutQuad(Time, 0.0, 20.0, 500);
}

if(Time >= 2000) { //Instafix animations

}
***