#Struct SChAnchor {
	Text Id;
	Text DefaultTag;
	Integer DefaultOrder;
	Text Tag;
	Integer Order;
}

#Struct SChBlock {
	Text Id;
	Text Name;
	Int3 Coord;
	Text Direction;
	Boolean IsRoad; 
	Boolean IsTerrain;
	Boolean IsPodium;
	Text Waypoint;
	SChAnchor[] Anchors;
	Boolean NoRespawn;
	Boolean IsSpecial;
}

#Struct SChItem {
	Vec3 Position;
	SChAnchor Anchor;
}

#Struct SChWaypoint {
	Text Type;
	Boolean IsBlock;
	SChBlock Block;
	Boolean IsItem;
	SChItem Item;
}

#Struct SChMacroblock {
	Boolean IsGround;
	Boolean HasStart;
	Boolean HasFinish;
	Boolean HasCheckpoint;
	Boolean HasMultilap;
	Text Name;
}

#Struct SPlaceBlockResult {
	Boolean Placed;
	SChBlock Block;
}

#Struct SChSolution {
	Text Value;
	Text AdditionalInfo;
	Boolean IsInteractive;
}

#Struct SChProblem {
	Text Name;
	Int3 Coord;
	Text Direction;
	SChWaypoint Waypoint;
	SChWaypoint[] Waypoints;
	SChBlock Block;
	SChBlock[] Blocks;
	SChItem Item;
	SChItem[] Items;
	Text BlockName;
	Text ShortDescription;
	Text LongDescription;
	SChSolution[] Solutions;
}

#Struct SChNote {
	Text Name;
	SChWaypoint Waypoint;
	SChWaypoint[] Waypoints;
	SChBlock Block;
	SChBlock[] Blocks;
	SChItem Item;
	SChItem[] Items;
}

#Struct SChMap {
	Text MapUid;
	Text Comments;
	Integer CopperPrice;
	Text CollectionName;
	Text AuthorLogin;
	Text AuthorNickName;
	Text AuthorZonePath;
	Text AuthorZoneFlagUrl;
	Text AuthorCountryFlagUrl;
	Text MapType;
	Text MapStyle;
	Boolean Unlocked;
	Boolean IsPlayable;
	Boolean CreatedWithSimpleEditor;
	Boolean CreatedWithPartyEditor;
	Integer TMObjective_AuthorTime;
	Integer TMObjective_GoldTime;
	Integer TMObjective_SilverTime;
	Integer TMObjective_BronzeTime;
	Integer TMObjective_NbLaps;
	Boolean TMObjective_IsLapRace;
	Text Name;
	Text Path;
	Text FileName;
}

#Struct SChWaypoints {
	Text[] Starts;
	Text[] Finishes;
	Text[] Checkpoints;
	Text[] Multilaps;
}

#Struct SChallengeBlock {
	Boolean Placed;
	CBlock Block;
	CMacroblockInstance Macroblock;
	CAnchorData[] Anchors;
	Text Waypoint;
}

declare SChProblem Problem;

Void UpdateProblem() {
	(Page.GetFirstChild("LABEL_PROBLEM") as CMlLabel).SetText(Problem.ShortDescription);
	(Page.GetFirstChild("LABEL_PROBLEM_LONG") as CMlLabel).SetText(Problem.LongDescription);
}

***Loop***
***
foreach(Event,PendingEvents) {
	switch(Event.Type) {
		case CMlScriptEvent::Type::MouseClick: {
			switch(Event.ControlId) {
				case "QUAD_BUTTON_LEAVE": {
					SendCustomEvent("Button_Leave",[]);
				}
				case "QUAD_BUTTON_NEXT": {
					SendCustomEvent("Button_Next",[]);
				}
			}
		}
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch(Event.CustomEventType) {
				case "Show": {
					
				}
				case "Hide": {
					SendCustomEvent("Hide_Response", []);
				}
				case "Problem": {
					declare JsonSuccess = Problem.fromjson(Event.CustomEventData[0]);
					UpdateProblem();
				}
			}
		}
	}
}
***