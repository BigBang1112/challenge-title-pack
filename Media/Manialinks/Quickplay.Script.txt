#Struct SMXTrackInfo {
	Integer TrackID;
	Integer UserID;
	Text Username;
	Text UploadedAt;
	Text UpdatedAt;
	Text Name;
	Text TypeName;
	Text MapType;
	Text TitlePack;
	Text StyleName;
	Text Mood;
	Integer DisplayCost;
	Text ModName;
	Integer Lightmap;
	Text ExeVersion;
	Text ExeBuild;
	Text EnvironmentName;
	Text VehicleName;
	Text PlayerModel;
	Text RouteName;
	Text LengthName;
	Integer Laps;
	Text DifficultyName;
	Text ReplayTypeName;
	Integer ReplayWRID;
	Integer ReplayCount;
	Integer TrackValue;
	Text Comments;
	Integer AwardCount;
	Integer CommentCount;
	Integer ReplayWRTime;
	Integer ReplayWRUserID;
	Text ReplayWRUsername;
	Boolean UnlimiterRequired;
	Text TrackUID;
	Boolean Unreleased;
	Text GbxMapName;
	Integer RatingVoteCount;
	Integer RatingVoteAverage;
	Boolean HasScreenshot;
	Boolean HasThumbnail;
	Boolean HasGhostBlocks;
	Integer EmbeddedObjectsCount;
}

#Struct SMXSearchFilter {
	Text Mode;
	Text TrackName;
	Text Author;
	Text MPAuthor;
	Text AnyAuthor;
	Text Mod;
	Text AuthorID;
	Text[] MapType;
	Text[] TitlePack;
	Text ReplayType;
	Text Style;
	Text Length;
	Text LengthOperator;
	Text PrimaryOrder;
	Text SecondaryOrder;
	Text[] Environments;
	Text[] Vehicles;
	Text Unlimiter;
	Text Page;
	Text Limit;
	Text Unreleased;
	Text MapGroup;
	Text CommentsMinLength;
	Text CustomScreenshot;
	Text MinExeBuild;
	Text MaxExeBuild;
	Text Envmix;
	Text GhostBlocks;
	Text EmbeddedObjects;
	Text GameVersion;
}

#Struct SMapInfo {
	Text MapUid;
	Text Comments;
	Integer CopperPrice;
	Text CollectionName;
	Text AuthorLogin;
	Text AuthorNickName;
	Text AuthorZonePath;
	Text AuthorZoneFlagUrl;
	Text AuthorCountryFlagUrl;
	Text MapType;
	Text MapStyle;
	Boolean Unlocked;
	Boolean IsPlayable;
	Boolean CreatedWithSimpleEditor;
	Boolean CreatedWithPartyEditor;
	Integer TMObjective_AuthorTime;
	Integer TMObjective_GoldTime;
	Integer TMObjective_SilverTime;
	Integer TMObjective_BronzeTime;
	Integer TMObjective_NbLaps;
	Boolean TMObjective_IsLapRace;
	Text Name;
	Text Path;
	Text FileName;
}

#Struct SMapInfoFilter {
	Text Name;
	Text Author;
}

#Struct SMap {
	Text Uid;
	Text Name;
	Text AuthorLogin;
	Text DownloadUrl;
	Boolean Private;
	Text ThumbnailUrl;
}

#Struct SChMetadata {
	Text Name;
	Text AuthorLogin;
	Text AuthorNickname;
	Text Description;
}

#Struct SChScriptInfo {
	Text Name;
	Text Type;
	SChMetadata Metadata;
}

declare SMapInfo[] VisibleMapInfos;
declare SMapInfo SelectedMapInfo;
declare SMXTrackInfo SelectedMXTrackInfo;
declare SChScriptInfo[] SelectedScripts;
declare SMap SelectedManagerMapInfo;

declare Text[] MapBrowserSubFolders;
declare SMapInfo[] MapBrowserMapInfos;

declare SChScriptInfo[] ScriptBrowserScripts;

declare SMXTrackInfo[] MapBrowserMXTrackInfos;
declare Integer MXPage;

declare SMap[] MapBrowserManagerTrackInfos;

declare Text MapLocation;
declare Text ScriptLocation;

declare Text[Text] OfficialScripts;

declare Text[Text] Nicknames;
declare Text[] DownloadedMapUids;

declare SMXSearchFilter FilterMX;
declare SMapInfoFilter FilterLocal;

Text TimeToTextWithMilli(Integer _Time) {
	return TextLib::TimeToText(_Time, True)^TextLib::SubText(""^_Time, TextLib::Length(""^_Time)-1, 1);
}

Boolean IsMultipleScript() {
	return ((Page.GetFirstChild("QUAD_SCRIPT_MULTIPLE") as CMlQuad).ModulateColor == <0.0,0.2,0.4>);
}

Void UpdateLocalMapsFolder(Integer _Offset) {
	declare SubFolders = MapBrowserSubFolders;
	declare MapInfos = MapBrowserMapInfos;
	declare SubFoldersCount = SubFolders.count;
	declare MapInfosCount = MapInfos.count;

	declare Frame_MapList = (Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame);
	Frame_MapList.ScrollActive = True;
	Frame_MapList.ScrollMax = <0.,10.*(SubFoldersCount+1 + MapInfosCount+1)-100>;
	Frame_MapList.ScrollMin = <0.,0.>;
	Frame_MapList.ScrollGridSnap = True;
	Frame_MapList.ScrollGrid = <0.,10.>;
	Frame_MapList.ScrollOffset = <0.,_Offset*10.0>;

	if(_Offset != 0) {
		for(i,0,_Offset-1) {
			SubFolders.removekey(0);
		}
	}

	if(_Offset > SubFoldersCount) {
		for(i,0,_Offset-1-SubFoldersCount) {
			MapInfos.removekey(0);
		}
	}

	VisibleMapInfos.clear();

	if(SelectedMapInfo.MapUid != "") {
		(Page.GetFirstChild("QUAD_MAPLIST_THUMBNAIL") as CMlQuad).ChangeImageUrl("file://Thumbnails/MapUid/"^SelectedMapInfo.MapUid);
		(Page.GetFirstChild("LABEL_MAPLIST_MAPNAME") as CMlLabel).SetText(SelectedMapInfo.Name);
		(Page.GetFirstChild("ENTRY_MAPLIST_UID") as CMlEntry).Value = SelectedMapInfo.MapUid;

		if(SelectedMapInfo.TMObjective_AuthorTime == -1) (Page.GetFirstChild("LABEL_MAPLIST_MEDALNADEO") as CMlLabel).SetText("None");
		else (Page.GetFirstChild("LABEL_MAPLIST_MEDALNADEO") as CMlLabel).SetText(TimeToTextWithMilli(SelectedMapInfo.TMObjective_AuthorTime));
		if(SelectedMapInfo.TMObjective_GoldTime == -1) (Page.GetFirstChild("LABEL_MAPLIST_MEDALGOLD") as CMlLabel).SetText("None");
		else (Page.GetFirstChild("LABEL_MAPLIST_MEDALGOLD") as CMlLabel).SetText(TimeToTextWithMilli(SelectedMapInfo.TMObjective_GoldTime));
		if(SelectedMapInfo.TMObjective_SilverTime == -1) (Page.GetFirstChild("LABEL_MAPLIST_MEDALSILVER") as CMlLabel).SetText("None");
		else (Page.GetFirstChild("LABEL_MAPLIST_MEDALSILVER") as CMlLabel).SetText(TimeToTextWithMilli(SelectedMapInfo.TMObjective_SilverTime));
		if(SelectedMapInfo.TMObjective_BronzeTime == -1) (Page.GetFirstChild("LABEL_MAPLIST_MEDALBRONZE") as CMlLabel).SetText("None");
		else (Page.GetFirstChild("LABEL_MAPLIST_MEDALBRONZE") as CMlLabel).SetText(TimeToTextWithMilli(SelectedMapInfo.TMObjective_BronzeTime));
		
		if(SelectedMapInfo.MapType == "TrackMania\\Challenge") {
			//AnimMgr.Add(Page.GetFirstChild("LABEL_SCRIPT_NAME"), "<label opacity=\"0\" hidden=\"1\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
			Page.GetFirstChild("LABEL_SCRIPT_NAME").Hide();
			Page.GetFirstChild("QUAD_BUTTON_CHALLENGE_SCRIPT_DISABLE").Show();

			AnimMgr.Add(Page.GetFirstChild("FRAME_CHALLENGE_SCRIPT"), "<frame pos=\"0 0\" hidden=\"1\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
			Page.GetFirstChild("FRAME_CHALLENGE_SCRIPT").DataAttributeSet("open","0");
			(Page.GetFirstChild("LABEL_MAPLIST_AUTHORNAME") as CMlLabel).SetText("{{{{modified_by}}}} "^SelectedMapInfo.AuthorNickName);
		}
		else {
			//AnimMgr.Add(Page.GetFirstChild("LABEL_SCRIPT_NAME"), "<label opacity=\"1\" hidden=\"0\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
			Page.GetFirstChild("LABEL_SCRIPT_NAME").Show();
			Page.GetFirstChild("QUAD_BUTTON_CHALLENGE_SCRIPT_DISABLE").Hide();
			(Page.GetFirstChild("LABEL_MAPLIST_AUTHORNAME") as CMlLabel).SetText("{{{{by}}}} "^SelectedMapInfo.AuthorNickName);
		}
	}
	
	declare Pos = 0;
	foreach(Folder,SubFolders) { // Handle all folders
		if(Pos < 8) {
			declare Frame = ((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).Controls[Pos] as CMlFrame);
			declare Label = (Frame.GetFirstChild("LABEL_MAPNAME") as CMlLabel);
			declare LabelAuthor = (Frame.GetFirstChild("LABEL_AUTHOR") as CMlLabel);
			declare LabelDownloaded = (Frame.GetFirstChild("LABEL_DOWNLOADED") as CMlLabel);
			LabelDownloaded.Hide();
			declare LabelAwards = (Frame.GetFirstChild("LABEL_AWARDS") as CMlLabel);
			LabelAwards.Hide();

			declare Folders = TextLib::Split("\\",Folder);
			Label.SetText(" "^Folders[Folders.count-1]);
			LabelAuthor.SetText("");
			Frame.GetFirstChild("QUAD_SELECTOR").Show();
			(Frame.GetFirstChild("QUAD_SELECTOR") as CMlQuad).ModulateColor = <1.0,0.75,0.0>;
			Frame.GetFirstChild("QUAD_INVALID").Hide();

			Frame.DataAttributeSet("folder",Folder);
			Frame.DataAttributeSet("mapinfo","");

			(Frame.GetFirstChild("QUAD_SELECTOR") as CMlQuad).Substyle = "BgCardInventoryItem";

			//VisibleMapInfos.add(Null);

			Pos+=1;
		}
	}
	foreach(MapInfo,MapInfos) { // Handle all actual maps
		if(Pos < 8) {
			declare Frame = ((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).Controls[Pos] as CMlFrame);
			declare Label = (Frame.GetFirstChild("LABEL_MAPNAME") as CMlLabel);
			declare LabelAuthor = (Frame.GetFirstChild("LABEL_AUTHOR") as CMlLabel);
			declare LabelDownloaded = (Frame.GetFirstChild("LABEL_DOWNLOADED") as CMlLabel);
			LabelDownloaded.Hide();
			declare LabelAwards = (Frame.GetFirstChild("LABEL_AWARDS") as CMlLabel);
			LabelAwards.Hide();

			Label.SetText(MapInfo.Name);
			LabelAuthor.SetText("{{{{by}}}} " ^ MapInfo.AuthorNickName);
			Frame.GetFirstChild("QUAD_SELECTOR").Show();
			(Frame.GetFirstChild("QUAD_SELECTOR") as CMlQuad).ModulateColor = <1.0,1.0,1.0>;

			Frame.DataAttributeSet("folder","");
			Frame.DataAttributeSet("mapinfo",MapInfo.tojson());

			if(SelectedMapInfo == MapInfo) {
				(Frame.GetFirstChild("QUAD_SELECTOR") as CMlQuad).Substyle = "BgCard";
			}
			else
				(Frame.GetFirstChild("QUAD_SELECTOR") as CMlQuad).Substyle = "BgCardInventoryItem";

			if(MapInfo.IsPlayable)
				Frame.GetFirstChild("QUAD_INVALID").Hide();
			else
				Frame.GetFirstChild("QUAD_INVALID").Show();

			//VisibleMapInfos.add(MapInfo);

			Pos+=1;
		}
	}
	for(i,Pos,8-1) { // Handle unused map slots
		declare Frame <=> ((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).Controls[i] as CMlFrame);
		(Frame.GetFirstChild("LABEL_MAPNAME") as CMlLabel).SetText("");
		(Frame.GetFirstChild("LABEL_AUTHOR") as CMlLabel).SetText("");
		Frame.GetFirstChild("QUAD_SELECTOR").Hide();
		Frame.GetFirstChild("LABEL_DOWNLOADED").Hide();
		Frame.GetFirstChild("LABEL_AWARDS").Hide();
		Frame.GetFirstChild("QUAD_INVALID").Hide();
	}

	if(SelectedMapInfo.Name == "") (Page.GetFirstChild("LABEL_MAP_NAME") as CMlLabel).SetText("{{{{LOCAL_MAPS}}}} / $888{{{{no_map_selected}}}}");
	else (Page.GetFirstChild("LABEL_MAP_NAME") as CMlLabel).SetText("{{{{LOCAL_MAPS}}}} / " ^ SelectedMapInfo.Name);
}

Void UpdateManiaExchange(Integer _Offset) {
	declare MXTrackInfos = MapBrowserMXTrackInfos;

	declare Frame_MapList = (Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame);
	Frame_MapList.ScrollActive = True;
	Frame_MapList.ScrollMax = <0.,10.*(MapBrowserMXTrackInfos.count)-80>;
	Frame_MapList.ScrollMin = <0.,0.>;
	Frame_MapList.ScrollGridSnap = True;
	Frame_MapList.ScrollGrid = <0.,10.>;
	Frame_MapList.ScrollOffset = <0.,_Offset*10.0>;

	if(_Offset != 0) {
		for(i,0,_Offset-1) {
			MXTrackInfos.removekey(0);
		}
	}

	if(SelectedMXTrackInfo.TrackUID != "") {
		(Page.GetFirstChild("QUAD_MAPLIST_THUMBNAIL") as CMlQuad).ChangeImageUrl("https://tm.mania-exchange.com/tracks/thumbnail/"^SelectedMXTrackInfo.TrackID^"?.jpg");
		(Page.GetFirstChild("LABEL_MAPLIST_MAPNAME") as CMlLabel).SetText("$l[https://tm.mania-exchange.com/tracks/"^SelectedMXTrackInfo.TrackID^"]"^SelectedMXTrackInfo.GbxMapName);
		(Page.GetFirstChild("LABEL_MAPLIST_AUTHORNAME") as CMlLabel).SetText("{{{{by}}}} $l[https://tm.mania-exchange.com/user/profile/"^SelectedMXTrackInfo.UserID^"]"^SelectedMXTrackInfo.Username);
		(Page.GetFirstChild("ENTRY_MAPLIST_UID") as CMlEntry).Value = SelectedMXTrackInfo.TrackUID;

		if(SelectedMXTrackInfo.MapType == "Challenge") {
			Page.GetFirstChild("LABEL_SCRIPT_NAME").Hide();
			//AnimMgr.Add(Page.GetFirstChild("LABEL_SCRIPT_NAME"), "<label opacity=\"0\" hidden=\"1\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
			Page.GetFirstChild("QUAD_BUTTON_CHALLENGE_SCRIPT_DISABLE").Show();

			AnimMgr.Add(Page.GetFirstChild("FRAME_CHALLENGE_SCRIPT"), "<frame pos=\"0 0\" hidden=\"1\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
			Page.GetFirstChild("FRAME_CHALLENGE_SCRIPT").DataAttributeSet("open","0");
		}
		else {
			Page.GetFirstChild("LABEL_SCRIPT_NAME").Show();
			//AnimMgr.Add(Page.GetFirstChild("LABEL_SCRIPT_NAME"), "<label opacity=\"1\" hidden=\"0\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
			Page.GetFirstChild("QUAD_BUTTON_CHALLENGE_SCRIPT_DISABLE").Hide();
		}
	}

	declare Pos = 0;
	foreach(TrackInfo,MXTrackInfos) {
		if(Pos < 8) {
			declare Frame = ((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).Controls[Pos] as CMlFrame);
			declare Label = (Frame.GetFirstChild("LABEL_MAPNAME") as CMlLabel);
			declare LabelAuthor = (Frame.GetFirstChild("LABEL_AUTHOR") as CMlLabel);
			declare LabelDownloaded = (Frame.GetFirstChild("LABEL_DOWNLOADED") as CMlLabel);
			declare LabelAwards = (Frame.GetFirstChild("LABEL_AWARDS") as CMlLabel);

			Label.SetText(TrackInfo.GbxMapName);
			LabelAuthor.SetText("{{{{by}}}} " ^ TrackInfo.Username);
			Frame.GetFirstChild("QUAD_SELECTOR").Show();
			(Frame.GetFirstChild("QUAD_SELECTOR") as CMlQuad).ModulateColor = <1.0,1.0,1.0>;

			if(DownloadedMapUids.exists(TrackInfo.TrackUID)) LabelDownloaded.Show();
			else LabelDownloaded.Hide();

			if(TrackInfo.AwardCount > 0) {
				LabelAwards.Show();
				LabelAwards.SetText(TrackInfo.AwardCount^"");
			}
			else LabelAwards.Hide();

			Frame.DataAttributeSet("folder","");
			Frame.DataAttributeSet("mapinfo",TrackInfo.tojson());

			if(SelectedMXTrackInfo == TrackInfo) {
				(Frame.GetFirstChild("QUAD_SELECTOR") as CMlQuad).Substyle = "BgCard";
			}
			else
				(Frame.GetFirstChild("QUAD_SELECTOR") as CMlQuad).Substyle = "BgCardInventoryItem";

			//VisibleMapInfos.add(MapInfo);
			Frame.GetFirstChild("QUAD_INVALID").Hide();

			Pos+=1;
		}
	}
	for(i,Pos,8-1) { // Handle unused map slots
		declare Frame <=> ((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).Controls[i] as CMlFrame);
		(Frame.GetFirstChild("LABEL_MAPNAME") as CMlLabel).SetText("");
		(Frame.GetFirstChild("LABEL_AUTHOR") as CMlLabel).SetText("");
		Frame.GetFirstChild("QUAD_SELECTOR").Hide();
		Frame.GetFirstChild("QUAD_INVALID").Hide();
	}

	(Page.GetFirstChild("LABEL_MAPLIST_MEDALNADEO") as CMlLabel).SetText("???");
	(Page.GetFirstChild("LABEL_MAPLIST_MEDALGOLD") as CMlLabel).SetText("???");
	(Page.GetFirstChild("LABEL_MAPLIST_MEDALSILVER") as CMlLabel).SetText("???");
	(Page.GetFirstChild("LABEL_MAPLIST_MEDALBRONZE") as CMlLabel).SetText("???");

	if(MathLib::NearestInteger(Frame_MapList.ScrollMax.Y) == MathLib::NearestInteger(Frame_MapList.ScrollOffset.Y)) { //Not equal in Real but equal in Integer, nice lol
		//Page.GetFirstChild("FRAME_MAPLIST_LOADING").Show();
		MXPage += 1;
		SendCustomEvent("MapList_ManiaExchange_Add", [MXPage^"", FilterMX.tojson(), ""]);
	}

	if(SelectedMXTrackInfo.GbxMapName == "") (Page.GetFirstChild("LABEL_MAP_NAME") as CMlLabel).SetText("mania$0ffexchange$z / $888{{{{no_map_selected}}}}");
	else (Page.GetFirstChild("LABEL_MAP_NAME") as CMlLabel).SetText("mania$0ffexchange$z / " ^ SelectedMXTrackInfo.GbxMapName);
}

Void UpdateMapManager(Integer _Offset) {
	declare Maps = MapBrowserManagerTrackInfos;

	declare Frame_MapList = (Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame);
	Frame_MapList.ScrollActive = True;
	Frame_MapList.ScrollMax = <0.,10.*(Maps.count)-80>;
	Frame_MapList.ScrollMin = <0.,0.>;
	Frame_MapList.ScrollGridSnap = True;
	Frame_MapList.ScrollGrid = <0.,10.>;
	Frame_MapList.ScrollOffset = <0.,_Offset*10.0>;

	if(_Offset != 0) {
		for(i,0,_Offset-1) {
			Maps.removekey(0);
		}
	}

	if(SelectedManagerMapInfo.Uid != "") {
		(Page.GetFirstChild("QUAD_MAPLIST_THUMBNAIL") as CMlQuad).ChangeImageUrl(SelectedManagerMapInfo.ThumbnailUrl);
		(Page.GetFirstChild("LABEL_MAPLIST_MAPNAME") as CMlLabel).SetText("$l[https://www.maniaplanet.com/maps/manager/"^SelectedManagerMapInfo.Uid^"]"^SelectedManagerMapInfo.Name);
		if(Nicknames.existskey(SelectedManagerMapInfo.AuthorLogin) && Nicknames[SelectedManagerMapInfo.AuthorLogin] != "")
			(Page.GetFirstChild("LABEL_MAPLIST_AUTHORNAME") as CMlLabel).SetText("{{{{by}}}} "^Nicknames[SelectedManagerMapInfo.AuthorLogin]);
		else
			(Page.GetFirstChild("LABEL_MAPLIST_AUTHORNAME") as CMlLabel).SetText("{{{{by}}}} "^SelectedManagerMapInfo.AuthorLogin);
		(Page.GetFirstChild("ENTRY_MAPLIST_UID") as CMlEntry).Value = SelectedManagerMapInfo.Uid;

		/*if(SelectedManagerMapInfo.MapType == "Challenge") {
			Page.GetFirstChild("LABEL_SCRIPT_NAME").Hide();
			//AnimMgr.Add(Page.GetFirstChild("LABEL_SCRIPT_NAME"), "<label opacity=\"0\" hidden=\"1\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
			Page.GetFirstChild("QUAD_BUTTON_CHALLENGE_SCRIPT_DISABLE").Show();

			AnimMgr.Add(Page.GetFirstChild("FRAME_CHALLENGE_SCRIPT"), "<frame pos=\"0 0\" hidden=\"1\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
			Page.GetFirstChild("FRAME_CHALLENGE_SCRIPT").DataAttributeSet("open","0");
		}
		else {*/
			Page.GetFirstChild("LABEL_SCRIPT_NAME").Show();
			//AnimMgr.Add(Page.GetFirstChild("LABEL_SCRIPT_NAME"), "<label opacity=\"1\" hidden=\"0\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
			Page.GetFirstChild("QUAD_BUTTON_CHALLENGE_SCRIPT_DISABLE").Hide();
		//}
	}

	declare Pos = 0;
	foreach(TrackInfo,Maps) {
		if(Pos < 8) {
			declare Frame = ((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).Controls[Pos] as CMlFrame);
			declare Label = (Frame.GetFirstChild("LABEL_MAPNAME") as CMlLabel);
			declare LabelAuthor = (Frame.GetFirstChild("LABEL_AUTHOR") as CMlLabel);
			declare LabelDownloaded = (Frame.GetFirstChild("LABEL_DOWNLOADED") as CMlLabel);
			(Frame.GetFirstChild("LABEL_AWARDS") as CMlLabel).Hide();

			Label.SetText(TrackInfo.Name);
			if(Nicknames.existskey(TrackInfo.AuthorLogin) && Nicknames[TrackInfo.AuthorLogin] != "")
				LabelAuthor.SetText("{{{{by}}}} "^Nicknames[TrackInfo.AuthorLogin]);
			else {
				LabelAuthor.SetText("{{{{by}}}} "^TrackInfo.AuthorLogin);

				if(!Nicknames.existskey(TrackInfo.AuthorLogin)) {
					SendCustomEvent("Nickname", [TrackInfo.AuthorLogin]);
					Nicknames[TrackInfo.AuthorLogin] = "";
				}
			}

			Frame.GetFirstChild("QUAD_SELECTOR").Show();
			(Frame.GetFirstChild("QUAD_SELECTOR") as CMlQuad).ModulateColor = <1.0,1.0,1.0>;

			if(DownloadedMapUids.exists(TrackInfo.Uid)) LabelDownloaded.Show();
			else LabelDownloaded.Hide();

			Frame.DataAttributeSet("folder","");
			Frame.DataAttributeSet("mapinfo",TrackInfo.tojson());

			if(SelectedManagerMapInfo == TrackInfo) {
				(Frame.GetFirstChild("QUAD_SELECTOR") as CMlQuad).Substyle = "BgCard";
			}
			else
				(Frame.GetFirstChild("QUAD_SELECTOR") as CMlQuad).Substyle = "BgCardInventoryItem";

			//VisibleMapInfos.add(MapInfo);

			Frame.GetFirstChild("QUAD_INVALID").Hide();

			Pos+=1;
		}
	}
	for(i,Pos,8-1) { // Handle unused map slots
		declare Frame <=> ((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).Controls[i] as CMlFrame);
		(Frame.GetFirstChild("LABEL_MAPNAME") as CMlLabel).SetText("");
		(Frame.GetFirstChild("LABEL_AUTHOR") as CMlLabel).SetText("");
		Frame.GetFirstChild("QUAD_SELECTOR").Hide();
		Frame.GetFirstChild("QUAD_INVALID").Hide();
	}

	(Page.GetFirstChild("LABEL_MAPLIST_MEDALNADEO") as CMlLabel).SetText("???");
	(Page.GetFirstChild("LABEL_MAPLIST_MEDALGOLD") as CMlLabel).SetText("???");
	(Page.GetFirstChild("LABEL_MAPLIST_MEDALSILVER") as CMlLabel).SetText("???");
	(Page.GetFirstChild("LABEL_MAPLIST_MEDALBRONZE") as CMlLabel).SetText("???");

	if(SelectedManagerMapInfo.Name == "") (Page.GetFirstChild("LABEL_MAP_NAME") as CMlLabel).SetText("{{{{MAP_MANAGER}}}} / $888{{{{no_map_selected}}}}");
	else (Page.GetFirstChild("LABEL_MAP_NAME") as CMlLabel).SetText("{{{{MAP_MANAGER}}}} / " ^ SelectedManagerMapInfo.Name);
}

Void UpdateScriptList(Integer _Offset) {
	declare Scripts = ScriptBrowserScripts;
	declare ScriptsCount = Scripts.count;

	declare ScrollLength = 10.*ScriptsCount-100;

	declare Frame_MapList = (Page.GetFirstChild("FRAME_SCRIPTLIST") as CMlFrame);
	Frame_MapList.ScrollActive = True;
	if(ScrollLength>=0) Frame_MapList.ScrollMax = <0.,ScrollLength>;
	else Frame_MapList.ScrollMax = <0.,0.>;
	Frame_MapList.ScrollMin = <0.,0.>;
	Frame_MapList.ScrollGridSnap = True;
	Frame_MapList.ScrollGrid = <0.,10.>;
	Frame_MapList.ScrollOffset = <0.,_Offset*10.0>;

	if(_Offset != 0) {
		for(i,0,_Offset-1) {
			Scripts.removekey(0);
		}
	}
	
	declare Pos = 0;
	foreach(Script,Scripts) { // Handle all actual scripts
		if(Pos < 8) {
			declare Frame = ((Page.GetFirstChild("FRAME_SCRIPTLIST") as CMlFrame).Controls[Pos] as CMlFrame);
			declare Label = (Frame.GetFirstChild("LABEL_SCRIPTNAME") as CMlLabel);
			declare LabelAuthor = (Frame.GetFirstChild("LABEL_AUTHOR") as CMlLabel);
			declare FrameCounter = (Frame.GetFirstChild("FRAME_COUNTER") as CMlFrame);
			declare LabelCounter = (FrameCounter.GetFirstChild("LABEL_POSITION") as CMlLabel);

			declare Folders = TextLib::Split("\\ ",Script.Name);
			Label.SetText(Folders[Folders.count-1]);

			if(Nicknames.existskey(Script.Metadata.AuthorLogin) && Nicknames[Script.Metadata.AuthorLogin] != "")
				LabelAuthor.SetText("{{{{by}}}} "^Nicknames[Script.Metadata.AuthorLogin]);
			else {
				LabelAuthor.SetText("{{{{by}}}} "^Script.Metadata.AuthorLogin);
				
				if(!Nicknames.existskey(Script.Metadata.AuthorLogin)) {
					SendCustomEvent("Nickname", [Script.Metadata.AuthorLogin]);
					Nicknames[Script.Metadata.AuthorLogin] = "";
				}
			}

			Frame.GetFirstChild("QUAD_SELECTOR_SCRIPT").Show();
			(Frame.GetFirstChild("QUAD_SELECTOR_SCRIPT") as CMlQuad).ModulateColor = <1.0,1.0,1.0>;

			Frame.DataAttributeSet("folder","");
			Frame.DataAttributeSet("script",Script.tojson());

			if(Script.Metadata.Name == "")
			SendCustomEvent("ScriptList_Metadata", [Script.tojson()]);

			declare Text[] SelectedScriptNames;
			foreach(S,SelectedScripts) {
				SelectedScriptNames.add(S.Name);
			}
			
			if(SelectedScriptNames.exists(Script.Name)) {
				(Frame.GetFirstChild("QUAD_SELECTOR_SCRIPT") as CMlQuad).Substyle = "BgCard";

				if(IsMultipleScript()) {
					AnimMgr.Add(Label, "<label pos=\"10 0\"/>", 100, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(FrameCounter, "<frame hidden=\"0\"/>", 100, CAnimManager::EAnimManagerEasing::QuadOut);
					//FrameCounter.Show();
					LabelCounter.SetText((SelectedScriptNames.keyof(Script.Name)+1)^"");
				}
				else {
					AnimMgr.Add(Label, "<label pos=\"5 0\"/>", 100, CAnimManager::EAnimManagerEasing::QuadOut);
					FrameCounter.Hide();
				}
			}
			else {
				(Frame.GetFirstChild("QUAD_SELECTOR_SCRIPT") as CMlQuad).Substyle = "BgCardInventoryItem";
				
				AnimMgr.Add(Label, "<label pos=\"5 0\"/>", 100, CAnimManager::EAnimManagerEasing::QuadOut);
				FrameCounter.Hide();
			}
			//VisibleMapInfos.add(MapInfo);

			Pos+=1;
		}
	}
	for(i,Pos,8-1) { // Handle unused script slots
		declare Frame <=> ((Page.GetFirstChild("FRAME_SCRIPTLIST") as CMlFrame).Controls[i] as CMlFrame);
		(Frame.GetFirstChild("LABEL_SCRIPTNAME") as CMlLabel).SetText("");
		(Frame.GetFirstChild("LABEL_AUTHOR") as CMlLabel).SetText("");
		Frame.GetFirstChild("QUAD_SELECTOR_SCRIPT").Hide();
	}

	if(SelectedScripts.count == 0) {
		(Page.GetFirstChild("LABEL_SCRIPT_NAME") as CMlLabel).SetText("{{{{OFFICIAL}}}} / $888{{{{no_script_selected}}}}");
	}
	else if(SelectedScripts.count == 1) {
		declare Folders = TextLib::Split("\\ ",SelectedScripts[0].Name);
		if(Folders.count > 0) (Page.GetFirstChild("LABEL_SCRIPT_NAME") as CMlLabel).SetText("{{{{OFFICIAL}}}} / " ^ Folders[Folders.count-1]);
	}
	else if(SelectedScripts.count > 1) {
		(Page.GetFirstChild("LABEL_SCRIPT_NAME") as CMlLabel).SetText("""$o{{{SelectedScripts.count}}}/5 {{{{scripts}}}}""");
	}
}

Void Animate_Show() {
	Page.GetFirstChild("FRAME_QUICKPLAY").RelativePosition_V3.Y = -120.0;
	AnimMgr.Add(Page.GetFirstChild("FRAME_QUICKPLAY"), "<frame pos=\"0 -75\"/>", Now + 500, 500, CAnimManager::EAnimManagerEasing::QuadOut);
}

***Start***
***
declare CurrentFolder = "";
declare CurrentFolderScript = "";
declare OldMapScrollPos = (Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y;

MapLocation = "Local";
ScriptLocation = "Official";
MXPage = 1;

Page.GetClassChildren("LOADING", Page.MainFrame, True);

declare End = -1;
***

***Loop***
***
foreach(Event,PendingEvents) {
	switch(Event.Type) {
		case CMlScriptEvent::Type::EntrySubmit: {
			switch(Event.ControlId) {
				case "ENTRY_MAPLIST_MX_SEARCH": {
					if(MapLocation == "ManiaExchange") {
						FilterMX.TrackName = (Page.GetFirstChild("ENTRY_MAPLIST_MX_SEARCH") as CMlEntry).Value;
						SendCustomEvent("MapList_ManiaExchange_Update", [MXPage^"", FilterMX.tojson(), ""]);
						Page.GetFirstChild("FRAME_MAPLIST_LOADING").Show();
					}
				}
				case "ENTRY_MAPLIST_LOCAL_SEARCH": {
					if(MapLocation == "Local") {
						FilterLocal.Name = (Page.GetFirstChild("ENTRY_MAPLIST_LOCAL_SEARCH") as CMlEntry).Value;
						SendCustomEvent("MapList_Local_Folder", ["",FilterLocal.tojson()]);
						Page.GetFirstChild("FRAME_MAPLIST_LOADING").Show();
					}
				}
				case "ENTRY_MAPLIST_UID": {
					switch(MapLocation) {
						case "Local": {
							SendCustomEvent("MapList_Local_QuickUid", [(Page.GetFirstChild("ENTRY_MAPLIST_UID") as CMlEntry).Value]);
						}
						case "ManiaExchange": {
							SendCustomEvent("MapList_ManiaExchange_QuickUid", [(Page.GetFirstChild("ENTRY_MAPLIST_UID") as CMlEntry).Value]);
						}
						case "MapManager": {
							SendCustomEvent("MapList_MapManager_QuickUid", [(Page.GetFirstChild("ENTRY_MAPLIST_UID") as CMlEntry).Value]);
						}
					}
				}
			}
		}
		case CMlScriptEvent::Type::MouseClick: {
			switch(Event.ControlId) {
				case "QUAD_MAPLIST_FILTERS": {
					//SendCustomEvent("MapList_ManiaExchange_Update", [MXPage^"", (Page.GetFirstChild("ENTRY_MAPLIST_SEARCH") as CMlEntry).Value, (Page.GetFirstChild("ENTRY_MAPLIST_AUTHOR") as CMlEntry).Value]);
					//Page.GetFirstChild("FRAME_MAPLIST_LOADING").Show();
				}
				case "QUAD_BUTTON_START": {
					if(MapLocation == "Local") {
						SendCustomEvent("Button_Start", [MapLocation, SelectedMapInfo.tojson(), SelectedScripts.tojson()]);
					}
					if(MapLocation == "ManiaExchange") {
						SendCustomEvent("Button_Start", [MapLocation, SelectedMXTrackInfo.tojson(), SelectedScripts.tojson()]);
					}
					if(MapLocation == "MapManager") {
						SendCustomEvent("Button_Start", [MapLocation, SelectedManagerMapInfo.tojson(), SelectedScripts.tojson()]);
					}
				}
				case "QUAD_BUTTON_MAP": {
					if(Page.GetFirstChild("FRAME_MAP").DataAttributeGet("open") == "1") {
						AnimMgr.Add(Page.GetFirstChild("FRAME_MAP"), "<frame pos=\"0 0\" hidden=\"1\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
						Page.GetFirstChild("FRAME_MAP").DataAttributeSet("open","0");
					}
					else {
						AnimMgr.Add(Page.GetFirstChild("FRAME_MAP"), "<frame pos=\"0 100\" hidden=\"0\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
						Page.GetFirstChild("FRAME_MAP").DataAttributeSet("open","1");

						if(MapLocation == "Local") UpdateLocalMapsFolder(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
						if(MapLocation == "ManiaExchange") UpdateManiaExchange(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
						if(MapLocation == "MapManager") UpdateMapManager(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
					}
				}
				case "QUAD_BUTTON_CHALLENGE_SCRIPT": {
					if(Page.GetFirstChild("FRAME_CHALLENGE_SCRIPT").DataAttributeGet("open") == "1") {
						AnimMgr.Add(Page.GetFirstChild("FRAME_CHALLENGE_SCRIPT"), "<frame pos=\"0 0\" hidden=\"1\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
						Page.GetFirstChild("FRAME_CHALLENGE_SCRIPT").DataAttributeSet("open","0");
					}
					else {
						AnimMgr.Add(Page.GetFirstChild("FRAME_CHALLENGE_SCRIPT"), "<frame pos=\"0 100\" hidden=\"0\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
						Page.GetFirstChild("FRAME_CHALLENGE_SCRIPT").DataAttributeSet("open","1");

						if(ScriptLocation == "Official") UpdateScriptList(MathLib::NearestInteger((Page.GetFirstChild("FRAME_SCRIPTLIST") as CMlFrame).ScrollOffset.Y/10.0));
					}
				}
				case "QUAD_SELECTOR": {
					if(MapLocation == "Local") {
						declare Folder = Event.Control.Parent.DataAttributeGet("folder");
						if(Folder == "") {
							declare Index = TextLib::ToInteger(Event.Control.Parent.DataAttributeGet("index"));
							//log(VisibleMapInfos[Index].Name);
							declare JsonSuccess = SelectedMapInfo.fromjson(Event.Control.Parent.DataAttributeGet("mapinfo"));
							
						}
						else if (Folder == "...") {
							declare Folders = TextLib::Split("\\",CurrentFolder);
							if(Folders.count > 0) {
								Folders.removekey(Folders.count-1);
								declare NewFolder = TextLib::Join("\\",Folders);
								SendCustomEvent("MapList_Local_Folder", [NewFolder,FilterLocal.tojson()]);
							}
							else {
								log("Yo, what dimension is this 8|");
							}
						}
						else {
							SendCustomEvent("MapList_Local_Folder", [Folder, FilterLocal.tojson()]);
						}

						UpdateLocalMapsFolder(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
					}
					if(MapLocation == "ManiaExchange") {
						declare Index = TextLib::ToInteger(Event.Control.Parent.DataAttributeGet("index"));
						declare JsonSuccess = SelectedMXTrackInfo.fromjson(Event.Control.Parent.DataAttributeGet("mapinfo"));

						UpdateManiaExchange(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
					}
					if(MapLocation == "MapManager") {
						declare JsonSuccess = SelectedManagerMapInfo.fromjson(Event.Control.Parent.DataAttributeGet("mapinfo"));
						UpdateMapManager(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
					}
				}
				case "QUAD_SELECTOR_SCRIPT": {
					if(ScriptLocation == "Official") {
						declare Script = Event.Control.Parent.DataAttributeGet("script");
						declare Folder = Event.Control.Parent.DataAttributeGet("folder");

						declare SChScriptInfo Info;
						declare JsonSuccess = Info.fromjson(Script);

						declare Text[] SelectedScriptNames;
						foreach(S,SelectedScripts) {
							SelectedScriptNames.add(S.Name);
						}

						if(SelectedScriptNames.exists(Info.Name)){
							for(i,0,SelectedScriptNames.count-1)
								if(SelectedScriptNames[i] == Info.Name)
									SelectedScripts.removekey(i);
						}
						else if(SelectedScripts.count == 0 || (IsMultipleScript() && SelectedScripts.count < 5))
							SelectedScripts.add(Info);
						else if(SelectedScripts.count == 1)
							SelectedScripts[0] = Info;
						

						/*if(Folder == "") {
							declare Index = TextLib::ToInteger(Event.Control.Parent.DataAttributeGet("index"));
							//log(VisibleMapInfos[Index].Name);
							SelectedMapInfo.fromjson(Event.Control.Parent.DataAttributeGet("mapinfo"));
							
						}
						else if (Folder == "...") {
							declare Folders = TextLib::Split("\\",CurrentFolder);
							if(Folders.count > 0) {
								Folders.removekey(Folders.count-1);
								declare NewFolder = TextLib::Join("\\",Folders);
								SendCustomEvent("MapList_Local_Folder", [NewFolder,(Page.GetFirstChild("ENTRY_MAPLIST_SEARCH") as CMlEntry).Value, (Page.GetFirstChild("ENTRY_MAPLIST_AUTHOR") as CMlEntry).Value]);
							}
							else {
								log("Yo, what dimension is this 8|");
							}
						}
						else {
							SendCustomEvent("MapList_Local_Folder", [Folder, (Page.GetFirstChild("ENTRY_MAPLIST_SEARCH") as CMlEntry).Value, (Page.GetFirstChild("ENTRY_MAPLIST_AUTHOR") as CMlEntry).Value]);
						}*/

						UpdateScriptList(MathLib::NearestInteger((Page.GetFirstChild("FRAME_SCRIPTLIST") as CMlFrame).ScrollOffset.Y/10.0));
					}
				}
				case "QUAD_LOCATION_MAP_LOCAL": {
					SendCustomEvent("MapList_Local_Folder", ["",FilterLocal.tojson()]);
					MapLocation = "Local";
				}
				case "QUAD_LOCATION_MAP_MX": {
					if(MapLocation != "ManiaExchange") {
						MapLocation = "ManiaExchange";

						Page.GetFirstChild("FRAME_MAP_BAR_LOCAL").Hide();
						Page.GetFirstChild("FRAME_MAP_BAR_MX").Show();
						Page.GetFirstChild("FRAME_MAP_BAR_MAPMANAGER").Hide();

						(Event.Control as CMlQuad).ModulateColor = <0.0,0.2,0.4>;
						(Page.GetFirstChild("QUAD_LOCATION_MAP_LOCAL") as CMlQuad).ModulateColor = <0.2,0.2,0.2>;
						(Page.GetFirstChild("QUAD_LOCATION_MAP_MAPMANAGER") as CMlQuad).ModulateColor = <0.2,0.2,0.2>;

						(Page.GetFirstChild("QUAD_MAPLIST_THUMBNAIL") as CMlQuad).ChangeImageUrl("https://tm.mania-exchange.com/tracks/thumbnail/"^SelectedMXTrackInfo.TrackID^"?.jpg");
						(Page.GetFirstChild("LABEL_MAPLIST_MAPNAME") as CMlLabel).SetText(SelectedMXTrackInfo.GbxMapName);
						if(SelectedMXTrackInfo.Username == "") (Page.GetFirstChild("LABEL_MAPLIST_AUTHORNAME") as CMlLabel).SetText("");
						else (Page.GetFirstChild("LABEL_MAPLIST_AUTHORNAME") as CMlLabel).SetText("{{{{by}}}} "^SelectedMXTrackInfo.Username);
						(Page.GetFirstChild("ENTRY_MAPLIST_UID") as CMlEntry).Value = SelectedMXTrackInfo.TrackUID;

						(Page.GetFirstChild("LABEL_MAPLIST_MEDALNADEO") as CMlLabel).SetText("???");
						(Page.GetFirstChild("LABEL_MAPLIST_MEDALGOLD") as CMlLabel).SetText("???");
						(Page.GetFirstChild("LABEL_MAPLIST_MEDALSILVER") as CMlLabel).SetText("???");
						(Page.GetFirstChild("LABEL_MAPLIST_MEDALBRONZE") as CMlLabel).SetText("???");

						SendCustomEvent("MapList_DestroyMapManager", []);

						if(MapBrowserMXTrackInfos.count == 0) {
							SendCustomEvent("MapList_ManiaExchange_Update", ["1", FilterMX.tojson(), ""]);
							Page.GetFirstChild("FRAME_MAPLIST_LOADING").Show();
						}
						else {
							UpdateManiaExchange(0);
							Page.GetFirstChild("FRAME_MAPLIST_LOADING").Hide();
						}
					}
				}
				case "QUAD_LOCATION_MAP_MAPMANAGER": {
					if(MapLocation != "MapManager") {
						MapLocation = "MapManager";

						Page.GetFirstChild("FRAME_MAP_BAR_LOCAL").Hide();
						Page.GetFirstChild("FRAME_MAP_BAR_MX").Hide();
						Page.GetFirstChild("FRAME_MAP_BAR_MAPMANAGER").Show();

						(Event.Control as CMlQuad).ModulateColor = <0.0,0.2,0.4>;
						(Page.GetFirstChild("QUAD_LOCATION_MAP_LOCAL") as CMlQuad).ModulateColor = <0.2,0.2,0.2>;
						(Page.GetFirstChild("QUAD_LOCATION_MAP_MX") as CMlQuad).ModulateColor = <0.2,0.2,0.2>;

						(Page.GetFirstChild("LABEL_MAPLIST_MAPNAME") as CMlLabel).SetText(SelectedManagerMapInfo.Name);
						if(SelectedMXTrackInfo.Username == "") (Page.GetFirstChild("LABEL_MAPLIST_AUTHORNAME") as CMlLabel).SetText("");
						else (Page.GetFirstChild("LABEL_MAPLIST_AUTHORNAME") as CMlLabel).SetText("{{{{by}}}} "^SelectedManagerMapInfo.AuthorLogin);
						(Page.GetFirstChild("ENTRY_MAPLIST_UID") as CMlEntry).Value = SelectedManagerMapInfo.Uid;

						if(MapBrowserManagerTrackInfos.count == 0) {
							SendCustomEvent("MapList_MapManager_Update", [(Page.GetFirstChild("ENTRY_MAPLIST_MANAGER_SEARCH") as CMlEntry).Value, ""^((Page.GetFirstChild("QUAD_MANAGER_SHOWPRIVATE") as CMlQuad).ModulateColor == <0.0,0.2,0.4>)]);
							Page.GetFirstChild("FRAME_MAPLIST_LOADING").Show();
						}
						else {
							UpdateMapManager(0);
							Page.GetFirstChild("FRAME_MAPLIST_LOADING").Hide();
						}
					}
				}

				case "QUAD_LOCATION_SCRIPT_OFFICIAL": {
					(Event.Control as CMlQuad).ModulateColor = <0.0,0.2,0.4>;
					(Page.GetFirstChild("QUAD_LOCATION_SCRIPT_LOCAL") as CMlQuad).ModulateColor = <0.2,0.2,0.2>;
					(Page.GetFirstChild("QUAD_LOCATION_SCRIPT_ONLINE") as CMlQuad).ModulateColor = <0.2,0.2,0.2>;

					ScriptLocation = "Official";
				}
				case "QUAD_LOCATION_SCRIPT_LOCAL": {
					(Event.Control as CMlQuad).ModulateColor = <0.0,0.2,0.4>;
					(Page.GetFirstChild("QUAD_LOCATION_SCRIPT_OFFICIAL") as CMlQuad).ModulateColor = <0.2,0.2,0.2>;
					(Page.GetFirstChild("QUAD_LOCATION_SCRIPT_ONLINE") as CMlQuad).ModulateColor = <0.2,0.2,0.2>;

					ScriptLocation = "Local";
				}
				case "QUAD_LOCATION_SCRIPT_ONLINE": {
					(Event.Control as CMlQuad).ModulateColor = <0.0,0.2,0.4>;
					(Page.GetFirstChild("QUAD_LOCATION_SCRIPT_OFFICIAL") as CMlQuad).ModulateColor = <0.2,0.2,0.2>;
					(Page.GetFirstChild("QUAD_LOCATION_SCRIPT_LOCAL") as CMlQuad).ModulateColor = <0.2,0.2,0.2>;

					ScriptLocation = "Online";
				}
				case "QUAD_SCRIPT_MULTIPLE": {
					if((Event.Control as CMlQuad).ModulateColor == <0.2,0.2,0.2>) {
						(Event.Control as CMlQuad).ModulateColor = <0.0,0.2,0.4>;
					}
					else {
						(Event.Control as CMlQuad).ModulateColor = <0.2,0.2,0.2>;
						while(SelectedScripts.count > 1)
							SelectedScripts.removekey(SelectedScripts.count - 1);
					}
					UpdateScriptList(MathLib::NearestInteger((Page.GetFirstChild("FRAME_SCRIPTLIST") as CMlFrame).ScrollOffset.Y/10.0));
				}
				case "LABEL_MAPLIST_REFRESH": {
					SendCustomEvent("MapList_Local_Refresh", []);
				}
				case "QUAD_MANAGER_SHOWPRIVATE": {
					if((Event.Control as CMlQuad).ModulateColor == <0.2,0.2,0.2>) {
						(Event.Control as CMlQuad).ModulateColor = <0.0,0.2,0.4>;
						SendCustomEvent("MapList_MapManager_Update", [(Page.GetFirstChild("ENTRY_MAPLIST_MANAGER_SEARCH") as CMlEntry).Value, "True"]);
						Page.GetFirstChild("FRAME_MAPLIST_LOADING").Show();
					}
					else {
						(Event.Control as CMlQuad).ModulateColor = <0.2,0.2,0.2>;
						SendCustomEvent("MapList_MapManager_Update", [(Page.GetFirstChild("ENTRY_MAPLIST_MANAGER_SEARCH") as CMlEntry).Value, "False"]);
						Page.GetFirstChild("FRAME_MAPLIST_LOADING").Show();
					}
				}

				case "LABEL_MOREFILTERS_MX": {
					if(MapLocation == "ManiaExchange") {
						if(Page.GetFirstChild("FRAME_FILTER_MX").Visible) AnimMgr.Add(Page.GetFirstChild("FRAME_FILTER_MX"), "<frame clipsizen=\"0 50\" hidden=\"1\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
						else AnimMgr.Add(Page.GetFirstChild("FRAME_FILTER_MX"), "<frame clipsizen=\"100 50\" hidden=\"0\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
					}
				}
			}
		}
		
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch(Event.CustomEventType) {
				case "Show": {
					Animate_Show();
				}
				case "Hide": {
					AnimMgr.Add(Page.GetFirstChild("FRAME_MAP"), "<frame pos=\"0 0\" hidden=\"1\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
					Page.GetFirstChild("FRAME_MAP").DataAttributeSet("open","0");
					AnimMgr.Add(Page.GetFirstChild("FRAME_CHALLENGE_SCRIPT"), "<frame pos=\"0 0\" hidden=\"1\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
					Page.GetFirstChild("FRAME_CHALLENGE_SCRIPT").DataAttributeSet("open","0");

					AnimMgr.Add(Page.GetFirstChild("FRAME_QUICKPLAY"), "<frame pos=\"0 -120\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
					End = Now;
				}
				case "MapList_Local_Update": {
					CurrentFolder = Event.CustomEventData[0];
					declare Text[] SubFolders;
					declare SMapInfo[] MapInfos;
					declare JsonSuccessSubFolders = SubFolders.fromjson(Event.CustomEventData[1]);
					declare JsonSuccessMapInfos = MapInfos.fromjson(Event.CustomEventData[2]);
					MapBrowserSubFolders = SubFolders;
					MapBrowserMapInfos = MapInfos;
					UpdateLocalMapsFolder(0);

					(Page.GetFirstChild("QUAD_LOCATION_MAP_LOCAL") as CMlQuad).ModulateColor = <0.0,0.2,0.4>;
					(Page.GetFirstChild("QUAD_LOCATION_MAP_MX") as CMlQuad).ModulateColor = <0.2,0.2,0.2>;
					(Page.GetFirstChild("QUAD_LOCATION_MAP_MAPMANAGER") as CMlQuad).ModulateColor = <0.2,0.2,0.2>;

					Page.GetFirstChild("FRAME_MAP_BAR_LOCAL").Show();
					Page.GetFirstChild("FRAME_MAP_BAR_MX").Hide();
					Page.GetFirstChild("FRAME_MAP_BAR_MAPMANAGER").Hide();

					/*
					(Page.GetFirstChild("QUAD_MAPLIST_THUMBNAIL") as CMlQuad).ChangeImageUrl("file://Thumbnails/MapUid/"^SelectedMapInfo.MapUid);
					(Page.GetFirstChild("LABEL_MAPLIST_MAPNAME") as CMlLabel).SetText(SelectedMapInfo.Name);
					(Page.GetFirstChild("LABEL_MAPLIST_AUTHORNAME") as CMlLabel).SetText("{{{{by}}}} "^SelectedMapInfo.AuthorNickName);

					(Page.GetFirstChild("LABEL_MAPLIST_MEDALNADEO") as CMlLabel).SetText(TimeToTextWithMilli(SelectedMapInfo.TMObjective_AuthorTime));
					(Page.GetFirstChild("LABEL_MAPLIST_MEDALGOLD") as CMlLabel).SetText(TimeToTextWithMilli(SelectedMapInfo.TMObjective_GoldTime));
					(Page.GetFirstChild("LABEL_MAPLIST_MEDALSILVER") as CMlLabel).SetText(TimeToTextWithMilli(SelectedMapInfo.TMObjective_SilverTime));
					(Page.GetFirstChild("LABEL_MAPLIST_MEDALBRONZE") as CMlLabel).SetText(TimeToTextWithMilli(SelectedMapInfo.TMObjective_BronzeTime));*/

					Page.GetFirstChild("FRAME_MAPLIST_LOADING").Hide();
				}
				case "MapList_MX_Add": {
					declare SMXTrackInfo[] NewTracks;
					declare JsonSuccess = NewTracks.fromjson(Event.CustomEventData[0]);
					foreach(Track,NewTracks) MapBrowserMXTrackInfos.add(Track);
					UpdateManiaExchange(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
					
					Page.GetFirstChild("FRAME_MAPLIST_LOADING").Hide();
				}
				case "MapList_MX_Update": {
					declare JsonSuccess = MapBrowserMXTrackInfos.fromjson(Event.CustomEventData[0]);
					UpdateManiaExchange(0);
					
					Page.GetFirstChild("FRAME_MAPLIST_LOADING").Hide();
				}
				case "ScriptList_Official_Update": {
					declare SChScriptInfo[] Scripts;
					declare JsonSuccess = Scripts.fromjson(Event.CustomEventData[0]);
					ScriptBrowserScripts = Scripts;
					UpdateScriptList(0);
				}
				case "ScriptList_Metadata_Response": {
					declare SChMetadata Metadata;
					declare JsonSuccess = Metadata.fromjson(Event.CustomEventData[1]);
					for(i,0,ScriptBrowserScripts.count-1) {
						if(ScriptBrowserScripts[i].Name == Event.CustomEventData[0])
							ScriptBrowserScripts[i].Metadata = Metadata;
					}
					UpdateScriptList(MathLib::NearestInteger((Page.GetFirstChild("FRAME_SCRIPTLIST") as CMlFrame).ScrollOffset.Y/10.0));
				}
				case "NicknameUpdate": {
					declare JsonSuccess = Nicknames.fromjson(Event.CustomEventData[0]);
					UpdateScriptList(MathLib::NearestInteger((Page.GetFirstChild("FRAME_SCRIPTLIST") as CMlFrame).ScrollOffset.Y/10.0));
					if(MapLocation == "ManiaExchange")
						UpdateManiaExchange(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
					else if(MapLocation == "MapManager")
						UpdateMapManager(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
				}
				case "Downloaded_MapUids": {
					declare JsonSuccess = DownloadedMapUids.fromjson(Event.CustomEventData[0]);
					if(MapLocation == "ManiaExchange")
						UpdateManiaExchange(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
					else if(MapLocation == "MapManager")
						UpdateMapManager(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
				}
				case "MapManager_Maps": {
					declare JsonSuccess = MapBrowserManagerTrackInfos.fromjson(Event.CustomEventData[0]);
					UpdateMapManager(0);
					Page.GetFirstChild("FRAME_MAPLIST_LOADING").Hide();
				}
				case "MapList_Local_Refresh_Response": {
					UpdateLocalMapsFolder(0);
				}
				case "MapList_Local_QuickUid_Response": {
					declare JsonSuccess = SelectedMapInfo.fromjson(Event.CustomEventData[0]);
					UpdateLocalMapsFolder(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
				}
				case "MapList_ManiaExchange_QuickUid_Response": {
					declare JsonSuccess = SelectedMXTrackInfo.fromjson(Event.CustomEventData[0]);
					UpdateManiaExchange(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
				}
				case "MapList_MapManager_QuickUid_Response": {
					declare JsonSuccess = SelectedManagerMapInfo.fromjson(Event.CustomEventData[0]);
					UpdateMapManager(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
				}
			}
		}
	}
}

if(End != -1)
if(Now - End > 500) {
	SendCustomEvent("Hide_Response", []);
	End = -1;
}

if(OldMapScrollPos != (Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y) {
	declare Index = 0.0;
	
	if(MapLocation == "Local") UpdateLocalMapsFolder(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
	if(MapLocation == "ManiaExchange") UpdateManiaExchange(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));
	if(MapLocation == "MapManager") UpdateMapManager(MathLib::NearestInteger((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y/10.0));

	// Adjust selector positions and fake scrolling
	foreach(Frame,(Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).Controls) {
		Frame.RelativePosition_V3 = <0.0,-5 - Index * 10. - (Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y>;
		Index += 1;
	}
	//

	OldMapScrollPos = (Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollOffset.Y;
}

// Scroll bar stuff
if((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollMax.Y > 0) {
	declare ScrollRatio = OldMapScrollPos/(Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollMax.Y;
	Page.GetFirstChild("QUAD_MAPLIST_BAR").Show();
	Page.GetFirstChild("QUAD_MAPLIST_BAR").Size.Y = 70/((Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollMax.Y/10.0);
	Page.GetFirstChild("QUAD_MAPLIST_BAR").RelativePosition_V3.Y = -20.0-ScrollRatio*(80.0-Page.GetFirstChild("QUAD_MAPLIST_BAR").Size.Y);

	//(Page.GetFirstChild("QUAD_MAPLIST_BAR") as CMlGauge).Ratio = OldMapScrollPos/(Page.GetFirstChild("FRAME_MAPLIST") as CMlFrame).ScrollMax.Y;
}
else {
	Page.GetFirstChild("QUAD_MAPLIST_BAR").Hide();
}
//

foreach(Control,Page.GetClassChildren_Result) {
	Control.RelativeRotation += Period / 5.0;
}
***