#Struct SPublicMap {
	Boolean Public;
	Boolean IsNadeoMap;
	Text Name;
	Text Uid;
	Text Author;
	Text OriginalName;
	Text OriginalUid;
	Text OriginalAuthor;
}

#Struct SUser {
	Text Login;
	Text Nickname;
}

#Struct SChatMessage {
	Text Nickname;
	Text Login;
	Text Zone;
	Text Content;
	Text Date;
	Text Timestamp;
}

***Start***
***
declare SPublicMap PublicMap;
declare Integer PreviousCount;
declare Integer EndOfYellow = -1;

declare Integer Ping for Page;
Ping = -1;
***

***Loop***
***
foreach(Event,PendingEvents) {
	switch(Event.Type) {
		case CMlScriptEvent::Type::EntrySubmit: {
			switch(Event.ControlId) {
				case "ENTRY_CHAT": {
					declare Message = (Event.Control as CMlEntry).Value;
					SendCustomEvent("SendMessage", [Message]);
					(Event.Control as CMlEntry).Value = "";
				}
			}
		}
		case CMlScriptEvent::Type::MouseOver: {
			switch(Event.ControlId) {
				case "LABEL_COUNT": {
					if(PreviousCount > 0)
						Page.GetFirstChild("FRAME_TOOLTIP").Show();
				}
				case "QUAD_BUTTON_PLAYSESSION": {
					AnimMgr.Add(Page.GetFirstChild("QUAD_PLAYSESSION_BG"), "<frame size=\"51 20\" opacity=\"1\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
					Page.GetFirstChild("QUAD_BUTTON_PLAYSESSION").DataAttributeSet("open","1");

					AnimMgr.Add(Page.GetFirstChild("FRAME_PLAYSESSION_DETAIL"), "<frame pos=\"0 0\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.Add(Page.GetFirstChild("FRAME_PLAYSESSION_DETAIL"), "<frame hidden=\"0\"/>", Now+200, 0, CAnimManager::EAnimManagerEasing::QuadOut);
					/*foreach(Control,(Page.GetFirstChild("FRAME_PLAYSESSION_DETAIL") as CMlFrame).Controls) {
						switchtype(Control) {
							case CMlLabel: {
								AnimMgr.Flush(Control);
								AnimMgr.Add(Control, "<label hidden=\"0\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
							}
						}
					}*/
				}
			}
		}
		case CMlScriptEvent::Type::MouseOut: {
			switch(Event.ControlId) {
				case "LABEL_COUNT": {
					Page.GetFirstChild("FRAME_TOOLTIP").Hide();
				}
				case "QUAD_BUTTON_PLAYSESSION": {
					AnimMgr.Add(Page.GetFirstChild("QUAD_PLAYSESSION_BG"), "<quad size=\"51 8\" opacity=\"0\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
					Page.GetFirstChild("QUAD_BUTTON_PLAYSESSION").DataAttributeSet("open","0");
					
					AnimMgr.Add(Page.GetFirstChild("FRAME_PLAYSESSION_DETAIL"), "<frame pos=\"0 -12\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
					Page.GetFirstChild("FRAME_PLAYSESSION_DETAIL").Hide();
					/*foreach(Control,(Page.GetFirstChild("FRAME_PLAYSESSION_DETAIL") as CMlFrame).Controls) {
						switchtype(Control) {
							case CMlLabel: {
								AnimMgr.Add(Control, "<label hidden=\"1\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
							}
						}
						AnimMgr.Flush(Control);
						Control.Hide();
					}*/
				}
			}
		}
		case CMlScriptEvent::Type::MouseClick: {
			switch(Event.ControlId) {
				case "QUAD_BUTTON_PUBLISH": {
					PlayAudio(Sound_Click);
					SendCustomEvent("PublishMap", []);
				}
				case "QUAD_BUTTON_CHAT": {
					PlayAudio(Sound_ClickSoft);

					declare persistent Text[Text] CHALLENGE_SETTINGS for LocalUser;
					if(!CHALLENGE_SETTINGS.existskey("PrivateSession") || CHALLENGE_SETTINGS["PrivateSession"] == "False") {
						if(Page.GetFirstChild("FRAME_CHAT_WINDOW").DataAttributeGet("open") == "1") {
							AnimMgr.Add(Page.GetFirstChild("FRAME_CHAT_WINDOW"), "<frame pos=\"0 -60\" hidden=\"1\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
							Page.GetFirstChild("FRAME_CHAT_WINDOW").DataAttributeSet("open","0");
						}
						else {
							AnimMgr.Add(Page.GetFirstChild("FRAME_CHAT_WINDOW"), "<frame pos=\"0 0\" hidden=\"0\"/>", 300, CAnimManager::EAnimManagerEasing::QuadOut);
							Page.GetFirstChild("FRAME_CHAT_WINDOW").DataAttributeSet("open","1");
						}
					}
				}
				case "QUAD_BUTTON_PLAYSESSION": {
					PlayAudio(Sound_ClickSoft);
				}
			}
		}
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch(Event.CustomEventType) {
				case "Public": {
					declare JsonSuccess = PublicMap.fromjson(Event.CustomEventData[0]);
					(Page.GetFirstChild("LABEL_MAPNAME") as CMlLabel).SetText(PublicMap.OriginalName);

					Page.GetFirstChild("FRAME_UNPUBLISHED").Hide();
					Page.GetFirstChild("FRAME_PUBLISHED").Show();
					(Page.GetFirstChild("LABEL_COUNT") as CMlLabel).SetText("-");
					(Page.GetFirstChild("QUAD_THUMBNAIL") as CMlQuad).ChangeImageUrl("file://Thumbnails/MapUid/"^Map.MapInfo.MapUid);
					PreviousCount = -1;
				}
				case "Private": {
					Page.GetFirstChild("FRAME_UNPUBLISHED").Show();
					Page.GetFirstChild("FRAME_PUBLISHED").Hide();
				}
				case "Count": {
					declare Count = TextLib::ToInteger(Event.CustomEventData[0]);

					if(Count != PreviousCount) {
						(Page.GetFirstChild("LABEL_COUNT") as CMlLabel).TextColor = <1., 1., 0.>;
						Page.GetFirstChild("LABEL_COUNT").RelativeScale = 1.05;
						AnimMgr.Add(Page.GetFirstChild("LABEL_COUNT"), "<label textcolor=\"FFF\" scale=\"1\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
						EndOfYellow = Now+500;
						PlayAudio(Sound_NumberChange);
					}

					if(Count < 0) {
						(Page.GetFirstChild("LABEL_COUNT") as CMlLabel).SetText("-");
					}
					else {
						(Page.GetFirstChild("LABEL_COUNT") as CMlLabel).SetText(Count^"");
					}
					PreviousCount = Count;
				}
				case "Users": {
					declare Label_Tooltip = (Page.GetFirstChild("LABEL_TOOLTIP") as CMlLabel);
					declare Quad_Tooltip = (Page.GetFirstChild("QUAD_TOOLTIP") as CMlQuad);

					declare SUser[] Users;
					declare JsonSuccess = Users.fromjson(Event.CustomEventData[0]);
					declare UserText = "";
					if(Users.count > 10) UserText = "and "^Users.count-10^" more...";
					for(I,0,9) {
						if(Users.existskey(I)) {
							if(Users[I].Nickname == "")
								UserText ^= "\n$z"^Users[I].Login;
							else
								UserText ^= "\n$z"^Users[I].Nickname;
						}
					}
					Label_Tooltip.SetText(UserText);
					declare Width = Label_Tooltip.ComputeWidth(UserText);
					Label_Tooltip.Size.X = Width+2.;
					declare Height = Label_Tooltip.ComputeHeight(UserText);
					Label_Tooltip.Size.Y = Height;
					Quad_Tooltip.Size = <Width+4., Height>;
					if(Users.count > 10) Quad_Tooltip.Size.Y += 3.;
				}
				case "DisablePublish": {
					(Page.GetFirstChild("QUAD_BUTTON_PUBLISH_DISABLE") as CMlQuad).Show();
					(Page.GetFirstChild("QUAD_BUTTON_PUBLISH") as CMlQuad).ModulateColor = <.2, .4, .2>;
					(Page.GetFirstChild("LABEL_BUTTON_PUBLISH") as CMlLabel).TextColor = <.5, .5, .5>;
				}
				case "UpdateChat": {
					declare SChatMessage[] Messages;
					declare JsonSuccess = Messages.fromjson(Event.CustomEventData[0]);

					declare Frame_Chat = (Page.GetFirstChild("FRAME_CHAT_INNER") as CMlFrame);
					for(I, 0, Frame_Chat.Controls.count-1) {
						declare Index = Frame_Chat.Controls.count-1-I;
						declare Frame = (Frame_Chat.Controls[Index] as CMlFrame);

						if(Messages.existskey(I)) {
							declare M = Messages[I];
							if(M.Nickname == "")
								(Frame.GetFirstChild("LABEL_NICKNAME") as CMlLabel).SetText(M.Login);
							else
								(Frame.GetFirstChild("LABEL_NICKNAME") as CMlLabel).SetText(M.Nickname);
							(Frame.GetFirstChild("LABEL_DATE") as CMlLabel).SetText(M.Date);
							(Frame.GetFirstChild("LABEL_CONTENT") as CMlLabel).SetText(M.Content);
							Frame.Show();
						}
						else Frame.Hide();
					}
				}
			}
		}
	}
}

if(EndOfYellow != -1 && EndOfYellow < Now) {
	(Page.GetFirstChild("LABEL_COUNT") as CMlLabel).TextColor = <1., 1., 1.>;
	Page.GetFirstChild("LABEL_COUNT").RelativeScale = 1.;
}

if(Page.GetFirstChild("FRAME_TOOLTIP").Visible) Page.GetFirstChild("FRAME_TOOLTIP").RelativePosition_V3 = <MouseX, MouseY>;

if(Ping == -1)
	(Page.GetFirstChild("LABEL_PLAYSESSION_PING") as CMlLabel).SetText("-.---s");
else
	(Page.GetFirstChild("LABEL_PLAYSESSION_PING") as CMlLabel).SetText(TextLib::FormatReal(Ping/1000.,3,False,False)^"s");
***
