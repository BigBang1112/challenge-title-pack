Text TimeToTextWithMilli(Integer _Time) {
	return TextLib::TimeToText(_Time, True)^TextLib::SubText(""^_Time, TextLib::Length(""^_Time)-1, 1);
}

CTmMlPlayer GetOwner() {
	wait(GUIPlayer != Null || InputPlayer != Null);
	if(GUIPlayer != Null) return GUIPlayer;
	return InputPlayer;
}

***Start***
***
declare Start = Now+500;

declare Integer PlayerTime;

declare CTmMlPlayer::ERaceState PreviousRaceState;
declare Boolean PreviousBrakeState;

declare Frame_Time <=> (Page.GetFirstChild("FRAME_TIME") as CMlFrame);
declare Frame_Checkpoint <=> (Page.GetFirstChild("FRAME_CHECKPOINT") as CMlFrame);
declare Frame_Speed <=> (Page.GetFirstChild("FRAME_SPEED") as CMlFrame);
declare Frame_Gear <=> (Page.GetFirstChild("FRAME_GEAR") as CMlFrame);
declare Frame_Info <=> (Page.GetFirstChild("FRAME_INFO") as CMlFrame);

declare Label_Time <=> (Page.GetFirstChild("LABEL_TIME") as CMlLabel);
declare Label_Speed <=> (Page.GetFirstChild("LABEL_SPEED") as CMlLabel);
declare Gauge_RPM <=> (Page.GetFirstChild("GAUGE_RPM") as CMlGauge);
declare Quad_Steer_Left <=> (Page.GetFirstChild("QUAD_STEER_LEFT") as CMlQuad);
declare Quad_Steer_Right <=> (Page.GetFirstChild("QUAD_STEER_RIGHT") as CMlQuad);
declare Quad_Brake <=> (Page.GetFirstChild("QUAD_BRAKE") as CMlQuad);
declare Label_Gear <=> (Page.GetFirstChild("LABEL_GEAR") as CMlLabel);

declare Label_CP_Start = (Page.GetFirstChild("LABEL_CP_START") as CMlLabel);
declare Label_CP_Blue = (Page.GetFirstChild("LABEL_CP_BLUE") as CMlLabel);
declare Label_CP_Red = (Page.GetFirstChild("LABEL_CP_RED") as CMlLabel);
declare Label_CP_Purple = (Page.GetFirstChild("LABEL_CP_PURPLE") as CMlLabel);
declare Quad_CP_Blue = (Page.GetFirstChild("QUAD_CP_BLUE") as CMlQuad);
declare Quad_CP_Red = (Page.GetFirstChild("QUAD_CP_RED") as CMlQuad);
declare Quad_CP_Purple = (Page.GetFirstChild("QUAD_CP_PURPLE") as CMlQuad);

declare Integer TimeResetRaceTime;
declare Integer TimeResetStamp;
declare Integer TimeResetLength = 500;

Frame_Time.ClipWindowRelativePosition.Y = -20.;
Frame_Checkpoint.ClipWindowRelativePosition.X = 32.;
Frame_Speed.ClipWindowRelativePosition.X = -32.;

declare LastGear = GetOwner().EngineCurGear;
***

***Loop***
***
foreach(Event,PendingEvents) {
	switch(Event.Type) {
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch(Event.CustomEventType) {
				case "Show": {
					Start = Now;

					Label_Gear.Opacity = 1.;
					Quad_Brake.Opacity = 0.;
				}
			}
		}
	}
}

foreach(Event,RaceEvents) {
	switch(Event.Type) {
		case CTmRaceClientEvent::EType::WayPoint: {
			if(Event.IsEndRace) {
				PlayerTime = Event.RaceTime;
			}
			else if(Event.IsEndLap) {

			}
			else {
				//PlayAudio(Sound_TimeChange);
				for(I,0,8) {
					Audio.PlaySoundEvent(CAudioManager::ELibSound::Countdown, 1, .5, I*100);
				}

				if(Event.Player.Score != Null)
				if(Event.Player.Score.BestRace.Checkpoints.count == 0) {
					SlowSetText(Label_CP_Start,TimeToTextWithMilli(Event.RaceTime),500);
					Label_CP_Start.Show();

					Label_CP_Red.Hide();
					Quad_CP_Red.Hide();
					Label_CP_Blue.Hide();
					Quad_CP_Blue.Hide();
					Label_CP_Purple.Hide();
					Quad_CP_Purple.Hide();
				}
				else {
					declare Difference = Event.RaceTime - Event.Player.Score.BestRace.Checkpoints[Event.CheckpointInRace];

					if(Difference > 0) {
						Label_CP_Red.Show();
						Label_CP_Red.SetText("+"^TimeToTextWithMilli(Difference));
						Quad_CP_Red.Show();

						Label_CP_Blue.Hide();
						Quad_CP_Blue.Hide();
						Label_CP_Purple.Hide();
						Quad_CP_Purple.Hide();
					}
					else if(Difference < 0) {
						Label_CP_Blue.Show();
						Label_CP_Blue.SetText(TimeToTextWithMilli(Difference));
						Quad_CP_Blue.Show();

						Label_CP_Red.Hide();
						Quad_CP_Red.Hide();
						Label_CP_Purple.Hide();
						Quad_CP_Purple.Hide();
					}
					else {
						Label_CP_Purple.Show();
						Label_CP_Purple.SetText(TimeToTextWithMilli(Difference));
						Quad_CP_Purple.Show();

						Label_CP_Red.Hide();
						Quad_CP_Red.Hide();
						Label_CP_Blue.Hide();
						Quad_CP_Blue.Hide();
					}

					Label_CP_Start.Hide();
				}
			}
		}
		case CTmRaceClientEvent::EType::Respawn: {
			if(Event.Player.CurRace.Time == -1) { // If fully respawned to start
				//PlayAudio(Sound_TimeReset);
				for(I,0,8) {
					Audio.PlaySoundEvent(CAudioManager::ELibSound::ScoreIncrease, 0, .5, I*80);
				}

				SlowSetText(Label_CP_Start,"-:--.---",500);
				Label_CP_Start.Show();

				Label_CP_Blue.Hide();
				Label_CP_Red.Hide();
				Label_CP_Purple.Hide();
				Quad_CP_Blue.Hide();
				Quad_CP_Red.Hide();
				Quad_CP_Purple.Hide();
			}
		}
	}
}

Frame_Time.ClipWindowRelativePosition.Y = AnimLib::EaseOutQuad(Now - Start, -20., 20., 500);
Frame_Checkpoint.ClipWindowRelativePosition.X = AnimLib::EaseOutQuad(Now - Start-100, 40., -40., 500);
Frame_Speed.ClipWindowRelativePosition.X = AnimLib::EaseOutQuad(Now - Start-100, -40., 40., 500);
Frame_Gear.ClipWindowRelativePosition.X = AnimLib::EaseOutQuad(Now - Start-100, -30., 30., 1000);
Frame_Info.ClipWindowRelativePosition.X = AnimLib::EaseOutQuad(Now - Start-100, 30., -30., 1000);

declare RpmRatio = MathLib::Clamp(GetOwner().EngineRpm/10000,0.,1.);

switch(GetOwner().RaceState) {
	case CTmMlPlayer::ERaceState::BeforeStart: {
		if(PreviousRaceState == CTmMlPlayer::ERaceState::Running) {
			TimeResetRaceTime = PlayerTime;
			TimeResetStamp = Now;

			PreviousRaceState = CTmMlPlayer::ERaceState::BeforeStart;
		}
		
		PlayerTime = MathLib::NearestInteger(AnimLib::EaseOutQuad(Now - TimeResetStamp, TimeResetRaceTime+.0, -TimeResetRaceTime+.0, TimeResetLength));
	}
	case CTmMlPlayer::ERaceState::Running: {
		if(PreviousRaceState == CTmMlPlayer::ERaceState::BeforeStart) {
			Label_Time.RelativeScale = 1.25;
			AnimMgr.Add(Label_Time, "<label scale=\"1\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);

			PreviousRaceState = CTmMlPlayer::ERaceState::Running;
		}

		PlayerTime = MathLib::Max(0, GameTime - GetOwner().RaceStartTime);
	}
	case CTmMlPlayer::ERaceState::Finished: {
		
	}
}

Label_Time.SetText(TimeToTextWithMilli(PlayerTime));
Label_Speed.SetText(""^GetOwner().DisplaySpeed);
Label_Speed.RelativeScale = RpmRatio*.2+0.9;
Gauge_RPM.Ratio = RpmRatio;
Gauge_RPM.RelativeScale = GetOwner().EngineTurboRatio*.25+1;

if(GetOwner().EngineCurGear != LastGear) {
	Label_Gear.Opacity = 0.;
	AnimMgr.Add(Label_Gear, "<label opacity=\"1\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
	if(GetOwner().EngineCurGear > 0)
		Label_Gear.SetText(""^GetOwner().EngineCurGear);
	else
		Label_Gear.SetText("R");
	LastGear = GetOwner().EngineCurGear;
}

Quad_Steer_Left.Size.X = MathLib::Clamp(-GetOwner().InputSteer,0.,1.)*28;
Quad_Steer_Right.Size.X = MathLib::Clamp(GetOwner().InputSteer,0.,1.)*28;

// If player started or stopped braking
if(GetOwner().InputIsBraking != PreviousBrakeState) {
	if(GetOwner().InputIsBraking) {
		AnimMgr.Add(Quad_Brake, "<quad opacity=\"1\"/>", 100, CAnimManager::EAnimManagerEasing::QuadOut);
	}
	else {
		AnimMgr.Add(Quad_Brake, "<quad opacity=\"0\"/>", 100, CAnimManager::EAnimManagerEasing::QuadOut);
	}
	PreviousBrakeState = GetOwner().InputIsBraking;
}
***