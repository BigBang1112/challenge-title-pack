declare CMlFrame Frame_Inner_Vehicles;
declare CMlFrame Frame_Vehicles;
declare CMlLabel Label_Arrow;
declare CMlLabel Label_Lock;

Void UpdateVehicles() {
	declare Integer VehicleIndex for Page;
	declare Integer VehicleCount for Page;
	declare Integer MapVehicleIndex for Page;

	foreach(Frame,Frame_Inner_Vehicles.Controls) {
		foreach(Control,(Frame as CMlFrame).Controls) {
			if(Control is CMlFrame)
				foreach(C, (Control as CMlFrame).Controls)
					if(C is CMlQuad) AnimMgr.Add(C, """<quad opacity="1"/>""", 300, CAnimManager::EAnimManagerEasing::QuadOut);
			if(Control is CMlQuad) AnimMgr.Add(Control, """<quad opacity="1"/>""", 300, CAnimManager::EAnimManagerEasing::QuadOut);
			if(Control is CMlLabel) (Control as CMlLabel).Opacity = 1.;
		}
	}

	for(I, 0, VehicleCount-1) {
		declare Frame_Vehicle = (Frame_Inner_Vehicles.Controls[I] as CMlFrame);
		declare Quad_Vehicle = (Frame_Vehicle.GetFirstChild("QUAD_VEHICLE") as CMlQuad);
		declare Label_Original = (Frame_Vehicle.GetFirstChild("LABEL_ORIGINAL") as CMlLabel);

		if(I == MapVehicleIndex) Label_Original.Show();
			else Label_Original.Hide();

		if(I == VehicleIndex) {
			Quad_Vehicle.Substyle = "BgCard";
			
			for(J,0,1) {
				declare Invert = J*2-1;
				for(K,2,4) {
					if(Frame_Inner_Vehicles.Controls.existskey(I+K*Invert)) {
						foreach(Control,(Frame_Inner_Vehicles.Controls[I+K*Invert] as CMlFrame).Controls) {
							if(Control is CMlFrame)
								foreach(C, (Control as CMlFrame).Controls)
									if(C is CMlQuad) AnimMgr.Add(C, """<quad opacity="{{{1-(K-1)*.25}}}"/>""", 300, CAnimManager::EAnimManagerEasing::QuadOut);
							if(Control is CMlQuad) AnimMgr.Add(Control, """<quad opacity="{{{1-(K-1)*.25}}}"/>""", 300, CAnimManager::EAnimManagerEasing::QuadOut);
							if(Control is CMlLabel) (Control as CMlLabel).Opacity = 1-(K-1)*.25;
						}
					}
				}
				for(K,5,VehicleCount-1) {
					if(Frame_Inner_Vehicles.Controls.existskey(I+K*Invert)) {
						foreach(Control,(Frame_Inner_Vehicles.Controls[I+K*Invert] as CMlFrame).Controls) {
							if(Control is CMlFrame)
								foreach(C, (Control as CMlFrame).Controls)
									if(C is CMlQuad) AnimMgr.Add(C, """<quad opacity=".25"/>""", 300, CAnimManager::EAnimManagerEasing::QuadOut);
							if(Control is CMlQuad) AnimMgr.Add(Control, """<quad opacity=".25"/>""", 300, CAnimManager::EAnimManagerEasing::QuadOut);
							if(Control is CMlLabel) (Control as CMlLabel).Opacity = .25;
						}
					}
				}
			}
		}
		else {
			Quad_Vehicle.Substyle = "BgCardInventoryItem";
		}
	}
}

Void UpdatePositions(Vec2 _Scroll, Vec2 _OldScroll, Boolean _Instantly) {
	declare Integer VehicleIndex for Page;
	declare Integer MapVehicleIndex for Page;
	declare Integer VehicleLock for Page;

	VehicleIndex = MathLib::NearestInteger(_Scroll.Y/20+MapVehicleIndex);

	Frame_Inner_Vehicles.RelativePosition_V3.Y -= _Scroll.Y-_OldScroll.Y;
	AnimMgr.Add(Frame_Inner_Vehicles, """<frame pos="0 0"/>""", 300, CAnimManager::EAnimManagerEasing::QuadOut);
	
	if(VehicleLock == -1) {
		if(_Instantly) {
			Label_Arrow.RelativePosition_V3.Y = 0.;
			Label_Lock.RelativePosition_V3.Y = 0.;
		}
		else {
			Label_Arrow.RelativePosition_V3.Y -= _Scroll.Y-_OldScroll.Y;
			Label_Lock.RelativePosition_V3.Y -= _Scroll.Y-_OldScroll.Y;
			AnimMgr.Add(Label_Arrow, """<label pos="{{{Label_Arrow.RelativePosition_V3.X}}} 0"/>""", 300, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(Label_Lock, """<label pos="{{{Label_Lock.RelativePosition_V3.X}}} 0"/>""", 300, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}
	else {
		if(_Instantly) {
			Label_Arrow.RelativePosition_V3.Y = _Scroll.Y-(VehicleLock-MapVehicleIndex)*20;
			Label_Lock.RelativePosition_V3.Y = _Scroll.Y-(VehicleLock-MapVehicleIndex)*20;
		}
		else {
			AnimMgr.Add(Label_Arrow, """<label pos="{{{Label_Arrow.RelativePosition_V3.X}}} {{{_Scroll.Y-(VehicleLock-MapVehicleIndex)*20}}}"/>""", 300, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(Label_Lock, """<label pos="{{{Label_Lock.RelativePosition_V3.X}}} {{{_Scroll.Y-(VehicleLock-MapVehicleIndex)*20}}}"/>""", 300, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}
}

Void UpdatePositions(Vec2 _Scroll, Vec2 _OldScroll) {
	UpdatePositions(_Scroll, _OldScroll, False);
}

***Start***
***
Frame_Inner_Vehicles = (Page.GetFirstChild("FRAME_INNER_VEHICLES") as CMlFrame);
Label_Arrow = (Page.GetFirstChild("LABEL_ARROW") as CMlLabel);
Label_Lock = (Page.GetFirstChild("LABEL_LOCK") as CMlLabel);

declare Integer VehicleIndex for Page;
declare Integer VehicleCount for Page;
declare Integer MapVehicleIndex for Page;
declare Integer VehicleLock for Page;
declare Integer HasEnvimixLicense for LocalUser;

declare Boolean IsMenuOpen for Page;

declare Integer OldVehicleIndex = -1;

Frame_Vehicles = (Page.GetFirstChild("FRAME_VEHICLES") as CMlFrame);
if(VehicleCount > 0) {
	Frame_Vehicles.ScrollActive = True;
	Frame_Vehicles.ScrollMax = <0.,(VehicleCount-MapVehicleIndex-1)*20.>;
	Frame_Vehicles.ScrollMin = <0.,-MapVehicleIndex*20.>;
	Frame_Vehicles.ScrollGridSnap = True;
	Frame_Vehicles.ScrollGrid = <0.,20.>;
}

declare OldScroll = Frame_Vehicles.ScrollOffset;
declare OldVehicleLock = VehicleLock;

UpdatePositions(Frame_Vehicles.ScrollOffset, OldScroll);
UpdateVehicles();

//EnableMenuNavigationInputs = True;
***

Void Start() {
	declare Integer HasEnvimixLicense for LocalUser;
	declare Integer VehicleIndex for Page;
	declare Integer MapVehicleIndex for Page;

	if(MapVehicleIndex != VehicleIndex) {
		if(HasEnvimixLicense == 0) {
			SendCustomEvent("BuyEnvimixLicense", []);
		}
		else if(HasEnvimixLicense == 1) {
			SendCustomEvent("Start", ["True"]);
			CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
		}
	}
	else {
		SendCustomEvent("Start", ["True"]);
		CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
	}
}

***Loop***
***

foreach(Event,PendingEvents) {
	switch(Event.Type) {
		case CMlScriptEvent::Type::MouseOver: {
			switch(Event.ControlId) {
				case "QUAD_VEHICLE": {
					PlayAudio(Sound_Hover);
				}
			}
		}
		case CMlScriptEvent::Type::MouseClick: {
			switch(Event.ControlId) {
				case "QUAD_VEHICLE": {
					declare PreviousIndex = VehicleIndex;
					VehicleIndex = TextLib::ToInteger(Event.Control.Parent.DataAttributeGet("id"));

					if(Event.Control.Parent.DataAttributeGet("locked") == "False") {
						Frame_Vehicles.Scroll(<0.,(VehicleIndex-PreviousIndex)*1.>);
						if(PreviousIndex - VehicleIndex == 0) {
							Start();
						}
					}
					else if(HasEnvimixLicense == 0) SendCustomEvent("BuyEnvimixLicense", []);

					PlayAudio(Sound_ClickSoft);
				}
			}
		}
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch(Event.CustomEventType) {
				case "Show": {
					UpdatePositions(Frame_Vehicles.ScrollOffset, OldScroll);
					UpdateVehicles();
				}
				case "Navigation": {
					EnableMenuNavigationInputs = Event.CustomEventData[0] == "True";
					if(EnableMenuNavigationInputs) (Page.GetFirstChild("LABEL_ARROW") as CMlLabel).TextColor = <.0,.2,.4>;
					else (Page.GetFirstChild("LABEL_ARROW") as CMlLabel).TextColor = <.93,.93,.93>;
				}
			}
		}
		case CMlScriptEvent::Type::MenuNavigation: {
			switch(Event.MenuNavAction) {
				case CMlScriptEvent::EMenuNavAction::Cancel: {
					
				}
				case CMlScriptEvent::EMenuNavAction::Up: {
					Frame_Vehicles.Scroll(<0., -1.>);
				}
				case CMlScriptEvent::EMenuNavAction::Down: {
					Frame_Vehicles.Scroll(<0., 1.>);
				}
				case CMlScriptEvent::EMenuNavAction::Left: {
					EnableMenuNavigationInputs = False;
					(Page.GetFirstChild("LABEL_ARROW") as CMlLabel).TextColor = <.93,.93,.93>;
					SendCustomEvent("Navigation", ["Menu"]);
				}
				case CMlScriptEvent::EMenuNavAction::Right: {
					EnableMenuNavigationInputs = False;
					(Page.GetFirstChild("LABEL_ARROW") as CMlLabel).TextColor = <.93,.93,.93>;
					SendCustomEvent("Navigation", ["Menu"]);
				}
				case CMlScriptEvent::EMenuNavAction::Select: {
					Start();
				}
			}
		}
		case CMlScriptEvent::Type::KeyPress: {
			if(IsMenuOpen) {
				switch(Event.KeyName) {
					case "Prior": {
						Frame_Vehicles.Scroll(<0., -1.>);
					}
					case "Next": {
						Frame_Vehicles.Scroll(<0., 1.>);
					}
				}
			}
		}
	}
}

Frame_Vehicles = (Page.GetFirstChild("FRAME_VEHICLES") as CMlFrame);
if(VehicleCount > 0) {
	Frame_Vehicles.ScrollActive = True;
	Frame_Vehicles.ScrollMax = <0.,(VehicleCount-MapVehicleIndex-1)*20.>;
	Frame_Vehicles.ScrollMin = <0.,-MapVehicleIndex*20.>;
	Frame_Vehicles.ScrollGridSnap = True;
	Frame_Vehicles.ScrollGrid = <0.,20.>;
}

if(VehicleLock == -1) {
	Label_Lock.Hide();
}
else {
	Label_Lock.Show();
}

if(Frame_Vehicles.ScrollOffset != OldScroll) {
	UpdatePositions(Frame_Vehicles.ScrollOffset, OldScroll);
	OldScroll = Frame_Vehicles.ScrollOffset;
}

+++CheckLicense+++

if(VehicleIndex != OldVehicleIndex) {
	UpdateVehicles();
	OldVehicleIndex = VehicleIndex;
}

if(VehicleLock != OldVehicleLock) {
	UpdatePositions(Frame_Vehicles.ScrollOffset, OldScroll);
	OldVehicleLock = VehicleLock;
}

if(IsMenuOpen != IsMenuNavigationForeground) {
	IsMenuOpen = IsMenuNavigationForeground;
	if(IsMenuOpen) UpdatePositions(Frame_Vehicles.ScrollOffset, OldScroll, True);
	else {
		
	}
}
***

***CheckLicense***
***
declare Integer HasEnvimixLicense for LocalUser;

foreach(Control,Frame_Inner_Vehicles.Controls) {
	declare Veh = (Control as CMlFrame);
	declare Label_Vehicle = (Veh.GetFirstChild("LABEL_VEHICLE") as CMlLabel);
	declare Label_Preorder = (Veh.GetFirstChild("LABEL_PREORDER") as CMlLabel);
	declare Label_Unlock = (Veh.GetFirstChild("LABEL_UNLOCK") as CMlLabel);

	declare EnvimixRelease = "";
	declare CustomVehicle = False;

	if(Label_Vehicle.Value == "CanyonCar"
	|| Label_Vehicle.Value == "StadiumCar"
	|| Label_Vehicle.Value == "ValleyCar"
	|| Label_Vehicle.Value == "LagoonCar")
		EnvimixRelease = Veh.DataAttributeGet("envimixdate");
	else if(Label_Vehicle.Value == "DesertCar"
	|| Label_Vehicle.Value == "RallyCar"
	|| Label_Vehicle.Value == "SnowCar"
	|| Label_Vehicle.Value == "IslandCar"
	|| Label_Vehicle.Value == "BayCar"
	|| Label_Vehicle.Value == "CoastCar")
		EnvimixRelease = Veh.DataAttributeGet("unitedenvimixdate");
	else
		CustomVehicle = True;

	if(Veh.DataAttributeGet("id") != MapVehicleIndex^"" && !CustomVehicle) {			
		if(EnvimixRelease == "") {
			Label_Unlock.SetText("{{{{UNLOCK_NOT_ANNOUNCED}}}}");
			Label_Unlock.Show();

			if(HasEnvimixLicense == 1) {
				Label_Preorder.SetText("{{{{ENVIMIX_LICENSE_PREORDERED}}}}");
				Label_Preorder.Show();
			}
			else if(HasEnvimixLicense == 0) {
				Label_Preorder.SetText("{{{{PREORDER_ENVIMIX_LICENSE}}}}");
				Label_Preorder.Show();
			}

			Label_Vehicle.Hide();
			Veh.DataAttributeSet("locked", "True");
		}
		else if(EnvimixRelease == "0") {
			Label_Unlock.Hide();
		}
		else {
			declare Compare = TimeLib::Compare(EnvimixRelease, TimeLib::GetCurrent());
			if(Compare > 0) {
				if(HasEnvimixLicense == 1) {
					Label_Preorder.SetText("{{{{ENVIMIX_LICENSE_PREORDERED}}}}");
					Label_Preorder.Show();
				}
				else if(HasEnvimixLicense == 0) {
					Label_Preorder.SetText("{{{{PREORDER_ENVIMIX_LICENSE}}}}");
					Label_Preorder.Show();
				}
				else {
					Label_Preorder.Hide();
					Label_Unlock.Hide();
				}

				declare netwrite Integer Client_VehicleIndex for UI;
				if(Client_VehicleIndex^"" == Veh.DataAttributeGet("id")) {
					VehicleIndex = MapVehicleIndex;
					Client_VehicleIndex = MapVehicleIndex;
					UpdateVehicles();
				}

				Label_Vehicle.Hide();
				Label_Unlock.SetText("{{{{UNLOCKED_IN}}}} " ^ TextLib::ToUpperCase(TimeLib::FormatDelta(EnvimixRelease, TimeLib::GetCurrent(), TimeLib::EDurationFormats::Full)));
				Label_Unlock.Show();

				Veh.DataAttributeSet("locked", "True");
			}
			else {
				Label_Unlock.Hide();
				if(HasEnvimixLicense == 1) {
					Label_Preorder.Hide();
					Label_Vehicle.Show();
					if(VehicleIndex^"" == Veh.DataAttributeGet("id") && !IsMenuOpen)
						if(Veh.DataAttributeGet("locked") == "True")
							SendCustomEvent("Start", ["True"]);
					Veh.DataAttributeSet("locked", "False");
				}
				else {
					Label_Preorder.SetText("{{{{BUY_ENVIMIX_LICENSE}}}}");
					Label_Preorder.Show();
					Label_Vehicle.Hide();

					declare netwrite Integer Client_VehicleIndex for UI;
					if(Client_VehicleIndex^"" == Veh.DataAttributeGet("id")) {
						VehicleIndex = MapVehicleIndex;
						Client_VehicleIndex = MapVehicleIndex;
						UpdateVehicles();
					}
				}
			}
		}

		/*if(HasEnvimixLicense == 1) {
			Label_Preorder.Hide();
			Label_Vehicle.Show();
		}
		else if(HasEnvimixLicense == 0) {
			Label_Preorder.Show();
			Label_Vehicle.Hide();
		}
		else {
			Label_Vehicle.Hide();
			Label_Preorder.Hide();
		}*/
	}
	else {
		Label_Unlock.Hide();
		Label_Preorder.Hide();
		Label_Vehicle.Show();
		Veh.DataAttributeSet("locked", "False");
	}
}
***