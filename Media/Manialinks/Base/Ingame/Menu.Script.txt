#Struct SNavControl {
	CMlControl Left;
	CMlControl Right;
	CMlControl Up;
	CMlControl Down;
}

declare SNavControl[CMlControl] NavControls;
declare CMlControl SelectedNav;
declare CMlControl FirstNav;

Void Select(CMlControl _Control) {
	foreach(Control => NavControl, NavControls) {
		if(Control is CMlQuad) {
			declare Quad = (Control as CMlQuad);
			Quad.StyleSelected = False;
		}
	}

	if(_Control != Null && (_Control is CMlQuad)) {
		declare Quad = (_Control as CMlQuad);
		Quad.StyleSelected = True;
	}

	SelectedNav = _Control;
}

Void PassNavigation(Text _Layer) {
	EnableMenuNavigationInputs = False;
	Select(Null);
	SendCustomEvent("Navigation", [_Layer]);
}

Void Button_Continue() {
	SendCustomEvent("Start", ["False"]);
	CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
}

Void Button_Exit() {
	CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
	Playground.QuitServer(False);
}

Void Button_Start() {
	SendCustomEvent("Start", ["True"]);
	CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
}

***Start***
***
declare Frame_Label_MapName = (Page.GetFirstChild("FRAME_LABEL_MAPNAME") as CMlFrame);
declare Label_MapName = (Page.GetFirstChild("LABEL_MAPNAME") as CMlLabel);
declare Label_MapName2 = (Page.GetFirstChild("LABEL_MAPNAME_2") as CMlLabel);

declare Frame_Label_Challenge = (Page.GetFirstChild("FRAME_LABEL_CHALLENGE") as CMlFrame);
declare Label_Challenge = (Page.GetFirstChild("LABEL_CHALLENGE") as CMlLabel);
declare Label_Challenge2 = (Page.GetFirstChild("LABEL_CHALLENGE_2") as CMlLabel);

declare Frame_Label_Car = (Page.GetFirstChild("FRAME_LABEL_CAR") as CMlFrame);
declare Label_Car = (Page.GetFirstChild("LABEL_CAR") as CMlLabel);
declare Label_Car2 = (Page.GetFirstChild("LABEL_CAR_2") as CMlLabel);

declare LabelDistance = 15;

declare Boolean IsPauseMenu for Page;
declare Boolean IsMenuOpen for Page;
declare Boolean IsBlurred for Page;

declare Quad_Button_Start = (Page.GetFirstChild("QUAD_BUTTON_START") as CMlQuad);
declare Quad_Button_Exit = (Page.GetFirstChild("QUAD_BUTTON_EXIT") as CMlQuad);
declare Quad_Button_Continue = (Page.GetFirstChild("QUAD_BUTTON_CONTINUE") as CMlQuad);

FirstNav = Quad_Button_Continue;

declare SNavControl Button_Exit;
Button_Exit.Down = Quad_Button_Continue;
NavControls[Quad_Button_Exit] = Button_Exit;

declare SNavControl Button_Continue;
Button_Continue.Up = Quad_Button_Exit;
Button_Continue.Down = Quad_Button_Start;
NavControls[Quad_Button_Continue] = Button_Continue;

declare SNavControl Button_Start;
Button_Start.Up = Quad_Button_Continue;
NavControls[Quad_Button_Start] = Button_Start;
***

***Loop***
***
foreach(Event,PendingEvents) {
	switch(Event.Type) {
		case CMlScriptEvent::Type::MouseOver: {
			if(Event.Control is CMlQuad) {
				Select(Null);
			}

			switch(Event.ControlId) {
				case "QUAD_BUTTON_EXIT": {
					PlayAudio(Sound_Hover);
				}
				case "QUAD_BUTTON_CONTINUE": {
					PlayAudio(Sound_Hover);
				}
			}
		}
		case CMlScriptEvent::Type::MouseClick: {
			switch(Event.ControlId) {
				case "QUAD_BUTTON_START": {
					Button_Start();
					PlayAudio(Sound_Click);
				}
				case "QUAD_BUTTON_EXIT": {
					Button_Exit();
					PlayAudio(Sound_ClickSoft);
				}
				case "QUAD_BUTTON_CONTINUE": {
					Button_Continue();
					PlayAudio(Sound_ClickSoft);
				}
			}
		}
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch(Event.CustomEventType) {
				case "MapName": {
					declare MapName = Event.CustomEventData[0];
					SlideText_Set(Label_MapName, Label_MapName2, MapName, LabelDistance);
				}
				case "Challenge": {
					declare Challenge = Event.CustomEventData[0];
					SlideText_Set(Label_Challenge, Label_Challenge2, Challenge, LabelDistance);
				}
				case "Car": {
					declare Car = Event.CustomEventData[0];
					SlideText_Set(Label_Car, Label_Car2, Car, LabelDistance);
				}
				case "Open": {
					ShowInGameMenu();
				}
				case "Navigation": {
					EnableMenuNavigationInputs = Event.CustomEventData[0] == "True";
					if(EnableMenuNavigationInputs) Select(FirstNav);
				}
			}
		}
		case CMlEvent::Type::MenuNavigation: {
			switch(Event.MenuNavAction) {
				case CMlEvent::EMenuNavAction::Cancel: {
					if(IsPauseMenu)
						CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
					else
						Playground.QuitServer(False);	
				}
				case CMlEvent::EMenuNavAction::Select: {
					if(SelectedNav.ControlId == "QUAD_BUTTON_CONTINUE") Button_Continue();
					else if(SelectedNav.ControlId == "QUAD_BUTTON_EXIT") Button_Exit();
					else if(SelectedNav.ControlId == "QUAD_BUTTON_START") Button_Start();
				}
				case CMlEvent::EMenuNavAction::Up: {
					if(SelectedNav != Null) {
						if(NavControls[SelectedNav].Up != Null)
							Select(NavControls[SelectedNav].Up);
						//else
						//	PassNavigation("Up");
					}
					else {
						Select(FirstNav);
					}
				}
				case CMlEvent::EMenuNavAction::Down: {
					if(SelectedNav != Null) {
						if(NavControls[SelectedNav].Down != Null)
							Select(NavControls[SelectedNav].Down);
						//else
						//	PassNavigation("Down");
					}
					else {
						Select(FirstNav);
					}
				}
				case CMlEvent::EMenuNavAction::Left: {
					if(SelectedNav != Null) {
						if(NavControls[SelectedNav].Left != Null)
							Select(NavControls[SelectedNav].Left);
						else
							PassNavigation("Vehicle");
					}
					else {
						Select(FirstNav);
					}
				}
				case CMlEvent::EMenuNavAction::Right: {
					if(SelectedNav != Null) {
						if(NavControls[SelectedNav].Right != Null)
							Select(NavControls[SelectedNav].Right);
						else
							PassNavigation("Vehicle");
					}
					else {
						Select(FirstNav);
					}
				}
			}
		}
	}
}

if(IsMenuOpen != IsMenuNavigationForeground) {
	IsMenuOpen = IsMenuNavigationForeground;
	if(IsMenuOpen) {
		SendCustomEvent("Open", []);
		Select((Page.GetFirstChild("QUAD_BUTTON_CONTINUE") as CMlQuad));
	}
	else {
		SendCustomEvent("Close", []);
		SendCustomEvent("Start", ["False"]);
	}
}

if(IsBlurred) Page.GetFirstChild("QUAD_BACKGROUND").Show();
else Page.GetFirstChild("QUAD_BACKGROUND").Hide();

SlideText_Loop(Frame_Label_MapName, Label_MapName, Label_MapName2, LabelDistance, .015);
SlideText_Loop(Frame_Label_Challenge, Label_Challenge, Label_Challenge2, LabelDistance, -.015);
SlideText_Loop(Frame_Label_Car, Label_Car, Label_Car2, LabelDistance, -.015);
***