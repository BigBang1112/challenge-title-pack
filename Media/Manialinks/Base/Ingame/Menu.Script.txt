#Struct SFinish {
	Integer Timestamp;
	Integer Time;
	Integer[] Checkpoints;
	Real Distance;
	Integer Stunts;
}

#Struct SPerformance {
	Text Vehicle;
	Integer BestFinishIndex;
	SFinish[] Finishes;
}

#Struct SGhostInfo {
	Text Nickname;
	Text Login;
	Integer Time;
	Integer[] Checkpoints;
	Text File;
	Text Url;
	Boolean IsMedal;
	Boolean IsAuthorMedal;
	Boolean IsGoldMedal;
	Boolean IsSilverMedal;
	Boolean IsBronzeMedal;
	Text Vehicle;
}

CTmMlPlayer GetOwner() {
	wait(GUIPlayer != Null || InputPlayer != Null);
	if(GUIPlayer != Null) return GUIPlayer;
	return InputPlayer;
}

Text TimeToTextWithMilli(Integer _Time) {
	return TextLib::TimeToText(_Time, True)^TextLib::SubText(""^_Time, TextLib::Length(""^_Time)-1, 1);
}

Void Button_Continue() {
	SendCustomEvent("Start", ["False"]);
	CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
}

Void Button_Exit() {
	SendCustomEvent("Exit", []);
}

Void Button_Start() {
	SendCustomEvent("Start", ["True"]);
	CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
}

Void UpdateLoadedGhosts() {
	declare Text Car for This;

	declare SGhostInfo[] LoadedGhosts for Page;
	declare netwrite Text[] SelectedGhostFiles for UI;
	declare netwrite Text[] SelectedGhostUrls for UI;

	declare SGhostInfo[] VisibleGhosts;

	for(I,0,LoadedGhosts.count-1)
		if(LoadedGhosts.existskey(I))
			if(Car == "" || LoadedGhosts[I].File == "" || TextLib::Find(Car, LoadedGhosts[I].File, True, True))
				VisibleGhosts.add(LoadedGhosts[I]);

	declare Frame_Outer_Ghosts = (Page.GetFirstChild("FRAME_OUTER_GHOSTS") as CMlFrame);
	declare Frame_Ghosts = (Page.GetFirstChild("FRAME_GHOSTS") as CMlFrame);
	declare Quad_Scrollbar = (Page.GetFirstChild("QUAD_SCROLLBAR") as CMlQuad);
	declare Quad_Loading = (Page.GetFirstChild("QUAD_LOADING") as CMlQuad);

	Frame_Ghosts.Show();
	Quad_Loading.Hide();

	if(VisibleGhosts.count > 7) {
		Frame_Outer_Ghosts.ScrollMax.Y = VisibleGhosts.count*8.-7*8;

		declare VisibleRatio = 7./VisibleGhosts.count;
		Quad_Scrollbar.Size.Y = 56*VisibleRatio;

		Quad_Scrollbar.Show();
	}
	else {
		Frame_Outer_Ghosts.ScrollMax.Y = 0.;
		Quad_Scrollbar.Hide();
	}

	declare Offset = MathLib::NearestInteger(Frame_Outer_Ghosts.ScrollOffset.Y/10);
	for(I,0,Frame_Ghosts.Controls.count-1) {
		declare Frame = (Frame_Ghosts.Controls[I] as CMlFrame);
		if(VisibleGhosts.existskey(I+Offset)) {
			declare Ghost = VisibleGhosts[I+Offset];
			Frame.DataAttributeSet("file", Ghost.File);

			if(TextLib::StartsWith("autosave", Ghost.File, False, False))
				Frame.GetFirstChild("LABEL_AUTOSAVE").Show();
			else
				Frame.GetFirstChild("LABEL_AUTOSAVE").Hide();

			if(Ghost.Url == "") {
				Frame.GetFirstChild("QUAD_SAVEGHOST").Hide();
				Frame.GetFirstChild("LABEL_TIME").RelativePosition_V3 = <33., -0.2>;
				Frame.GetFirstChild("LABEL_AUTOSAVE").RelativePosition_V3 = <34., -3.>;
			}
			else {
				Frame.GetFirstChild("QUAD_SAVEGHOST").Show();
				Frame.GetFirstChild("LABEL_TIME").RelativePosition_V3 = <27., -0.2>;
				Frame.GetFirstChild("LABEL_AUTOSAVE").RelativePosition_V3 = <26., -3.>;
			}

			if(Ghost.IsAuthorMedal)
				(Frame.GetFirstChild("LABEL_NICKNAME") as CMlLabel).SetText("$0f0●$z {{{{AUTHOR_MEDAL}}}}");
			else if(Ghost.IsGoldMedal)
				(Frame.GetFirstChild("LABEL_NICKNAME") as CMlLabel).SetText("$fc0●$z {{{{GOLD_MEDAL}}}}");
			else if(Ghost.IsSilverMedal)
				(Frame.GetFirstChild("LABEL_NICKNAME") as CMlLabel).SetText("$aaa●$z {{{{SILVER_MEDAL}}}}");
			else if(Ghost.IsBronzeMedal)
				(Frame.GetFirstChild("LABEL_NICKNAME") as CMlLabel).SetText("$730●$z {{{{BRONZE_MEDAL}}}}");
			else
				(Frame.GetFirstChild("LABEL_NICKNAME") as CMlLabel).SetText(Ghost.Nickname);

			if(Ghost.Time == -1)
				(Frame.GetFirstChild("LABEL_TIME") as CMlLabel).SetText("-:--.---");
			else
				(Frame.GetFirstChild("LABEL_TIME") as CMlLabel).SetText(TimeToTextWithMilli(Ghost.Time));

			declare Quad_Ghost = (Frame.GetFirstChild("QUAD_GHOST") as CMlQuad);

			Quad_Ghost.StyleSelected = SelectedGhostFiles.exists(Ghost.File);
			
			Frame.Show();
		}
		else {
			Frame.Hide();
		}
	}
}

***Start***
***
declare Frame_Label_MapName = (Page.GetFirstChild("FRAME_LABEL_MAPNAME") as CMlFrame);
declare Label_MapName = (Page.GetFirstChild("LABEL_MAPNAME") as CMlLabel);
declare Label_MapName2 = (Page.GetFirstChild("LABEL_MAPNAME_2") as CMlLabel);

declare Frame_Label_Challenge = (Page.GetFirstChild("FRAME_LABEL_CHALLENGE") as CMlFrame);
declare Label_Challenge = (Page.GetFirstChild("LABEL_CHALLENGE") as CMlLabel);
declare Label_Challenge2 = (Page.GetFirstChild("LABEL_CHALLENGE_2") as CMlLabel);

declare Frame_Label_Car = (Page.GetFirstChild("FRAME_LABEL_CAR") as CMlFrame);
declare Label_Car = (Page.GetFirstChild("LABEL_CAR") as CMlLabel);
declare Label_Car2 = (Page.GetFirstChild("LABEL_CAR_2") as CMlLabel);

declare Label_PB_Nickname = (Page.GetFirstChild("LABEL_PB_NICKNAME") as CMlLabel);
declare Label_PB_Time = (Page.GetFirstChild("LABEL_PB_TIME") as CMlLabel);

declare Frame_Outer_Ghosts = (Page.GetFirstChild("FRAME_OUTER_GHOSTS") as CMlFrame);
declare Frame_Ghosts = (Page.GetFirstChild("FRAME_GHOSTS") as CMlFrame);
declare Quad_Scrollbar = (Page.GetFirstChild("QUAD_SCROLLBAR") as CMlQuad);
declare Quad_Loading = (Page.GetFirstChild("QUAD_LOADING") as CMlQuad);

declare LabelDistance = 15;

declare Boolean IsPauseMenu for Page;
declare Boolean IsMenuOpen for Page;
declare Boolean IsBlurred for Page;

declare Quad_Button_Start = (Page.GetFirstChild("QUAD_BUTTON_START") as CMlQuad);
declare Quad_Button_Exit = (Page.GetFirstChild("QUAD_BUTTON_EXIT") as CMlQuad);
declare Quad_Button_Continue = (Page.GetFirstChild("QUAD_BUTTON_CONTINUE") as CMlQuad);

declare Label_GhostSection = (Page.GetFirstChild("LABEL_GHOSTSECTION") as CMlLabel);

FirstNav = Quad_Button_Continue;

declare SNavControl Button_Exit;
Button_Exit.Down = Quad_Button_Continue;
NavControls[Quad_Button_Exit] = Button_Exit;

declare SNavControl Button_Continue;
Button_Continue.Up = Quad_Button_Exit;
Button_Continue.Down = Quad_Button_Start;
NavControls[Quad_Button_Continue] = Button_Continue;

declare SNavControl Button_Start;
Button_Start.Up = Quad_Button_Continue;
NavControls[Quad_Button_Start] = Button_Start;

Select(FirstNav);

Label_PB_Nickname.SetText(LocalUser.Name);

Frame_Outer_Ghosts.ScrollActive = True;
Frame_Outer_Ghosts.ScrollGrid = <8.,8.>;

declare HoldScrollbar = False;
declare Vec2 PreviousScroll;
declare HoldScrollbarPos = 0.;

declare Zones = TextLib::Split("|", LocalUser.ZonePath);
declare GhostSections = ["{{{{LOCAL}}}}"];
foreach(Zone, Zones)
	GhostSections.add(Zone);
declare Integer CurrentSection for Page;

declare netwrite Integer Client_VehicleIndex for UI;
declare netread Boolean Server_Playing for UI;
declare MenuCar = Client_VehicleIndex; // Var to fix envimix license delete abuse

declare CMlControl Selector;
***

***UpdateTooltip***
***
declare File = Selector.DataAttributeGet("file");

if(File != "") {
	declare Folders = TextLib::Split("\\",File);
	declare Name = Folders[Folders.count-1];

	declare Text Car for This;
	Name = TextLib::Replace(Name, Car, "$ff0"^Car^"$z");

	declare Frame_Tooltip = (Page.GetFirstChild("FRAME_TOOLTIP") as CMlFrame);
	declare Label_Text = (Frame_Tooltip.GetFirstChild("LABEL_TEXT") as CMlLabel);
	declare Quad_Tooltip = (Frame_Tooltip.GetFirstChild("QUAD_TOOLTIP") as CMlQuad);
	Label_Text.Size.X = Label_Text.ComputeWidth(Name);
	Quad_Tooltip.Size.X = Label_Text.ComputeWidth(Name)+4;
	Label_Text.SetText(Name);
}
***

***Loop***
***
foreach(Event,PendingEvents) {
	switch(Event.Type) {
		case CMlScriptEvent::Type::MouseOver: {
			if(Event.Control is CMlQuad) {
				Select(Null);
			}

			switch(Event.ControlId) {
				case "QUAD_BUTTON_EXIT": {
					PlayAudio(Sound_Hover);
				}
				case "QUAD_BUTTON_CONTINUE": {
					PlayAudio(Sound_Hover);
				}
				case "QUAD_GHOST": {
					Selector = (Event.Control.Parent as CMlFrame);
					+++UpdateTooltip+++

					if(File != "")
						Page.GetFirstChild("FRAME_TOOLTIP").Show();
				}
			}
		}
		case CMlScriptEvent::Type::MouseOut: {
			switch(Event.ControlId) {
				case "QUAD_GHOST": {
					Page.GetFirstChild("FRAME_TOOLTIP").Hide();
				}
			}
		}
		case CMlScriptEvent::Type::MouseClick: {
			switch(Event.ControlId) {
				case "QUAD_BUTTON_START": {
					Button_Start();
					PlayAudio(Sound_Click);
				}
				case "QUAD_BUTTON_EXIT": {
					Button_Exit();
					PlayAudio(Sound_ClickSoft);
				}
				case "QUAD_BUTTON_CONTINUE": {
					Button_Continue();
					PlayAudio(Sound_ClickSoft);
				}
				case "QUAD_SCROLLBAR": {
					HoldScrollbar = True;
					HoldScrollbarPos = MouseY-Quad_Scrollbar.RelativePosition_V3.Y;
				}
				case "QUAD_SCROLLBAR_BACKGROUND": {
					Quad_Scrollbar.RelativePosition_V3.Y = MouseY+Quad_Scrollbar.Size.Y/2;
					
					HoldScrollbar = True;
					HoldScrollbarPos = MouseY-Quad_Scrollbar.RelativePosition_V3.Y;
				}
				case "QUAD_GHOSTSECTION_NEXT": {
					if(CurrentSection != -1) {
						if(CurrentSection+1 >= GhostSections.count) CurrentSection = 0;
						else CurrentSection += 1;
					}

					Frame_Ghosts.Hide();
					Quad_Loading.Show();

					if(CurrentSection == 0) {
						SendCustomEvent("FetchLocalGhosts", []);
						SendCustomEvent("UpdateMedals", []);
					}
					else {
						declare ConnectZones = GhostSections;
						declare Removed = ConnectZones.removekey(0);
						declare Zone = ConnectZones[0];
						for(I,1,CurrentSection-1)
							Zone ^= "|"^ConnectZones[I];
						SendCustomEvent("FetchRecords", [Zone]);
					}
				}
				case "QUAD_GHOSTSECTION_PREVIOUS": {
					if(CurrentSection != -1) {
						if(CurrentSection-1 < 0) CurrentSection = GhostSections.count-1;
						else CurrentSection -= 1;
					}

					Frame_Ghosts.Hide();
					Quad_Loading.Show();
					
					if(CurrentSection == 0) {
						SendCustomEvent("FetchLocalGhosts", []);
						SendCustomEvent("UpdateMedals", []);
					}
					else {
						declare ConnectZones = GhostSections;
						declare Removed = ConnectZones.removekey(0);
						declare Zone = ConnectZones[0];
						for(I,1,CurrentSection-1)
							Zone ^= "|"^ConnectZones[I];
						SendCustomEvent("FetchRecords", [Zone]);
					}
				}
				case "QUAD_GHOST": {
					declare Selector = (Event.Control.Parent as CMlFrame);
					declare File = Selector.DataAttributeGet("file");

					declare netwrite Text[] SelectedGhostFiles for UI;
					declare netwrite Text[] SelectedGhostUrls for UI;

					if(File != "") {
						if(SelectedGhostFiles.exists(File))
							SelectedGhostFiles.remove(File);
						else
							SelectedGhostFiles.add(File);
					}

					UpdateLoadedGhosts();
				}
			}
		}
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch(Event.CustomEventType) {
				case "MapName": {
					declare MapName = Event.CustomEventData[0];
					SlideText_Set(Label_MapName, Label_MapName2, MapName, LabelDistance);
				}
				case "Challenge": {
					declare Challenge = Event.CustomEventData[0];
					SlideText_Set(Label_Challenge, Label_Challenge2, Challenge, LabelDistance);
				}
				case "Car": {
					declare Text Car for This;
					Car = Event.CustomEventData[0];
					SlideText_Set(Label_Car, Label_Car2, Car, LabelDistance);

					if(Car == "") {
						Label_PB_Time.SetText("-:--.---");
					}
					else {
						declare netread SPerformance[Text] Performances for GetOwner().Score;
						declare Performance = Performances[Car];
						if(Performance.BestFinishIndex == -1) Label_PB_Time.SetText("-:--.---");
						else {
							declare BestFinish = Performance.Finishes[Performance.BestFinishIndex];
							Label_PB_Time.SetText(TimeToTextWithMilli(BestFinish.Time));
						}

						declare Text[Text] Validators for Page;
						if(Validators.existskey(Car)) {
							(Page.GetFirstChild("LABEL_VALIDATOR_TEXT") as CMlLabel).SetText("{{{{VALIDATED_BY}}}}:");
							(Page.GetFirstChild("LABEL_VALIDATOR") as CMlLabel).SetText(Validators[Car]);
						}
						else {
							(Page.GetFirstChild("LABEL_VALIDATOR_TEXT") as CMlLabel).SetText("{{{{NOT_YET_VALIDATED}}}}");
							(Page.GetFirstChild("LABEL_VALIDATOR") as CMlLabel).SetText("");
						}
					}

					if(CurrentSection == 0)
						SendCustomEvent("UpdateMedals", []);
					else {
						declare ConnectZones = GhostSections;
						declare Removed = ConnectZones.removekey(0);
						declare Zone = ConnectZones[0];
						for(I,1,CurrentSection-1)
							Zone ^= "|"^ConnectZones[I];
						SendCustomEvent("ShowRecords", [Zone]);
					}
				}
				case "Open": {
					ShowInGameMenu();
					IsMenuOpen = False;
				}
				case "Navigation": {
					EnableMenuNavigationInputs = Event.CustomEventData[0] == "True";
					if(EnableMenuNavigationInputs) Select(FirstNav);
				}
				case "Exit": {
					CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
					declare ValidationMode = Event.CustomEventData[0] == "True";
					Playground.QuitServer(!ValidationMode);
				}
				case "UpdateLoadedGhosts": {
					UpdateLoadedGhosts();
				}
				case "UpdateRecord": {
					declare _Car = Event.CustomEventData[0];
					declare _Login = Event.CustomEventData[1];
					declare _Nickname = Event.CustomEventData[2];
					declare _Time = TextLib::ToInteger(Event.CustomEventData[3]);
					declare _Url = Event.CustomEventData[4];
					declare _FileName = Event.CustomEventData[5];

					declare SGhostInfo[] LoadedGhosts for Page;
					for(I, 0, LoadedGhosts.count-1) {
						declare Ghost = LoadedGhosts[I];
						if(Ghost.Login == _Login && Ghost.Time == _Time) {
							Ghost.Url = _Url;
							Ghost.File = _FileName;
							LoadedGhosts[I] = Ghost;
						}
					}
					UpdateLoadedGhosts();
				}
				case "Show": {
					
				}
			}
		}
		case CMlScriptEvent::Type::MenuNavigation: {
			switch(Event.MenuNavAction) {
				case CMlScriptEvent::EMenuNavAction::Cancel: {
					if(IsPauseMenu)
						CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
					else
						Playground.QuitServer(False);	
				}
				case CMlScriptEvent::EMenuNavAction::Select: {
					if(SelectedNav != Null) {
						if(SelectedNav.ControlId == "QUAD_BUTTON_CONTINUE") Button_Continue();
						else if(SelectedNav.ControlId == "QUAD_BUTTON_EXIT") Button_Exit();
						else if(SelectedNav.ControlId == "QUAD_BUTTON_START") Button_Start();
					}
				}
				case CMlScriptEvent::EMenuNavAction::Up: {
					if(SelectedNav != Null) {
						if(NavControls[SelectedNav].Up != Null)
							Select(NavControls[SelectedNav].Up);
						//else
						//	PassNavigation("Up");
					}
					else {
						Select(FirstNav);
					}
				}
				case CMlScriptEvent::EMenuNavAction::Down: {
					if(SelectedNav != Null) {
						if(NavControls[SelectedNav].Down != Null)
							Select(NavControls[SelectedNav].Down);
						//else
						//	PassNavigation("Down");
					}
					else {
						Select(FirstNav);
					}
				}
				case CMlScriptEvent::EMenuNavAction::Left: {
					if(SelectedNav != Null) {
						if(NavControls[SelectedNav].Left != Null)
							Select(NavControls[SelectedNav].Left);
						else
							PassNavigation("Vehicle");
					}
					else {
						Select(FirstNav);
					}
				}
				case CMlScriptEvent::EMenuNavAction::Right: {
					if(SelectedNav != Null) {
						if(NavControls[SelectedNav].Right != Null)
							Select(NavControls[SelectedNav].Right);
						else
							PassNavigation("Vehicle");
					}
					else {
						Select(FirstNav);
					}
				}
			}
		}
	}
}

if(IsMenuOpen != IsMenuNavigationForeground) {
	IsMenuOpen = IsMenuNavigationForeground;
	if(IsMenuOpen) {
		SendCustomEvent("Open", []);
		Select((Page.GetFirstChild("QUAD_BUTTON_CONTINUE") as CMlQuad));
		Page.GetFirstChild("FRAME_MENU").RelativePosition_V3.X = -110.;
		AnimMgr.Add(Page.GetFirstChild("FRAME_MENU"), "<frame pos=\"0 0\"/>", 500, CAnimManager::EAnimManagerEasing::QuadOut);
	}
	else {
		SendCustomEvent("Close", []);
		SendCustomEvent("Start", ["False"]);
	}
}

if(Frame_Outer_Ghosts.ScrollOffset != PreviousScroll) {
	+++UpdateTooltip+++
}

if(HoldScrollbar && MouseLeftButton) {
	Quad_Scrollbar.RelativePosition_V3.Y = MathLib::Clamp(MouseY-HoldScrollbarPos,Quad_Scrollbar.Size.Y-56.,0.);
	Frame_Outer_Ghosts.ScrollOffset.Y = (MouseY-HoldScrollbarPos)/(Quad_Scrollbar.Size.Y-56.)*Frame_Outer_Ghosts.ScrollMax.Y;

	Frame_Ghosts.RelativePosition_V3 = -Frame_Outer_Ghosts.ScrollOffset;
	UpdateLoadedGhosts();
}
else {
	if(Frame_Outer_Ghosts.ScrollOffset != PreviousScroll) {
		Frame_Ghosts.RelativePosition_V3 = -Frame_Outer_Ghosts.ScrollOffset;
		UpdateLoadedGhosts();

		declare ScrollRatio = 0.;
		if(Frame_Outer_Ghosts.ScrollMax.Y != 0)
			ScrollRatio = MathLib::NearestInteger(Frame_Outer_Ghosts.ScrollOffset.Y/10)*10 / Frame_Outer_Ghosts.ScrollMax.Y;
		Quad_Scrollbar.RelativePosition_V3.Y = -ScrollRatio*(56-Quad_Scrollbar.Size.Y);

		PreviousScroll = Frame_Outer_Ghosts.ScrollOffset;
	}

	HoldScrollbar = False;
}

if(Page.GetFirstChild("FRAME_TOOLTIP").Visible) Page.GetFirstChild("FRAME_TOOLTIP").RelativePosition_V3 = <MouseX, MouseY>;

Label_GhostSection.Value = GhostSections[CurrentSection];

if(IsBlurred) Page.GetFirstChild("QUAD_BACKGROUND").Show();
else Page.GetFirstChild("QUAD_BACKGROUND").Hide();

SlideText_Loop(Frame_Label_MapName, Label_MapName, Label_MapName2, LabelDistance, .015);
SlideText_Loop(Frame_Label_Challenge, Label_Challenge, Label_Challenge2, LabelDistance, -.015);
SlideText_Loop(Frame_Label_Car, Label_Car, Label_Car2, LabelDistance, -.015);

Quad_Loading.RelativeRotation += Period / 5.0;
***