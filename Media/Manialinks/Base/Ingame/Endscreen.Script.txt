#Struct SFinish {
	Integer Timestamp;
	Integer Time;
	Integer[] Checkpoints;
	Real Distance;
	Integer Stunts;
}

#Struct SPerformance {
	Text Vehicle;
	Integer BestFinishIndex;
	SFinish[] Finishes;
}

#Struct SChannel {
	Integer Position;
	Text Id;
	Text Name;
}

#Struct SGame {
	Text name;
}

#Struct SMember {
	Text Username;
	Text Status;
	SGame Game;
	Text AvatarUrl;
	Text Avatar;
	Text Discriminator;
	Text Id;
}

#Struct SWidget {
	SChannel[] Channels;
	Text InstantInvite;
	Text Id;
	SMember[] Members;
	Text Name;
	Integer Code;
	Text Message;
}

#Struct SRanking {
	Integer Rank;
	Integer Count;
}

#Struct SRecord {
	Integer Rank;
	Text Login;
	Text Nickname;
	Integer Time;
	Integer[] Checkpoints;
	Real Distance;
	Integer Stunts;
}

#Struct SLeaderboard {
	SRecord[] Records;
}

#Struct SRecordResult {
	SRecord Record;
	Integer LastRecord;
	Integer ActivityPoints;
	Integer Skillpoints;
	Real ShortestDistance;
	Integer MostStuntPoints;
	Real WRPB;
	Text Gamemode;
	SRanking[Text] Rankings;
	SLeaderboard[Text] Leaderboards;
}

Text TimeToTextWithMilli(Integer _Time) {
	return TextLib::TimeToText(_Time, True)^TextLib::SubText(""^_Time, TextLib::Length(""^_Time)-1, 1);
}

CTmMlPlayer GetOwner() {
	wait(GUIPlayer != Null || InputPlayer != Null);
	if(GUIPlayer != Null) return GUIPlayer;
	return InputPlayer;
}

***Start***
***
declare Start = Now;
declare SWidget Widget;

declare Widget_Hover = False;
declare Widget_Time = -1;
declare Widget_CurrentMember = 0;

declare Frame_Discord = (Page.GetFirstChild("FRAME_DISCORD") as CMlFrame);
declare Frame_Discord_Users = [(Frame_Discord.GetFirstChild("FRAME_USER#1") as CMlFrame),(Frame_Discord.GetFirstChild("FRAME_USER#2") as CMlFrame)];

declare Frame_LB_Global_Records = (Page.GetFirstChild("FRAME_LB_GLOBAL_RECORDS") as CMlFrame);
declare Frame_LB_Shortest_Distance = (Page.GetFirstChild("FRAME_LB_SHORTEST_DISTANCE") as CMlFrame);

declare Frame_Fastest_Time = (Page.GetFirstChild("FRAME_FASTEST_TIME") as CMlFrame);
declare Frame_Shortest_Distance = (Page.GetFirstChild("FRAME_SHORTEST_DISTANCE") as CMlFrame);
declare Frame_Most_Acrobatic = (Page.GetFirstChild("FRAME_MOST_ACROBATIC") as CMlFrame);
declare Frame_First_Lap = (Page.GetFirstChild("FRAME_FIRST_LAP") as CMlFrame);
declare Frame_Best_Lap = (Page.GetFirstChild("FRAME_BEST_LAP") as CMlFrame);

declare Label_Showcase = (Page.GetFirstChild("LABEL_SHOWCASE") as CMlLabel);

declare netread SPerformance[Text] Performances for GetOwner().Score;

declare RefreshTime = -1;
declare Text[] Showcases;
declare Integer CurrentShowcase;

declare RecordSubmitted = False;
declare RecordFailed = False;

declare PrivateMap = False;
***

***Loop***
***
foreach(Event,PendingEvents) {
	switch(Event.Type) {
		case CMlScriptEvent::Type::MouseClick: {
			switch(Event.ControlId) {
				case "QUAD_BUTTON_CONTINUE": {
					if(RecordSubmitted || PrivateMap) {
						PlayAudio(Sound_Click);
						SendCustomEvent("Continue", []);
					}
				}
				case "QUAD_BUTTON_DISCORD": {
					PlayAudio(Sound_Click);
					OpenLink("https://discord.gg/v6TW88m", ::LinkType::ExternalBrowser);
				}
				case "QUAD_BUTTON_FAIL_REFRESH": {
					PlayAudio(Sound_Click);
					SendCustomEvent("FailRefresh", []);
					Page.GetFirstChild("FRAME_FAIL_REFRESH").Hide();
				}
			}
		}
		case CMlScriptEvent::Type::MouseOver: {
			switch(Event.ControlId) {
				case "QUAD_BUTTON_DISCORD": {
					Page.GetFirstChild("FRAME_TOOLTIP").Show();
					Widget_CurrentMember = MathLib::Rand(0,Widget.Members.count);
					Widget_Hover = True;
				}
			}
		}
		case CMlScriptEvent::Type::MouseOut: {
			switch(Event.ControlId) {
				case "QUAD_BUTTON_DISCORD": {
					Page.GetFirstChild("FRAME_TOOLTIP").Hide();
					Widget_Hover = False;
				}
			}
		}
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch(Event.CustomEventType) {
				case "Show": {
					Page.GetFirstChild("FRAME_ENDSCREEN_INFO").Hide();
					AnimMgr.Add(Page.GetFirstChild("QUAD_FLASH"), "<quad opacity=\"1\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);
					AnimMgr.AddChain(Page.GetFirstChild("QUAD_FLASH"), "<quad opacity=\"0\"/>", 200, CAnimManager::EAnimManagerEasing::QuadIn);
					
					AnimMgr.Add(Page.GetFirstChild("FRAME_ENDSCREEN_INFO"), "<frame hidden=\"0\"/>", 200, CAnimManager::EAnimManagerEasing::QuadOut);

					Page.GetFirstChild("QUAD_BUTTON_CONTINUE").Focus();

					Start = Now;
				}
				case "Update": {
					declare Text Map_Name for Page;
					declare Text Map_Env for Page;
					declare Text Car for Page;
					declare Text[] Challenges for Page;

					Page.GetFirstChild("FRAME_RESULTS").Hide();
					
					declare Performance = Performances[Car];
					declare BestFinish = Performance.Finishes[Performances[Car].BestFinishIndex];
					declare ThisFinish = Performance.Finishes[Performance.Finishes.count-1];
					(Page.GetFirstChild("LABEL_TIME") as CMlLabel).SetText(TimeToTextWithMilli(ThisFinish.Time));

					Label_Showcase.RelativeScale = 0.;		

					Showcases.clear();
					CurrentShowcase = 0;	

					if(Performance.Finishes.count == 1) {
						Showcases.add("{{{{YOU_HAVE_FINISHED}}}}");
					}
					else if(Performance.BestFinishIndex == Performance.Finishes.count - 1) {
						Showcases.add("{{{{YOU_HAVE_IMPROVED}}}}");
					}
					else if(ThisFinish.Time == BestFinish.Time) {
						Showcases.add("{{{{YOU_HAVE_EQUALED}}}}");
					}
					else {
						Showcases.add("{{{{MAYBE_NEXT_TIME}}}}");
					}

					Label_Showcase.SetText(Showcases[CurrentShowcase]);

					SlideText_Set((Page.GetFirstChild("LABEL_MAPNAME") as CMlLabel), (Page.GetFirstChild("LABEL_MAPNAME_2") as CMlLabel), Map_Name, 15);
					SlideText_Set((Page.GetFirstChild("LABEL_ENV") as CMlLabel), (Page.GetFirstChild("LABEL_ENV_2") as CMlLabel), TextLib::ToUpperCase(Map_Env), 15);
					SlideText_Set((Page.GetFirstChild("LABEL_CAR") as CMlLabel), (Page.GetFirstChild("LABEL_CAR_2") as CMlLabel), Car, 15);
					SlideText_Set((Page.GetFirstChild("LABEL_CHALLENGE") as CMlLabel), (Page.GetFirstChild("LABEL_CHALLENGE_2") as CMlLabel), TextLib::ToUpperCase(TextLib::Join(" + ", Challenges)), 15);

					RefreshTime = Now;
					RecordSubmitted = False;
					RecordFailed = False;
				}
				case "Discord": {
					declare JsonSuccess = Widget.fromjson(Event.CustomEventData[0]);
					Widget_Time = Now;
				}
				case "Record": {
					declare SRecordResult[Text] RecordResult for Page;
					declare Success = RecordResult.fromjson(Event.CustomEventData[0]);
					declare Result_Time = RecordResult["Time"];

					PrivateMap = False;

					if(Result_Time.Rankings["World"].Count == 1 && Result_Time.LastRecord == -1)
						Showcases.add("{{{{NEW_VALIDATION}}}}");
					
					//if(Result_Time.Record.Time == Result_Time.LastRecord) {
					//	Showcases.add("{{{{YOU_HAVE_EQUALED_WORLD_RECORD}}}}");
					//}
					//else 
					if(Result_Time.LastRecord == -1 || Result_Time.Record.Time < Result_Time.LastRecord) {
						if(Result_Time.Rankings["World"].Rank == 1)
							Showcases.add("{{{{NEW_WORLD_RECORD}}}}");

						Showcases.add("{{{{SKILLPOINTS}}}}: "^Result_Time.Skillpoints);
						Showcases.add("{{{{ACTIVITY POINTS}}}}: "^Result_Time.ActivityPoints);
						Showcases.add("WR/PB: "^TextLib::FormatReal(Result_Time.WRPB*100, 2, False, False)^"%");

						if(Result_Time.Rankings["World"].Rank == 1) { // World record related
							Showcases.add("{{{{WORLD}}}}: "^Result_Time.Rankings["World"].Rank^"/"^Result_Time.Rankings["World"].Count);
						}
						else {
							foreach(Zone => Ranking, Result_Time.Rankings) {
								declare Zones = TextLib::Split("|", Zone);
								Showcases.add(TextLib::ToUpperCase(Zones[Zones.count-1])^": "^Ranking.Rank^"/"^Ranking.Count);
							}
						}
					}
					else {
						
					}

					SlideText_Set((Frame_Fastest_Time.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_Fastest_Time.GetFirstChild("LABEL_RANK_2") as CMlLabel), "", 15);
					SlideText_Set((Frame_Shortest_Distance.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_Shortest_Distance.GetFirstChild("LABEL_RANK_2") as CMlLabel), "", 15);
					SlideText_Set((Frame_Most_Acrobatic.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_Most_Acrobatic.GetFirstChild("LABEL_RANK_2") as CMlLabel), "", 15);
					SlideText_Set((Frame_First_Lap.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_First_Lap.GetFirstChild("LABEL_RANK_2") as CMlLabel), "", 15);
					SlideText_Set((Frame_Best_Lap.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_Best_Lap.GetFirstChild("LABEL_RANK_2") as CMlLabel), "", 15);

					foreach(Type => RecordSet, RecordResult) {
						declare Text[] Ranks;

						declare BestRecord = RecordSet.LastRecord;
						if(RecordSet.LastRecord == -1 || RecordSet.Record.Time < RecordSet.LastRecord) BestRecord = RecordSet.Record.Time;

						foreach(Zone => Ranking, RecordSet.Rankings) {
							declare Zones = TextLib::Split("|", Zone);
							Ranks.add(Zones[Zones.count-1]^": "^Ranking.Rank^"/"^Ranking.Count);
						}

						if(Type == "Time") {
							(Frame_Fastest_Time.GetFirstChild("LABEL_TIME") as CMlLabel).SetText(TimeToTextWithMilli(BestRecord));
							SlideText_Set((Frame_Fastest_Time.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_Fastest_Time.GetFirstChild("LABEL_RANK_2") as CMlLabel), TextLib::Join("    ",Ranks), 15);
						}
						if(Type == "Distance") {
							(Frame_Shortest_Distance.GetFirstChild("LABEL_TIME") as CMlLabel).SetText(RecordSet.ShortestDistance^"");
							SlideText_Set((Frame_Shortest_Distance.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_Shortest_Distance.GetFirstChild("LABEL_RANK_2") as CMlLabel), TextLib::Join("    ",Ranks), 15);
						}
						if(Type == "Stunt") {
							if(RecordSet.MostStuntPoints < 0)
								(Frame_Most_Acrobatic.GetFirstChild("LABEL_TIME") as CMlLabel).SetText("-");
							else
								(Frame_Most_Acrobatic.GetFirstChild("LABEL_TIME") as CMlLabel).SetText(RecordSet.MostStuntPoints^"");
							SlideText_Set((Frame_Most_Acrobatic.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_Most_Acrobatic.GetFirstChild("LABEL_RANK_2") as CMlLabel), TextLib::Join("    ",Ranks), 15);
						}
						if(Type == "FirstLap")
							SlideText_Set((Frame_First_Lap.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_First_Lap.GetFirstChild("LABEL_RANK_2") as CMlLabel), TextLib::Join("    ",Ranks), 15);
						if(Type == "BestLap")
							SlideText_Set((Frame_Best_Lap.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_Best_Lap.GetFirstChild("LABEL_RANK_2") as CMlLabel), TextLib::Join("    ",Ranks), 15);
					}

					declare RankOffset = 0;
					
					for(I,0,Frame_LB_Global_Records.Controls.count-1) {
						declare Frame_Record = (Frame_LB_Global_Records.Controls[I] as CMlFrame);
						if(Result_Time.Leaderboards["World"].Records.existskey(I)) {
							declare Record = Result_Time.Leaderboards["World"].Records[I];

							declare Rank = I+1;
							if(Result_Time.Leaderboards["World"].Records.existskey(I-1)) {
								if(Record.Time == Result_Time.Leaderboards["World"].Records[I-1].Time)
									RankOffset += 1;
								else
									RankOffset = 0;
							}
							Rank = I+1-RankOffset;
							
							declare RankColor = "";
							switch(Rank) {
								case 1: { RankColor = "$FF0"; }
								case 2: { RankColor = "$DDD"; }
								case 3: { RankColor = "$A62"; }
								default: { RankColor = "$AAA"; }
							}

							declare Label_Record = (Frame_Record.GetFirstChild("LABEL_RECORD") as CMlLabel);
							Label_Record.SetText(RankColor^TextLib::FormatInteger(Rank, 2)^")$z "^TimeToTextWithMilli(Record.Time));

							declare Label_Nickname = (Frame_Record.GetFirstChild("LABEL_NICKNAME") as CMlLabel);
							if(Record.Nickname == "") Label_Nickname.SetText(Record.Login);
							else Label_Nickname.SetText(Record.Nickname);

							Frame_Record.Show();
						}
						else {
							Frame_Record.Hide();
						}
					}

					RankOffset = 0;

					for(I,0,Frame_LB_Shortest_Distance.Controls.count-1) {
						declare Frame_Record = (Frame_LB_Shortest_Distance.Controls[I] as CMlFrame);
						if(RecordResult["Distance"].Leaderboards["World"].Records.existskey(I)) {
							declare Record = RecordResult["Distance"].Leaderboards["World"].Records[I];

							declare Rank = I+1;
							if(RecordResult["Distance"].Leaderboards["World"].Records.existskey(I-1)) {
								if(Record.Distance == RecordResult["Distance"].Leaderboards["World"].Records[I-1].Distance)
									RankOffset += 1;
								else
									RankOffset = 0;
							}
							Rank = I+1-RankOffset;
							
							declare RankColor = "";
							switch(Rank) {
								case 1: { RankColor = "$FF0"; }
								case 2: { RankColor = "$DDD"; }
								case 3: { RankColor = "$A62"; }
								default: { RankColor = "$AAA"; }
							}

							declare Label_Record = (Frame_Record.GetFirstChild("LABEL_RECORD") as CMlLabel);
							Label_Record.SetText(RankColor^TextLib::FormatInteger(Rank, 2)^")$z "^Record.Distance);

							declare Label_Nickname = (Frame_Record.GetFirstChild("LABEL_NICKNAME") as CMlLabel);
							if(Record.Nickname == "") Label_Nickname.SetText(Record.Login);
							else Label_Nickname.SetText(Record.Nickname);

							Frame_Record.Show();
						}
						else {
							Frame_Record.Hide();
						}
					}

					RecordSubmitted = True;
					RecordFailed = False;
				}
				case "RecordFail": {
					RecordFailed = True;
					RecordSubmitted = False;
				}
				case "RecordFail": {
					RecordFailed = True;
					RecordSubmitted = False;
				}
				case "PrivateMap": {
					PrivateMap = True;
				}
			}
		}
		case CMlScriptEvent::Type::MenuNavigation: {
			switch(Event.MenuNavAction) {
				case CMlScriptEvent::EMenuNavAction::Select: {
					if(RecordSubmitted || PrivateMap) {
						if(CurrentShowcase + 1 == Showcases.count)
							SendCustomEvent("Continue", []);
						else {
							CurrentShowcase += 1;
							Label_Showcase.SetText(Showcases[CurrentShowcase]);
							RefreshTime = Now;
						}
					}
				}
			}
		}
	}
}

if(Now - Start > 200) EnableMenuNavigationInputs = True;
else EnableMenuNavigationInputs = False;

if(Now - Start > 400) {
	(Page.GetFirstChild("QUAD_FLASH") as CMlQuad).Opacity = 0.;
}

if(RefreshTime != -1) {
	declare Time = Now - RefreshTime;
	if(Time < 2500) {
		Label_Showcase.RelativeScale = AnimLib::EaseOutQuad(Time, 0., 1., 500) - AnimLib::EaseInOutQuad(Time-2000, 0., 1., 500);
	}
	else if(RecordFailed) {
		Page.GetFirstChild("FRAME_FAIL_REFRESH").Show();
	}
	else if(RecordSubmitted) {
		Page.GetFirstChild("FRAME_FAIL_REFRESH").Hide();
		if(CurrentShowcase == Showcases.count-1) {
			CurrentShowcase = 0;
			RefreshTime = -1;
			Label_Showcase.RelativeScale = 0.;
			Page.GetFirstChild("FRAME_RESULTS").Show();
		}
		else {
			CurrentShowcase += 1;
			
			Label_Showcase.SetText(Showcases[CurrentShowcase]);
			RefreshTime = Now;
		}
	}
}

SlideText_Loop((Page.GetFirstChild("FRAME_LABEL_MAPNAME") as CMlFrame), (Page.GetFirstChild("LABEL_MAPNAME") as CMlLabel), (Page.GetFirstChild("LABEL_MAPNAME_2") as CMlLabel), 15, .015);
SlideText_Loop((Page.GetFirstChild("FRAME_LABEL_ENV") as CMlFrame), (Page.GetFirstChild("LABEL_ENV") as CMlLabel), (Page.GetFirstChild("LABEL_ENV_2") as CMlLabel), 15, .015);
SlideText_Loop((Page.GetFirstChild("FRAME_LABEL_CAR") as CMlFrame), (Page.GetFirstChild("LABEL_CAR") as CMlLabel), (Page.GetFirstChild("LABEL_CAR_2") as CMlLabel), 15, .015);
SlideText_Loop((Page.GetFirstChild("FRAME_LABEL_CHALLENGE") as CMlFrame), (Page.GetFirstChild("LABEL_CHALLENGE") as CMlLabel), (Page.GetFirstChild("LABEL_CHALLENGE_2") as CMlLabel), 15, .015);

declare Frame_Fastest_Time = (Page.GetFirstChild("FRAME_FASTEST_TIME") as CMlFrame);
declare Frame_Shortest_Distance = (Page.GetFirstChild("FRAME_SHORTEST_DISTANCE") as CMlFrame);
declare Frame_Most_Acrobatic = (Page.GetFirstChild("FRAME_MOST_ACROBATIC") as CMlFrame);
declare Frame_First_Lap = (Page.GetFirstChild("FRAME_FIRST_LAP") as CMlFrame);
declare Frame_Best_Lap = (Page.GetFirstChild("FRAME_BEST_LAP") as CMlFrame);

SlideText_Loop(Frame_Fastest_Time, (Frame_Fastest_Time.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_Fastest_Time.GetFirstChild("LABEL_RANK_2") as CMlLabel), 15, .015);
SlideText_Loop(Frame_Shortest_Distance, (Frame_Shortest_Distance.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_Shortest_Distance.GetFirstChild("LABEL_RANK_2") as CMlLabel), 15, .015);
SlideText_Loop(Frame_Most_Acrobatic, (Frame_Most_Acrobatic.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_Most_Acrobatic.GetFirstChild("LABEL_RANK_2") as CMlLabel), 15, .015);
SlideText_Loop(Frame_First_Lap, (Frame_First_Lap.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_First_Lap.GetFirstChild("LABEL_RANK_2") as CMlLabel), 15, .015);
SlideText_Loop(Frame_Best_Lap, (Frame_Best_Lap.GetFirstChild("LABEL_RANK") as CMlLabel), (Frame_Best_Lap.GetFirstChild("LABEL_RANK_2") as CMlLabel), 15, .015);

if(Page.GetFirstChild("FRAME_TOOLTIP").Visible) Page.GetFirstChild("FRAME_TOOLTIP").RelativePosition_V3 = <MouseX, MouseY>;

if(Widget.Code == 50004) {
	(Page.GetFirstChild("LABEL_NAME") as CMlLabel).SetText("$f00WIDGET NOT ENABLED");
}
else if(Widget.Id != "") {
	(Frame_Discord.GetFirstChild("LABEL_NAME") as CMlLabel).SetText(Widget.Name);

	if(Widget_Time != -1) {
		declare Time = Now - Widget_Time;

		if(Widget_Hover && Widget.Members.count != 0) {
			(Frame_Discord.GetFirstChild("LABEL_NAME") as CMlLabel).Hide();
			(Frame_Discord.GetFirstChild("LABEL_MEMBERCOUNT") as CMlLabel).Hide();
			foreach(Frame, Frame_Discord_Users) Frame.Show();

			if(Widget.Members.count > 1) {
				declare Offset = 0;
				if(Time > 3000) {
					Offset = 1;
				}

				for(I, 0, Frame_Discord_Users.count-1) {
					declare Frame = Frame_Discord_Users[I];

					declare Pos = I;
					if(Pos == 0) Pos = I + Offset*2;
					if(Widget_CurrentMember+Pos > Widget.Members.count-1) Pos = -Widget_CurrentMember;

					declare Quad_Avatar = (Frame.GetFirstChild("QUAD_AVATAR") as CMlQuad);
					declare Label_Username = (Frame.GetFirstChild("LABEL_USERNAME") as CMlLabel);

					declare Member = Widget.Members[Widget_CurrentMember+Pos];
					
					Quad_Avatar.ChangeImageUrl(Member.AvatarUrl);
					Quad_Avatar.RefreshImages();

					declare Username = Member.Username;
					if(Username == "") Username = "$BBB[unknown]";

					declare StatusColor = "$888";
					if(Member.Status == "idle") StatusColor = "$ff0";
					else if(Member.Status == "online") StatusColor = "$0f0";
					else if(Member.Status == "dnd") StatusColor = "$f00";

					Label_Username.SetText(Username ^ "$ACF#" ^ Member.Discriminator ^ " "^StatusColor^"•");
				}

				Frame_Discord_Users[0].RelativePosition_V3.Y = AnimLib::EaseInOutQuad(Time-2000, 0., 10., 1000) + AnimLib::EaseInOutQuad(Time-2000-2000-1000, 0., 10., 1000) + Offset*-20;
				Frame_Discord_Users[1].RelativePosition_V3.Y = AnimLib::EaseInOutQuad(Time-2000, -10., 10., 1000) + AnimLib::EaseInOutQuad(Time-2000-2000-1000, 0., 10., 1000);

				if(Time > 6000) {
					Widget_Time = Now;

					Widget_CurrentMember += 2;
					if(Widget_CurrentMember >= Widget.Members.count) Widget_CurrentMember = 0;
				}
			}
			else {
				
			}
		}
		else {
			foreach(Frame, Frame_Discord_Users) Frame.Hide();

			(Frame_Discord.GetFirstChild("LABEL_NAME") as CMlLabel).Show();
			(Frame_Discord.GetFirstChild("LABEL_MEMBERCOUNT") as CMlLabel).Show();

			(Frame_Discord.GetFirstChild("LABEL_NAME") as CMlLabel).Opacity = AnimLib::EaseOutQuad(Time, 0., 1., 300) + AnimLib::EaseOutQuad(Time-2000, 0., -1., 300);
			(Frame_Discord.GetFirstChild("LABEL_MEMBERCOUNT") as CMlLabel).Opacity = AnimLib::EaseOutQuad(Time-2000-300, 0., 1., 300) + AnimLib::EaseOutQuad(Time-2000-2000-300, 0., -1., 300);
			
			if(Widget.Members.count > 1) (Frame_Discord.GetFirstChild("LABEL_MEMBERCOUNT") as CMlLabel).SetText("""$0f0• $fff{{{Widget.Members.count}}} members online""");
			else if(Widget.Members.count == 1) (Frame_Discord.GetFirstChild("LABEL_MEMBERCOUNT") as CMlLabel).SetText("""$0f0• $fff{{{Widget.Members.count}}} member online""");
			else (Frame_Discord.GetFirstChild("LABEL_MEMBERCOUNT") as CMlLabel).SetText("$888• $fff0 members online");
			
			if(Time > 4600) Widget_Time = Now;
		}
	}
}
***
