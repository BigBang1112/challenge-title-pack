#RequireContext CManiaAppPlayground

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib

#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/Http.Script.txt" as Http
#Include "Libs/BigBang1112/Random.Script.txt" as Random
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Map.Script.txt" as Map
#Include "Libs/BigBang1112/Discord.Script.txt" as Discord
#Include "Libs/BigBang1112/Time.Script.txt" as Time

#Include "Libs/Challenge/Service/Status.Script.txt" as Service_Status
#Include "Libs/Challenge/Service/Map.Script.txt" as Service_Map
#Include "Libs/Challenge/ModifierBase.Script.txt" as ModifierBase
#Include "Libs/Challenge/ReplayBrowser.Script.txt" as ReplayBrowser
#Include "Libs/Challenge/Notification.Script.txt" as Notification
#Include "Libs/Challenge/NotificationPresets.Script.txt" as NotificationPresets

#Include "Libs/Challenge/Ingame/Vehicle.Script.txt" as Ingame_Vehicle
#Include "Libs/Challenge/Ingame/Rating.Script.txt" as Ingame_Rating
#Include "Libs/Challenge/Ingame/Map.Script.txt" as Ingame_Map
#Include "Libs/Challenge/Ingame/Spotify.Script.txt" as Ingame_Spotify
#Include "Libs/Challenge/Ingame/Dashboard.Script.txt" as Ingame_Dashboard
#Include "Libs/Challenge/Ingame/Playsession.Script.txt" as Ingame_Playsession
#Include "Libs/Challenge/Ingame/Endscreen.Script.txt" as Ingame_Endscreen
#Include "Libs/Challenge/Ingame/Menu.Script.txt" as Ingame_Menu
#Include "Libs/Challenge/Ingame/Flash.Script.txt" as Ingame_Flash
#Include "Libs/Challenge/Ingame/Outro.Script.txt" as Ingame_Outro
#Include "Libs/Challenge/Ingame/Stunts.Script.txt" as Ingame_Stunts
#Include "Libs/Challenge/Ingame/Checkpoint.Script.txt" as Ingame_Checkpoint
#Include "Libs/Challenge/Ingame/Ghosts.Script.txt" as Ingame_Ghosts
#Include "Libs/Challenge/Ingame/Leaderboard.Script.txt" as Ingame_Leaderboard

#Include "Libs/Challenge/Ingame/Gamemodes/Race.Script.txt" as Race
#Include "Libs/Challenge/Ingame/Gamemodes/Stunt.Script.txt" as Stunt

#Include "Libs/Challenge/Vehicle.Script.txt" as Vehicle

declare Boolean SkinNotified;

Void ShowIngame() {
	Layers::Show("Dashboard", True);
	Layers::Show("Stunts", True);
	Layers::Show("Playsession", True);
	Layers::Show("Map", True);
	Layers::Show("Checkpoint", True);
	//Layers::Show("Ghosts", True);
	//Layers::Show("Leaderboard", True);

	if(!SkinNotified) {
		declare persistent Text[Text] P_Skin for LocalUser;
		if(P_Skin.count == 0)
			NotificationPresets::Notify_Skins(LocalUser);
		SkinNotified = True;
	}
}

Void HideIngame() {
	Layers::Hide("Dashboard");
	Layers::Hide("Stunts");
	Layers::Hide("Playsession");
	Layers::Hide("Map");
	Layers::Hide("Checkpoint");
	Layers::Hide("Ghosts");
	Layers::Hide("Leaderboard");
}

Void CheckStatus() {
	if(!Time::Stamp_CreateOnce("STATUS", 10*1000)) {
		if(Time::Stamp_Reached("STATUS")) {
			declare Success = Service_Status::AsyncCheckStatus("STATUS", LocalUser);
		}
	}

	if(Service_Status::AsyncIsCompleted("STATUS")) {
		if(Service_Status::AsyncIsSuccessful("STATUS")) {
			declare Status = Service_Status::GetAsyncCheckStatusResult("STATUS", LocalUser);
			
			declare ContainsThisMap = False;
			foreach(Playsession, Status.Titles[LoadedTitle.TitleId].Playsessions) {
				if(Playsession.Map.Uid == Map.MapInfo.MapUid) {
					ContainsThisMap = True;
					Layers::SendEvent("Playsession", "Count", Playsession.Users.count^"");
					Layers::SendEvent("Playsession", "Users", Playsession.Users.tojson());

					declare Text PlaysessionSecret for This;
					
					declare netread Boolean Server_IsValidationMode for UI;
					if(!Server_IsValidationMode)
						declare Success = Ingame_Playsession::AsyncPlaysession(PlaysessionSecret, "Playing");
				}
			}

			if(!ContainsThisMap) {
				declare Service_Status::SPublicMap DeletedMap;
				Ingame_Playsession::UpdatePublicMap(DeletedMap);

				declare netread Vehicle::SVehicle[] Server_Vehicles for UI;
				declare Text[] VehicleNames;
				foreach(Vehicle, Server_Vehicles) VehicleNames.add(Vehicle.Name);

				declare Text CHALLENGE_TOKEN for LocalUser;
				declare SuccessMap = Http::AsyncPOST("MAP", """{{{Service_Status::LastStatus(LocalUser).Global.Service}}}/map.php?uid={{{Map.MapInfo.MapUid}}}&vehicle={{{TextLib::Join(",",VehicleNames)}}}""", CHALLENGE_TOKEN);
			}
		}
		Service_Status::AsyncDestroy("STATUS");
	}
}

Void Init() {
	Dictionary::SetTranslationFolder("Media/Translations");
	Dictionary::SetTranslationLanguage(Settings::Get().Language);

	declare netread Vehicle::SVehicle[] Server_Vehicles for UI;
	declare netread Vehicle::SVehicle Server_MapVehicle for UI;

	wait(Server_Vehicles.count > 0 && Server_MapVehicle.File != "");
}

***Init***
***
declare netwrite Integer Client_VehicleIndex for UI;

declare netread Vehicle::SVehicle[] Server_Vehicles for UI;
declare netread Vehicle::SVehicle Server_MapVehicle for UI;
declare netread Integer Server_CurrentVehicle for UI;
declare netread Integer Server_VehicleLock for UI;
declare netread Boolean Server_IsValidationMode for UI;

declare metadata ModifierBase::SChMap OriginalMap for Map;

Layers::Create("Loading", Manialink::FromFile("Media/Manialinks/Base/Ingame/Loading", True, ["Audio", "TextAnimation"], Settings::Get().Theme), True, True);

Init();
yield;
Ingame_Map::Init();
Layers::SendEvent("Loading", "Progress", 1/14.);
yield;
Ingame_Spotify::Init();
Layers::SendEvent("Loading", "Progress", 2/14.);
yield;
Ingame_Dashboard::Init();
Layers::SendEvent("Loading", "Progress", 3/14.);
yield;
Ingame_Menu::Init();
Layers::SendEvent("Loading", "Progress", 4/14.);
yield;
Ingame_Flash::Init();
Layers::SendEvent("Loading", "Progress", 5/14.);
yield;
Ingame_Outro::Init();
Layers::SendEvent("Loading", "Progress", 6/14.);
yield;
Ingame_Playsession::Init();
Layers::SendEvent("Loading", "Progress", 7/14.);
yield;
Ingame_Stunts::Init();
Layers::SendEvent("Loading", "Progress", 8/14.);
yield;
Ingame_Rating::Init();
Layers::SendEvent("Loading", "Progress", 9/14.);
yield;
Ingame_Vehicle::Init();
Layers::SendEvent("Loading", "Progress", 10/14.);
yield;
Ingame_Endscreen::Init();
Layers::SendEvent("Loading", "Progress", 11/14.);
yield;
Ingame_Ghosts::Init();
Layers::SendEvent("Loading", "Progress", 12/14.);
yield;
Ingame_Checkpoint::Init();
Layers::SendEvent("Loading", "Progress", 13/14.);
yield;
Ingame_Leaderboard::Init();
Layers::SendEvent("Loading", "Progress", 1.);

ReplayBrowser::Init();
yield;
Notification::Init();

Layers::Hide("Loading");
***

***Start***
***
declare Boolean Close for This = False;
declare Text PlaysessionSecret for This;
SkinNotified = False;

Ingame_Menu::Start();
Ingame_Playsession::Start();
Ingame_Map::Start();
Ingame_Rating::Start();
Ingame_Outro::Start();
Ingame_Vehicle::Start();

declare Boolean IsPauseMenu for Layers::Page("Menu");
declare Boolean IsBlurred for Layers::Page("Menu");

Ingame_Menu::CheckMode();

Notification::Start(<157.5,40.>);

declare netread Boolean Server_EndRace for UI;
declare RaceEnded = Server_EndRace;

declare netread Boolean Server_Outro for UI;

declare netread Stunt::SStunt Server_Stunt for UI;
declare LastStunt = Server_Stunt;

declare Integer VehicleIndex for Layers::Page("Vehicle");
declare Integer OldVehicleIndex for This;
OldVehicleIndex = VehicleIndex;

declare OldVehicle = -1;
***

***Loop***
***
foreach(Event, PendingEvents) {
	switch(Event.Type) {
		case CManiaAppPlaygroundEvent::EType::LayerCustomEvent: {
			switch(Event.CustomEventType) {
				case "Start": {
					declare netread Boolean Server_IsValidationMode for UI;

					declare Force = (Event.CustomEventData[0] == "True");
					SendCustomEvent("Start", [Force^""]);
					
					IsPauseMenu = True;
					IsBlurred = True;

					ShowIngame();
					if(Server_IsValidationMode) {
						Layers::Show("OpenMenu", True);
						Layers::Hide("Menu");
						Layers::Hide("Vehicle");
					}
					Layers::Show("Flash");

					Audio.PlaySoundEvent(CAudioManager::ELibSound::Start, 0, 1.);
				}
				case "Navigation": {
					declare Pass = Event.CustomEventData[0];
					Layers::SendEvent(Pass, "Navigation", "True");
				}
			}
			switch(Event.CustomEventLayer) {
				case Layers::Get("ReplayInfo"): {
					switch(Event.CustomEventType) {
						case "Back": {
							Layers::Hide("Replays", True);
							Layers::Hide("ReplayInfo", True);
							Layers::Show("Outro", True);
							Ingame_Rating::ShowInOutro();
						}
						case "Save": {
							declare FilePath = Event.CustomEventData[0];
							SendCustomEvent("Replay", [FilePath]);
							Layers::Hide("Replays", True);
							Layers::Hide("ReplayInfo", True);
							Layers::Show("Outro", True);
							Ingame_Rating::ShowInOutro();
						}
					}
				}
			}
		}
	}

	ReplayBrowser::Event(Event);
	Notification::Event(Event);

	Ingame_Flash::Event(Event);
	Ingame_Vehicle::Event(Event);
	Ingame_Rating::Event(Event);
	Ingame_Map::Event(Event);
	Ingame_Spotify::Event(Event);
	Ingame_Dashboard::Event(Event);
	Ingame_Endscreen::Event(Event);
	Ingame_Menu::Event(Event);
	Ingame_Outro::Event(Event);
	Ingame_Playsession::Event(Event);
}

declare Text[] Exchange for This;

for(I,0,Exchange.count-1) {
	if(Exchange.existskey(I)) {
		switch(Exchange[I]) {
			case "Rating_Show": {
				Ingame_Rating::Show();
			}
			case "Rating_ShowInOutro": {
				Ingame_Rating::ShowInOutro();
			}
			case "Rating_ApplyRating": {
				Ingame_Rating::ApplyRating();
			}
			case "ShowIngame": {
				ShowIngame();
			}
			case "HideIngame": {
				HideIngame();
			}
		}
		declare Removed = Exchange.removekey(I);
	}
}

if(VehicleIndex != OldVehicleIndex) { // If vehicle was changed
	Client_VehicleIndex = VehicleIndex;
	SendCustomEvent("VehicleIndexChanged", [VehicleIndex^""]);
	OldVehicleIndex = VehicleIndex;

	if(Server_VehicleLock == -1) IsBlurred = False;
}

if(Server_CurrentVehicle != OldVehicle) { // If server vehicle was changed
	if(Server_CurrentVehicle >= 0) { // If vehicle is selected
		Layers::SendEvent("Menu", "Car", Server_Vehicles[Server_CurrentVehicle].Name);
		Layers::SendEvent("Map", "Car", Server_Vehicles[Server_CurrentVehicle].Name);
		Map.MapName = """({{{OriginalMap.CollectionName}}}) {{{OriginalMap.Name}}}.{{{TextLib::Replace(Map.MapStyle, "+", "")}}} [{{{Server_Vehicles[Server_CurrentVehicle].Name}}}]""";
	}
	else { // If vehicle is not selected
		Map.MapName = """({{{OriginalMap.CollectionName}}}) {{{OriginalMap.Name}}}.{{{TextLib::Replace(Map.MapStyle, "+", "")}}}""";
		Layers::SendEvent("Menu", "Car", "");
		Layers::SendEvent("Map", "Car", "");
	}

	OldVehicle = Server_CurrentVehicle;
}

if(Server_Stunt.Timestamp != LastStunt.Timestamp) { // If new stunt happened
	declare Stunt::SStunt Stunt;
	Stunt = Server_Stunt;
	Stunt.Figure = Dictionary::Get(Stunt.Figure);
	Layers::SendEvent("Stunts", "Stunt", Stunt.tojson());
	LastStunt = Server_Stunt;
}

if(!Server_IsValidationMode) { // In validation mode, Menu and Vehicle layers are not part of the "regular" menu
	if(Server_EndRace) {
		Layers::Hide("Menu");
		Layers::Hide("Vehicle");
	}
	else {
		Layers::Show("Menu");
		Layers::Show("Vehicle");
	}
}

if(Close) {
	if(!Server_IsValidationMode) {
		declare Success = Ingame_Playsession::AsyncPlaysession(PlaysessionSecret, "Close");
		wait(Service_Status::AsyncIsCompleted("PLAYSESSION"));
	}
	Playground.QuitServer(True);
	Layers::SendEvent("Menu", "Exit", Server_IsValidationMode^"");
	Close = False;
}

CheckStatus();

Ingame_Endscreen::Loop();
Ingame_Outro::Loop();
Ingame_Vehicle::Loop();

Ingame_Menu::Async();
Ingame_Rating::Async();
Ingame_Playsession::Async();
Ingame_Endscreen::Async();
Ingame_Outro::Async();

ReplayBrowser::Async();
***

Void Main() {
	+++Init+++
	+++Start+++

	while(True) {
		+++Loop+++
		yield;
	}
}

main() {
	Main();
}