#RequireContext CManiaAppPlayground

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib

#Include "Libs/BigBang1112/Layers.Script.txt" as Layers
#Include "Libs/BigBang1112/Manialink.Script.txt" as Manialink
#Include "Libs/BigBang1112/Settings.Script.txt" as Settings
#Include "Libs/BigBang1112/Http.Script.txt" as Http
#Include "Libs/BigBang1112/Random.Script.txt" as Random
#Include "Libs/BigBang1112/Dictionary.Script.txt" as Dictionary
#Include "Libs/BigBang1112/Map.Script.txt" as Map

#Include "Libs/Challenge/Backend.Script.txt" as Backend
#Include "Libs/Challenge/ModifierBase.Script.txt" as ModifierBase

#Include "Libs/Challenge/Ingame/Gamemodes/Race.Script.txt" as Race

#Const C_Manialink_Menu "Media/Manialinks/Base/Ingame/Menu"
#Const C_Manialink_Vehicle "Media/Manialinks/Base/Ingame/Vehicle"
#Const C_Manialink_Dashboard "Media/Manialinks/Base/Ingame/Dashboard"
#Const C_Manialink_Stunts "Media/Manialinks/Base/Ingame/Stunts"
#Const C_Manialink_Playsession "Media/Manialinks/Base/Ingame/Playsession"
#Const C_Manialink_Spotify "Media/Manialinks/Base/Ingame/Spotify"
#Const C_Manialink_Endscreen "Media/Manialinks/Base/Ingame/Endscreen"
#Const C_Manialink_Outro "Media/Manialinks/Base/Ingame/Outro"

#Const C_Manialink_OpenMenu "Media/Manialinks/Base/Ingame/OpenMenu"

#Const C_Manialink_Flash "Media/Manialinks/Base/Flash"

#Struct SPlaysession {
	Text Login;
	Text Token;
	Text MapUid;
	Text Car;
	Text Secret;
	Text Action;
	Text TitleId;
}

#Struct SAuthToken {
	Text Value; // Token value
	Integer Length;
	Boolean Successful; // If token was received successfully
	Boolean Verified; // If token was verified as valid
	Integer Time; // How long the request took
	Integer EndTime; // When request was finished
	Integer Expires;
	Text Response; // Short informational response
}

Dictionary::SetTranslationFolder("Media/Translations");
Dictionary::SetTranslationLanguage(Settings::Get().Language);

ClientUI.OverlayHideCheckPointList = True;
ClientUI.OverlayHideSpeedAndDist = True;
ClientUI.OverlayHidePersonnalBestAndRank = True;
ClientUI.OverlayHideChrono = True;
ClientUI.OverlayHidePosition = True;

declare netread Boolean Server_IsValidationMode for UI;

declare netread Text[] Server_Vehicles for UI;
declare netread Text Server_MapVehicle for UI;
declare netread Race::SEndRaceInfo Server_EndRaceInfo for UI;

wait(Server_Vehicles.count > 0 && Server_MapVehicle != "");

declare Music_Endscreen = Audio.CreateSound("file://Media/Musics/Endscreen.ogg", 1.0, True, False, False);

declare VehicleML = "";
for(I, 0, Server_Vehicles.count-1) {
	declare Vehicle = Server_Vehicles[I];
	VehicleML ^= """<frame pos="0 {{{-I*20+Server_Vehicles.keyof(Server_MapVehicle)*20}}}" data-id="{{{I}}}">
	<frame z-index="-1">
		<quad z-index="0" size="80 19" valign="center" halign="center" style="Bgs1" substyle="BgCardList" opacity="1"/>
		<quad z-index="1" size="80 19" valign="center" halign="center" style="Bgs1" substyle="BgGradV" opacity="1"/>
	</frame>
	<quad z-index="0" size="80 19" id="QUAD_VEHICLE" valign="center" halign="center" style="Bgs1" substyle="BgCardInventoryItem" scriptevents="1" modulatecolor="036" opacity=".5"/>
	<label pos="0 -0.5" z-index="1" size="70 10" text="{{{Vehicle}}}" halign="center" valign="center2" textsize="6" textfont="RajdhaniMono" opacity="1"/>
	<label pos="37.5 -8" z-index="1" size="75 5" text="{{{Dictionary::Get("ORIGINAL")}}}" halign="right" valign="bottom" textfont="Oswald" textsize="2" textcolor="FF0" id="LABEL_ORIGINAL" hidden="1"/>
</frame>""";
}

declare VehicleManialink = Manialink::FromFile(C_Manialink_Vehicle, True, [], Settings::Get().Theme);
VehicleManialink = TextLib::Replace(VehicleManialink, """<frame id="FRAME_INNER_VEHICLES"/>""",
"""<quad z-index="-1" pos="0 {{{-Server_Vehicles.count*20/2+Server_Vehicles.keyof(Server_MapVehicle)*20}}}" size="120 {{{(Server_Vehicles.count)*20+160}}}" halign="center" valign="center" style="Bgs1InRace" substyle="BgEmpty" scriptevents="1"/>
<frame id="FRAME_INNER_VEHICLES">{{{VehicleML}}}</frame>""");

Layers::Create("Menu", Manialink::FromFile(C_Manialink_Menu, True, ["SlideText"], Settings::Get().Theme));
Layers::Create("Vehicle", VehicleManialink);
Layers::Create("Dashboard", Manialink::FromFile(C_Manialink_Dashboard, True, ["TextAnimation"], Settings::Get().Theme));
Layers::Create("Stunts", Manialink::FromFile(C_Manialink_Stunts, True, ["TextAnimation"], Settings::Get().Theme));
Layers::Create("Playsession", Manialink::FromFile(C_Manialink_Playsession, True, ["TextAnimation"], Settings::Get().Theme));
Layers::Create("Spotify", Manialink::FromFile(C_Manialink_Spotify, True, [], Settings::Get().Theme));
Layers::Create("Endscreen", Manialink::FromFile(C_Manialink_Endscreen, True, ["SlideText"], Settings::Get().Theme));
Layers::Create("Outro", Manialink::FromFile(C_Manialink_Outro, True, [], Settings::Get().Theme));

Layers::Create("Flash", Manialink::FromFile(C_Manialink_Flash, True, [], Settings::Get().Theme));

if(Server_IsValidationMode) {
	Layers::Create("OpenMenu", Manialink::FromFile(C_Manialink_OpenMenu, True, [], Settings::Get().Theme));
}
else {
	Layers::SetType("Menu", CUILayer::EUILayerType::InGameMenu);
	Layers::SetType("Vehicle", CUILayer::EUILayerType::InGameMenu);
}

Layers::Show("Menu", True);
Layers::Show("Vehicle", True);

declare Integer VehicleIndex for Layers::Get("Vehicle").LocalPage;
declare Integer MapVehicleIndex for Layers::Get("Vehicle").LocalPage;
if(Server_Vehicles.exists(Server_MapVehicle)) MapVehicleIndex = Server_Vehicles.keyof(Server_MapVehicle);
else MapVehicleIndex = -1;
VehicleIndex = MapVehicleIndex;

declare Integer OldVehicleIndex = VehicleIndex;

declare Integer VehicleCount for Layers::Get("Vehicle").LocalPage;
VehicleCount = Server_Vehicles.count;

declare SAuthToken INGAME_TOKEN for LocalUser;

declare SPlaysession Playsession;
Playsession.Login = LocalUser.Login;
Playsession.Token = INGAME_TOKEN.Value;
Playsession.MapUid = Map.MapInfo.MapUid;
Playsession.Car = "StadiumCar";
Playsession.Secret = Random::String(32);
Playsession.Action = "Playing";
Playsession.TitleId = LoadedTitle.TitleId;

log(INGAME_TOKEN.Value);

declare Req = Http::SyncPOST("""{{{Backend::GetHost()}}}/ingame/playsession""", Playsession.tojson(), "Content-Type: application/json\nContent-Length: "^TextLib::Length(Playsession.tojson()));
//log(Req.Result);
Http.Destroy(Req);

declare netread Integer Server_VehicleLock for UI;
declare netread Integer Server_CurrentVehicle for UI;

declare metadata ModifierBase::SChMap OriginalMap for Map;
Layers::SendEvent("Menu", "MapName", OriginalMap.Name);
Layers::SendEvent("Menu", "Challenge", TextLib::ToUpperCase(TextLib::Replace(Map.MapStyle, "+", " + ")));

//sleep(3000);
//log(Http::SyncGET("""{{{Backend::GetHost()}}}/ingame/playsession?login={{{Playsession.Login}}}&token={{{Playsession.Token}}}&mapuid={{{Playsession.MapUid}}}&car=StadiumCar&secret={{{Playsession.Secret}}}&action=succmydic""").Result);

declare netwrite Integer Client_VehicleIndex for UI;
Client_VehicleIndex = VehicleIndex;

declare Integer VehicleLock for Layers::Get("Vehicle").LocalPage;

declare Boolean IsPauseMenu for Layers::Get("Menu").LocalPage;
declare Boolean IsBlurred for Layers::Get("Menu").LocalPage;

declare netread Boolean Server_EndRace for UI;
declare RaceEnded = Server_EndRace;

declare netread Boolean Server_Outro for UI;
declare IsOutro = Server_Outro;

while(True) {
	foreach(Event, PendingEvents) {
		switch(Event.Type) {
			case CManiaAppPlaygroundEvent::EType::LayerCustomEvent: {
				switch(Event.CustomEventLayer) {
					case Layers::Get("Menu"): {
						switch(Event.CustomEventType) {
							case "Start": {
								declare Force = (Event.CustomEventData[0] == "True");
								SendCustomEvent("Start", [Force^""]);
								
								IsPauseMenu = True;
								IsBlurred = True;

								Layers::Show("Dashboard", True);
								Layers::Show("Stunts", True);
								Layers::Show("Playsession", True);
								Layers::Show("Spotify", True);
								if(Server_IsValidationMode) {
									Layers::Show("OpenMenu", True);
									Layers::Hide("Menu");
									Layers::Hide("Vehicle");
								}
								Layers::Show("Flash");
							}
							case "Open": {
								if(!Server_EndRace && !Server_Outro) {
									Layers::Hide("Dashboard");
									Layers::Hide("Stunts");
									Layers::Hide("Playsession");
									Layers::Hide("Spotify");
									if(Server_IsValidationMode)
										Layers::Hide("OpenMenu");
									Layers::Hide("Flash");
								}
							}
							case "Close": {
								if(!Server_EndRace && !Server_Outro) {
									Layers::Show("Dashboard", True);
									Layers::Show("Stunts", True);
									Layers::Show("Playsession", True);
									Layers::Show("Spotify", True);
									if(Server_IsValidationMode)
										Layers::Show("OpenMenu", True);
									Layers::Show("Flash", True);
								}
							}
							case "Exit": {
								Playground.QuitServer(False);
							}
						}
					}
					case Layers::Get("OpenMenu"): {
						switch(Event.CustomEventType) {
							case "Menu": {
								SendCustomEvent("Menu", []);

								Layers::Show("Menu", True);
								Layers::Show("Vehicle", True);

								Layers::Hide("Dashboard");
								Layers::Hide("Stunts");
								Layers::Hide("Playsession");
								Layers::Hide("Spotify");

								Layers::Hide("OpenMenu");

								Layers::Hide("Flash");
							}
						}
					}
					case Layers::Get("Endscreen"): {
						switch(Event.CustomEventType) {
							case "Continue": {
								SendCustomEvent("Continue", []);
								Layers::Show("Outro");
							}
						}
					}
					case Layers::Get("Outro"): {
						switch(Event.CustomEventType) {
							case "Continue": {
								SendCustomEvent("Continue", []);
								Layers::Hide("Outro");
							}
							case "Exit": {
								Playground.QuitServer(True);
							}
						}
					}
				}
			}
		}
	}

	if(Server_CurrentVehicle > 0)
		Map.MapName = """({{{OriginalMap.CollectionName}}}) {{{OriginalMap.Name}}}.{{{TextLib::Replace(Map.MapStyle, "+", "")}}} [{{{Server_Vehicles[Server_CurrentVehicle]}}}]""";
	else
		Map.MapName = """({{{OriginalMap.CollectionName}}}) {{{OriginalMap.Name}}}.{{{TextLib::Replace(Map.MapStyle, "+", "")}}}""";

	if(VehicleIndex != OldVehicleIndex) {
		Client_VehicleIndex = VehicleIndex;
		SendCustomEvent("VehicleIndexChanged", [VehicleIndex^""]);
		OldVehicleIndex = VehicleIndex;

		if(Server_VehicleLock == -1) IsBlurred = False;
	}

	if(Server_EndRace != RaceEnded) {
		if(Server_EndRace) {
			Layers::Hide("Dashboard");
			Layers::Hide("Stunts");
			Layers::Hide("Playsession");
			Layers::Hide("Spotify");

			if(Server_IsValidationMode)
				Layers::Hide("OpenMenu");

			Music_Endscreen.Play();

			declare Integer Time for Layers::Get("Endscreen").LocalPage;
			Time = Server_EndRaceInfo.Time;

			declare Text Map_Name for Layers::Get("Endscreen").LocalPage;
			Map_Name = OriginalMap.Name;

			declare Text Map_Env for Layers::Get("Endscreen").LocalPage;
			Map_Env = OriginalMap.CollectionName;

			declare Text Car for Layers::Get("Endscreen").LocalPage;
			Car = Server_Vehicles[Server_CurrentVehicle];

			declare Text[] Challenges for Layers::Get("Endscreen").LocalPage;
			Challenges = TextLib::Split("+", Map.MapStyle);

			Layers::SendEvent("Endscreen", "Update");
			Layers::Show("Endscreen", True);
		}
		else {
			Layers::Hide("Endscreen");
			Layers::Hide("Flash");
			Music_Endscreen.Stop();
		}
		RaceEnded = Server_EndRace;
	}

	if(Server_Outro != IsOutro) {
		if(!Server_Outro) {
			Layers::Show("Dashboard", True);
			Layers::Show("Stunts", True);
			Layers::Show("Playsession", True);
			Layers::Show("Spotify", True);
			if(Server_IsValidationMode)
				Layers::Show("OpenMenu", True);
			Layers::Show("Flash");
			Layers::Hide("Endscreen");
			Layers::Hide("Outro");
		}
		IsOutro = Server_Outro;
	}

	VehicleLock = Server_VehicleLock;

	yield;
}