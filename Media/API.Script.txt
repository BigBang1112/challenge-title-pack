#RequireContext CMapEditorPluginLayer

#Include "MathLib" as MathLib

#Struct SResponse {
    Text Name;
    Text[] Values;
}

#Struct SChBlockModel {
    
}

#Struct SChBlock {
    Integer BlockScriptId;
    Text Name;
    Int3 Coord;
    Text Direction;
    Boolean IsRoad; 
    Boolean IsTerrain;
    Boolean IsPodium;
    Text WaypointType;  
    Boolean NoRespawn;
}

#Struct SChMacroblock {
    Boolean IsGround;
    Boolean HasStart;
    Boolean HasFinish;
    Boolean HasCheckpoint;
    Boolean HasMultilap;
    Text Name;
}

declare Text Script_Name;
declare Text Script_AuthorLogin;
declare Text Script_Description;

//
/* Conversion functions */
//

Text MapDirectionToText(CMapEditorPlugin::CardinalDirections _Direction) {
    switch(_Direction) {
        case CMapEditorPlugin::CardinalDirections::North: {
            return "North";
        }
        case CMapEditorPlugin::CardinalDirections::South: {
            return "South";
        }
        case CMapEditorPlugin::CardinalDirections::West: {
            return "West";
        }
        case CMapEditorPlugin::CardinalDirections::East: {
            return "East";
        }
    }
    
    return "";
}

Text BlockDirectionToText(CBlock::CardinalDirections _Direction) {
    switch(_Direction) {
        case CBlock::CardinalDirections::North: {
            return "North";
        }
        case CBlock::CardinalDirections::South: {
            return "South";
        }
        case CBlock::CardinalDirections::West: {
            return "West";
        }
        case CBlock::CardinalDirections::East: {
            return "East";
        }
    }
    
    return "";
}

CMapEditorPlugin::CardinalDirections TextToMapDirection(Text _Text) {
    switch(_Text) {
        case "North": {
            return CMapEditorPlugin::CardinalDirections::North;
        }
        case "South": {
            return CMapEditorPlugin::CardinalDirections::South;
        }
        case "West": {
            return CMapEditorPlugin::CardinalDirections::West;
        }
        case "East": {
            return CMapEditorPlugin::CardinalDirections::East;
        }
    }
    
    return CMapEditorPlugin::CardinalDirections::North;
}

CBlock::CardinalDirections TextToBlockDirection(Text _Text) {
    switch(_Text) {
        case "North": {
            return CBlock::CardinalDirections::North;
        }
        case "South": {
            return CBlock::CardinalDirections::South;
        }
        case "West": {
            return CBlock::CardinalDirections::West;
        }
        case "East": {
            return CBlock::CardinalDirections::East;
        }
    }
    
    return CBlock::CardinalDirections::North;
}

CBlock::CardinalDirections MapDirectionToBlockDirection(CMapEditorPlugin::CardinalDirections _Direction) {
    return TextToBlockDirection(_Direction);
}

CMapEditorPlugin::CardinalDirections BlockDirectionToMapDirection(CBlock::CardinalDirections _Direction) {
    return TextToMapDirection(BlockDirectionToText(_Direction));
}

SBlockModelInfo ToSBlockModelInfo(CBlockModel _BlockModel) {
    declare SBlockModelInfo Info;
    Info.Name = _BlockModel.Name;  
    Info.IsRoad = _BlockModel.IsRoad; 
    Info.IsTerrain = _BlockModel.IsTerrain; 
    
    switch(_BlockModel.WaypointType) {
        case CBlockModel::EWayPointType::Start: { Info.WaypointType = "Start"; }
        case CBlockModel::EWayPointType::Finish: { Info.WaypointType = "Finish"; }
        case CBlockModel::EWayPointType::Checkpoint: { Info.WaypointType = "Checkpoint"; }
        case CBlockModel::EWayPointType::None: { Info.WaypointType = "None"; }
        case CBlockModel::EWayPointType::StartFinish: { Info.WaypointType = "StartFinish"; }
        case CBlockModel::EWayPointType::Dispenser: { Info.WaypointType = "Dispenser"; }
    }
    
    Info.NoRespawn = _BlockModel.NoRespawn;
    return Info;
}

SBlockInfo ToSBlockInfo(CBlock _Block) {
    declare SBlockInfo Info;
    Info.BlockScriptId = _Block.BlockScriptId;
    Info.Coord = _Block.Coord;
    Info.Direction = BlockDirectionToText(_Block.Direction);
    Info.BlockModel = ToSBlockModelInfo(_Block.BlockModel);
    return Info;
}

SMacroblockModelInfo ToSMacroblockModelInfo(CMacroblockModel _MacroblockModel) {
    declare SMacroblockModelInfo Info;
    Info.IsGround = _MacroblockModel.IsGround;
    Info.HasStart = _MacroblockModel.HasStart;
    Info.HasFinish = _MacroblockModel.HasFinish;
    Info.HasCheckpoint = _MacroblockModel.HasCheckpoint;
    Info.HasMultilap = _MacroblockModel.HasMultilap;
    Info.GeneratedBlockModel = ToSBlockModelInfo(_MacroblockModel.GeneratedBlockModel);
    Info.Name = _MacroblockModel.Name;
    return Info;
}

SResponse Request(Text _Command, Text[] _Arguments) {
    declare SResponse Response;

    SendCustomEvent(_Command, _Arguments);

    declare Resp = False;
    while(!Resp) {
        foreach(Event,PendingEvents) {
            if(Event.Type == CMlScriptEvent::Type::PluginCustomEvent) {
                if(Event.CustomEventType == _Command^"_Response") {
                    Response.Name = Event.CustomEventType;
                    foreach(Data, Event.CustomEventData)
                        Response.Values.add(Data);
                    Resp = True;
                }
            }
        }
        yield;
    }

    return Response;
}

//
/* Regular editor functions */
//

Void ComputeShadows() {
    declare Response = Request("Ch_ComputeShadows",[]);
}

Void RemoveAllBlocks() {
    declare Response = Request("Ch_RemoveAllBlocks", []);
}
 
Void RemoveAllTerrain() {
    declare Response = Request("Ch_RemoveAllTerrain", []);
}
 
Void RemoveAllOffZone() {
    declare Response = Request("Ch_RemoveAllOffZone", []);
}
 
Void RemoveAllObjects() {
    declare Response = Request("Ch_RemoveAllObjects", []);
}
 
Void RemoveAll() {
    declare Response = Request("Ch_RemoveAll", []);
}
 
Void RemoveAllBlocksAndTerrain() {
    declare Response = Request("Ch_RemoveAllBlocksAndTerrain", []);
}
 
Void PreloadAllBlocks() {
    declare Response = Request("Ch_PreloadAllBlocks", []);
}
 
Void PreloadAllItems() {
    declare Response = Request("Ch_PreloadAllItems", []);
}
 
Boolean CanPlaceBlock(Text _BlockName, Int3 _Coord, Text _Direction, Boolean _OnGround, Integer _VariantIndex) {    
    declare Params = [_BlockName, _Coord^"", _Direction, _OnGround^"", _VariantIndex^""];
    declare Response = Request("Ch_CanPlaceBlock", Params);
    return Response.Values[0] == "True";
}
 
Boolean PlaceBlock(Text _BlockName, Int3 _Coord, Text _Direction) {
    declare Params = [_BlockName, _Coord^"", _Direction];
    declare Response = Request("Ch_PlaceBlock", Params);
    return Response.Values[0] == "True";
}
 
Boolean CanPlaceBlock_NoDestruction(Text _BlockName, Int3 _Coord, Text _Direction, Boolean _OnGround, Integer _VariantIndex) {
    declare Params = [_BlockName, _Coord^"", _Direction, _OnGround^"", _VariantIndex^""];
    declare Response = Request("Ch_CanPlaceBlock_NoDestruction", Params);
    return Response.Values[0] == "True";
}
 
Boolean PlaceBlock_NoDestruction(Text _BlockName, Int3 _Coord, Text _Direction) {
    declare Params = [_BlockName, _Coord^"", _Direction];
    declare Response = Request("Ch_PlaceBlock_NoDestruction", Params);
    return Response.Values[0] == "True";
}
 
Boolean CanPlaceRoadBlocks(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
    declare Params = [_BlockName, _StartCoord^""];
    declare Response = Request("Ch_CanPlaceRoadBlocks", Params);
    return Response.Values[0] == "True";
}
 
Boolean PlaceRoadBlocks(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
    declare Params = [_BlockName, _StartCoord^"", _EndCoord^""];
    declare Response = Request("Ch_PlaceRoadBlocks", Params);
    return Response.Values[0] == "True";
}
 
Boolean CanPlaceTerrainBlocks(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
    declare Params = [_BlockName, _StartCoord^"", _EndCoord^""];
    declare Response = Request("Ch_CanPlaceTerrainBlocks", Params);
    return Response.Values[0] == "True";
}
 
Boolean PlaceTerrainBlocks(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
    declare Params = [_BlockName, _StartCoord^"", _EndCoord^""];
    declare Response = Request("Ch_PlaceTerrainBlocks", Params);
    return Response.Values[0] == "True";
}          
 
Boolean PlaceTerrainBlocks_NoDestruction(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
    declare Params = [_BlockName, _StartCoord^"", _EndCoord^""];
    declare Response = Request("Ch_PlaceTerrainBlocks_NoDestruction", Params);
    return Response.Values[0] == "True";
}

Boolean CanPlaceMacroblock(Text _MacroblockName, Int3 _Coord, Text _Direction) {
    declare Params = [_MacroblockName, _Coord^"", _Direction];
    declare Response = Request("Ch_CanPlaceMacroblock", Params);
    return Response.Values[0] == "True";
}
 
Boolean PlaceMacroblock(Text _MacroblockName, Int3 _Coord, Text _Direction) {
    declare Params = [_MacroblockName, _Coord^"", _Direction];
    declare Response = Request("Ch_PlaceMacroblock", Params);
    return Response.Values[0] == "True";
}
 
Boolean CanPlaceMacroblock_NoDestruction(Text _MacroblockName, Int3 _Coord, Text _Direction) {
    declare Params = [_MacroblockName, _Coord^"", _Direction];
    declare Response = Request("Ch_CanPlaceMacroblock_NoDestruction", Params);
    return Response.Values[0] == "True";
}
 
Boolean PlaceMacroblock_NoDestruction(Text _MacroblockName, Int3 _Coord, Text _Direction) {
    declare Params = [_MacroblockName, _Coord^"", _Direction];
    declare Response = Request("Ch_PlaceMacroblock_NoDestruction", Params);
    return Response.Values[0] == "True";
}
 
Boolean CanPlaceMacroblock_NoTerrain(Text _MacroblockName, Int3 _Coord, Text _Direction) {
    declare Params = [_MacroblockName, _Coord^"", _Direction];
    declare Response = Request("Ch_CanPlaceMacroblock_NoTerrain", Params);
    return Response.Values[0] == "True";
}
 
Boolean PlaceMacroblock_NoTerrain(Text _MacroblockName, Int3 _Coord, Text _Direction) {
    declare Params = [_MacroblockName, _Coord^"", _Direction];
    declare Response = Request("Ch_PlaceMacroblock_NoTerrain", Params);
    return Response.Values[0] == "True";
}
 
Boolean RemoveMacroblock(Text _MacroblockName, Int3 _Coord, Text _Direction) {
    declare Params = [_MacroblockName, _Coord^"", _Direction];
    declare Response = Request("Ch_RemoveMacroblock", Params);
    return Response.Values[0] == "True";
}
 
Boolean RemoveMacroblock_NoTerrain(Text _MacroblockName, Int3 _Coord, Text _Direction) {
    declare Params = [_MacroblockName, _Coord^"", _Direction];
    declare Response = Request("Ch_RemoveMacroblock_NoTerrain", Params);
    return Response.Values[0] == "True";
}  
 
SChBlock GetBlock(Int3 _Coord) {
    declare Params = [_Coord^""];
    declare Response = Request("Ch_GetBlock", Params);
    declare SChBlock Block;
    declare JsonSuccess = Block.fromjson(Response.Values[0]);
    return Block;
}
 
Boolean RemoveBlock(Int3 _Coord) {
    declare Params = [_Coord^""];
    declare Response = Request("Ch_RemoveBlock", Params);
    return Response.Values[0] == "True";
}
 
Boolean RemoveTerrainBlocks(Int3 _StartCoord, Int3 _EndCoord) {
    declare Params = [_StartCoord^"", _EndCoord^""];
    declare Response = Request("Ch_RemoveTerrainBlocks", Params);
    return Response.Values[0] == "True";
}
 
Integer GetBlockGroundHeight(Text _BlockName, Integer _CoordX, Integer _CoordZ, Text _Direction) {
    declare Params = [_BlockName, _CoordX^"", _CoordZ^"", _Direction];
    declare Response = Request("Ch_GetBlockGroundHeight", Params);
    return TextLib::ToInteger(Response.Values[0]);
}
 
Integer GetGroundHeight(Integer CoordX, Integer CoordZ) {
    declare Params = [_CoordX^"", _CoordZ^""];
    declare Response = Request("Ch_GetGroundHeight", Params);
    return TextLib::ToInteger(Response.Values[0]);
}
 
SChBlock GetStartLineBlock() {
    declare Response = Request("Ch_GetStartLineBlock", Params);
    declare SChBlock Block;
    declare JsonSuccess = Block.fromjson(Response.Values[0]);
    return Block;
}

Void SetUndergroundMode(Boolean _On) {
    declare Params = [_On^""];
    declare Response = Request("Ch_SetUndergroundMode", Params);
}

//
/* Extensive functions */
//

Boolean ReplaceBlock(SChBlock _Block, Text _ReplacementBlockName, Boolean _OppositeDirection) {
    //declare Direction = _Block.Direction;
    //declare Coord = _Block.Coord;
    
    declare Params = [_Block.tojson(),_Replacement,_OppositeDirection^""];
    declare Response = Request("Ch_ReplaceBlock", Params);
    
    //Editor.RemoveBlock(Coord);
    //declare Response = Editor.PlaceBlock(_Replacement, Coord, BlockDirectionToMapDirection(Direction));
    return Response.Values[0] == "True";
}   

Boolean ReplaceBlock(SChBlock _Block, Text _ReplacementBlockName) {
    return ReplaceBlock(_Block, _Replacement, False);
}

Boolean ReplaceAllBlocks(Text _BlockName, Text _ReplacementBlockName) {
    declare Params = [_BlockName, _ReplacementBlockName];
    declare Response = Request("Ch_ReplaceAllBlocks", Params);
    return Response.Values[0] == "True";
}

Boolean SwapBlocks(SChBlock _Block1, SChBlock _Block2) {
    declare Params = [_Block1.tojson(), _Block1.tojson()];
    declare Response = Request("Ch_SwapBlocks", Params);
    return Response.Values[0] == "True";
}

SChBlock[] GetFinishLineBlocks() {
    declare Response = Request("Ch_GetFinishLineBlocks", []);
    declare SChBlock[] Blocks;
    declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
    return Blocks;
}

SChBlock[] GetCheckpointBlocks() {
    declare Response = Request("Ch_GetCheckpointBlocks", []);
    declare SChBlock[] Blocks;
    declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
    return Blocks;   
}

SChBlock[] GetBlocksByBlockModel(Text _BlockName) {
    declare Params = [_BlockName];
    declare Response = Request("Ch_GetCheckpointBlocks", Params);
    declare SChBlock[] Blocks;
    declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
    return Blocks;  
}

Integer Random(Integer _Min, Integer _Max) { // Consistent randomizer
    return MathLib::Rand(_Min, _Max, Editor.Map.CopperPrice);
}

Integer Random(Integer _Max) {
    return Random(0, _Max);
}

Real Random(Real _Min, Real _Max) { // Consistent randomizer
    return MathLib::Rand(_Min, _Max, Editor.Map.CopperPrice);
}

Real Random(Real _Max) {
    return Random(0.0, _Max);
}

Boolean Random() {
    return (Random(1) == 1);
}

Real Percentage() {
    return Random(1.0);
}

Boolean Chance(Real _Percentage) {
    return (Percentage() <= _Percentage);
}

//
/* Modifier technical control */
//

Void Solution() {

}

Void Complete() { // Shouldn't be normally called

}

Void Confusion() {

}

//
/* Modifier appearance control */
//

Void SetStatusProgress(Real _Progress) {
    SendCustomEvent("Ch_SetStatusProgress", [_Progress^""]);
}

Void SetStatusMessage(Text _Message) {
    SendCustomEvent("Ch_SetStatusMessage", [_Message]);
}

//
/* Call structure */
//

main() {
    +++Main+++
    Complete();
}