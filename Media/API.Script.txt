declare SChMetadata Script;
declare SChProblem[] Problems;
declare Text[][][Text] Relation_StartFinish;
declare Text[][][Text] Relation_StartMultilap;
declare Text[][][Text] Relation_FinishCheckpoint;
declare Text[][][Text] Relation_CheckpointRoad;
declare Text[][][Text] Relation_MultilapStartTwoway;

SResponse Request(Text _Command, Text[] _Arguments) {
	declare SResponse Response;

	Response.Time = Now;

	SendCustomEvent(_Command, _Arguments);

	declare Resp = False;
	while(!Resp) {
		foreach(Event,PendingEvents) {
			if(Event.Type == CMlScriptEvent::Type::PluginCustomEvent) {
				if(Event.CustomEventType == _Command^"_Response") {
					Response.Name = Event.CustomEventType;
					foreach(Data, Event.CustomEventData)
						Response.Values.add(Data);
					Resp = True;
				}
			}
		}
		yield;
	}

	Response.Time = Now - Response.Time;

	return Response;
}

//
/* Regular editor functions */
//

Void ComputeShadows() {
	declare Response = Request("Ch_ComputeShadows",[]);
}

Void RemoveAllBlocks() {
	declare Response = Request("Ch_RemoveAllBlocks", []);
}
 
Void RemoveAllTerrain() {
	declare Response = Request("Ch_RemoveAllTerrain", []);
}
 
Void RemoveAllOffZone() {
	declare Response = Request("Ch_RemoveAllOffZone", []);
}
 
Void RemoveAllObjects() {
	declare Response = Request("Ch_RemoveAllObjects", []);
}
 
Void RemoveAll() {
	declare Response = Request("Ch_RemoveAll", []);
}
 
Void RemoveAllBlocksAndTerrain() {
	declare Response = Request("Ch_RemoveAllBlocksAndTerrain", []);
}
 
Void PreloadAllBlocks() {
	declare Response = Request("Ch_PreloadAllBlocks", []);
}
 
Void PreloadAllItems() {
	declare Response = Request("Ch_PreloadAllItems", []);
}
 
Boolean CanPlaceBlock(Text _BlockName, Int3 _Coord, Text _Direction, Boolean _OnGround, Integer _VariantIndex) {    
	declare Params = [_BlockName, _Coord^"", _Direction, _OnGround^"", _VariantIndex^""];
	declare Response = Request("Ch_CanPlaceBlock", Params);
	return Response.Values[0] == "True";
}
 
Boolean CanPlaceBlock_NoDestruction(Text _BlockName, Int3 _Coord, Text _Direction, Boolean _OnGround, Integer _VariantIndex) {
	declare Params = [_BlockName, _Coord^"", _Direction, _OnGround^"", _VariantIndex^""];
	declare Response = Request("Ch_CanPlaceBlock_NoDestruction", Params);
	return Response.Values[0] == "True";
}
 
Boolean PlaceBlock(Text _BlockName, Int3 _Coord, Text _Direction) {
	declare Params = [_BlockName, _Coord^"", _Direction];
	declare Response = Request("Ch_PlaceBlock", Params);
	return Response.Values[0] == "True";
}
 
Boolean PlaceBlock_NoDestruction(Text _BlockName, Int3 _Coord, Text _Direction) {
	declare Params = [_BlockName, _Coord^"", _Direction];
	declare Response = Request("Ch_PlaceBlock_NoDestruction", Params);
	return Response.Values[0] == "True";
}
 
Boolean CanPlaceRoadBlocks(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
	declare Params = [_BlockName, _StartCoord^"", _EndCoord^""];
	declare Response = Request("Ch_CanPlaceRoadBlocks", Params);
	return Response.Values[0] == "True";
}
 
Boolean PlaceRoadBlocks(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
	declare Params = [_BlockName, _StartCoord^"", _EndCoord^""];
	declare Response = Request("Ch_PlaceRoadBlocks", Params);
	return Response.Values[0] == "True";
}
 
Boolean CanPlaceTerrainBlocks(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
	declare Params = [_BlockName, _StartCoord^"", _EndCoord^""];
	declare Response = Request("Ch_CanPlaceTerrainBlocks", Params);
	return Response.Values[0] == "True";
}
 
Boolean PlaceTerrainBlocks(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
	declare Params = [_BlockName, _StartCoord^"", _EndCoord^""];
	declare Response = Request("Ch_PlaceTerrainBlocks", Params);
	return Response.Values[0] == "True";
}          
 
Boolean PlaceTerrainBlocks_NoDestruction(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
	declare Params = [_BlockName, _StartCoord^"", _EndCoord^""];
	declare Response = Request("Ch_PlaceTerrainBlocks_NoDestruction", Params);
	return Response.Values[0] == "True";
}

Boolean CanPlaceMacroblock(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_CanPlaceMacroblock", Params);
	return Response.Values[0] == "True";
}
 
Boolean PlaceMacroblock(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_PlaceMacroblock", Params);
	return Response.Values[0] == "True";
}
 
Boolean CanPlaceMacroblock_NoDestruction(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_CanPlaceMacroblock_NoDestruction", Params);
	return Response.Values[0] == "True";
}
 
Boolean PlaceMacroblock_NoDestruction(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_PlaceMacroblock_NoDestruction", Params);
	return Response.Values[0] == "True";
}
 
Boolean CanPlaceMacroblock_NoTerrain(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_CanPlaceMacroblock_NoTerrain", Params);
	return Response.Values[0] == "True";
}
 
Boolean PlaceMacroblock_NoTerrain(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_PlaceMacroblock_NoTerrain", Params);
	return Response.Values[0] == "True";
}
 
Boolean RemoveMacroblock(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_RemoveMacroblock", Params);
	return Response.Values[0] == "True";
}
 
Boolean RemoveMacroblock_NoTerrain(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_RemoveMacroblock_NoTerrain", Params);
	return Response.Values[0] == "True";
}  
 
SChBlock GetBlock(Int3 _Coord) {
	declare Params = [_Coord^""];
	declare Response = Request("Ch_GetBlock", Params);
	declare SChBlock Block;
	declare JsonSuccess = Block.fromjson(Response.Values[0]);
	return Block;
}
 
Boolean RemoveBlock(Int3 _Coord) {
	declare Params = [_Coord^""];
	declare Response = Request("Ch_RemoveBlock", Params);
	return Response.Values[0] == "True";
}
 
Boolean RemoveTerrainBlocks(Int3 _StartCoord, Int3 _EndCoord) {
	declare Params = [_StartCoord^"", _EndCoord^""];
	declare Response = Request("Ch_RemoveTerrainBlocks", Params);
	return Response.Values[0] == "True";
}
 
Integer GetBlockGroundHeight(Text _BlockName, Integer _CoordX, Integer _CoordZ, Text _Direction) {
	declare Params = [_BlockName, _CoordX^"", _CoordZ^"", _Direction];
	declare Response = Request("Ch_GetBlockGroundHeight", Params);
	return TextLib::ToInteger(Response.Values[0]);
}
 
Integer GetGroundHeight(Integer _CoordX, Integer _CoordZ) {
	declare Params = [_CoordX^"", _CoordZ^""];
	declare Response = Request("Ch_GetGroundHeight", Params);
	return TextLib::ToInteger(Response.Values[0]);
}
 
SChBlock GetStartLineBlock() {
	declare Response = Request("Ch_GetStartLineBlock", []);
	declare SChBlock Block;
	declare JsonSuccess = Block.fromjson(Response.Values[0]);
	return Block;
}

// Due tend to crash the game on some (possibly heavy) maps
SChBlock[] GetBlocks() {
	declare Response = Request("Ch_GetBlocks", []);
	declare SChBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;
}

SChAnchor[] GetAnchorData() {
	declare Response = Request("Ch_GetAnchorData", []);
	declare SChAnchor[] Anchor;
	declare JsonSuccess = Anchor.fromjson(Response.Values[0]);
	return Anchor;
}

// under RemoveItem in Maniascript API
Boolean RemoveAnchor(SChAnchor _Anchor) {
	declare Params = [_Anchor.tojson()];
	declare Response = Request("Ch_RemoveAnchor", Params);
	return Response.Values[0] == "True";
}

//
/* Extensive functions */
//

SChMap GetMapInfo() {
	declare Response = Request("Ch_GetMapInfo", []);
	declare SChMap Map;
	declare JsonSuccess = Map.fromjson(Response.Values[0]);
	return Map;
}

SChMap GetOriginalMapInfo() {
	declare Response = Request("Ch_GetOriginalMapInfo", []);
	declare SChMap Map;
	declare JsonSuccess = Map.fromjson(Response.Values[0]);
	return Map;
}

Void Underground() {
	declare Response = Request("Ch_Underground", []);
}

Void Aboveground() {
	declare Response = Request("Ch_Aboveground", []);
}

Boolean PlaceGhostBlock(Text _BlockName, Int3 _Coord, Text _Direction) {
	declare Params = [_BlockName, _Coord^"", _Direction];
	declare Response = Request("Ch_PlaceGhostBlock", Params);
	return Response.Values[0] == "True";
}

SReplacementResult ReplaceBlock(SChBlock _Block, Text _ReplacementBlockName, Boolean _OppositeDirection) {
	declare Params = [_Block.tojson(),_ReplacementBlockName,_OppositeDirection^""];
	declare Response = Request("Ch_ReplaceBlock", Params);

	declare SReplacementResult Result;
	Result.Removed = (Response.Values[0] == "True");
	Result.Placed = (Response.Values[1] == "True");
	return Result;
}   

SReplacementResult ReplaceBlock(SChBlock _Block, Text _ReplacementBlockName) {
	return ReplaceBlock(_Block, _ReplacementBlockName, False);
}

Void ReplaceAllBlocks(Text _BlockName, Text _ReplacementBlockName) {
	declare Params = [_BlockName, _ReplacementBlockName];
	declare Response = Request("Ch_ReplaceAllBlocks", Params);
}

Boolean SwapBlock(SChBlock _Block1, SChBlock _Block2) {
	declare Params = [_Block1.tojson(), _Block1.tojson()];
	declare Response = Request("Ch_SwapBlock", Params);
	return Response.Values[0] == "True";
}

SChAnchor[] GetStartLines() {
	declare Response = Request("Ch_GetStartLines", []);
	declare SChAnchor[] Anchors;
	declare JsonSuccess = Anchors.fromjson(Response.Values[0]);
	return Anchors;
}

SChAnchor[] GetFinishLines() {
	declare Response = Request("Ch_GetFinishLines", []);
	declare SChAnchor[] Anchors;
	declare JsonSuccess = Anchors.fromjson(Response.Values[0]);
	return Anchors;
}

SChAnchor[] GetCheckpoints() {
	declare Response = Request("Ch_GetCheckpoints", []);
	declare SChAnchor[] Anchors;
	declare JsonSuccess = Anchors.fromjson(Response.Values[0]);
	return Anchors;   
}

SChAnchor[] GetMultilaps() {
	declare Response = Request("Ch_GetMultilaps", []);
	declare SChAnchor[] Anchors;
	declare JsonSuccess = Anchors.fromjson(Response.Values[0]);
	return Anchors;   
}

SChAnchorBlock[] GetStartLineBlocks() {
	declare Response = Request("Ch_GetStartLineBlocks", []);
	declare SChAnchorBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;
}

SChAnchorBlock[] GetFinishLineBlocks() {
	declare Response = Request("Ch_GetFinishLineBlocks", []);
	declare SChAnchorBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;
}

SChAnchorBlock[] GetCheckpointBlocks() {
	declare Response = Request("Ch_GetCheckpointBlocks", []);
	declare SChAnchorBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;   
}

SChAnchorBlock[] GetMultilapBlocks() {
	declare Response = Request("Ch_GetMultilapBlocks", []);
	declare SChAnchorBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;   
}

SChBlock[] GetBlocksByBlockName(Text _BlockName) {
	declare Params = [_BlockName];
	declare Response = Request("Ch_GetBlocksByBlockName", Params);
	declare SChBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;  
}

SChBlock[] MultipleBlocks(Int3 _Coord) {
	declare Params = [""^_Coord];
	declare Response = Request("Ch_MultipleBlocks", Params);
	declare SChBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;
}

SChAnchorItem[] GetStartLineItems() {
	declare Response = Request("Ch_GetStartLineItems", []);
	declare SChAnchorItem[] Items;
	declare JsonSuccess = Items.fromjson(Response.Values[0]);
	return Items;
}

SChAnchorItem[] GetCheckpointItems() {
	declare Response = Request("Ch_GetCheckpointItems", []);
	declare SChAnchorItem[] Items;
	declare JsonSuccess = Items.fromjson(Response.Values[0]);
	return Items;
}

SChAnchorItem[] GetFinishLineItems() {
	declare Response = Request("Ch_GetFinishLineItems", []);
	declare SChAnchorItem[] Items;
	declare JsonSuccess = Items.fromjson(Response.Values[0]);
	return Items;
}

SChAnchorItem[] GetMultilapItems() {
	declare Response = Request("Ch_GetMultilapItems", []);
	declare SChAnchorItem[] Items;
	declare JsonSuccess = Items.fromjson(Response.Values[0]);
	return Items;
}

Boolean RemoveAnchorItem(SChAnchorItem _AnchorItem) {
	declare Params = [_AnchorItem.tojson()];
	declare Response = Request("Ch_RemoveAnchorItem", Params);
	return Response.Values[0] == "True";
}

Boolean RemoveAnchorBlock(SChAnchorBlock _AnchorBlock) {
	declare Params = [_AnchorBlock.tojson()];
	declare Response = Request("Ch_RemoveAnchorBlock", Params);
	return Response.Values[0] == "True";
}

Boolean RemoveBlock(SChBlock _Block) {
	return False;
}

Integer Random(Integer _Min, Integer _Max) { // Consistent randomizer
	return MathLib::Rand(_Min, _Max, Editor.Map.CopperPrice);
}

Integer Random(Integer _Max) {
	return Random(0, _Max);
}

Real Random(Real _Min, Real _Max) { // Consistent randomizer
	return MathLib::Rand(_Min, _Max, Editor.Map.CopperPrice);
}

Real Random(Real _Max) {
	return Random(0.0, _Max);
}

Boolean Random() {
	return (Random(1) == 1);
}

Real Percentage() {
	return Random(1.0);
}

Boolean Chance(Real _Percentage) {
	return (Percentage() <= _Percentage);
}

Void Message(Text _Message) {
	declare Response = Request("Ch_Message",[_Message]);
}

//
/* Modifier appearance control */
//

Void SetStatusProgress(Real _Progress) {
	declare Response = Request("Ch_SetStatusProgress", [_Progress^""]);
	yield;
}

Void SetStatusMessage(Text _Message) {
	declare Response = Request("Ch_SetStatusMessage", [_Message]);
	yield;
}

Void SetStatusColor(Vec3 _Color) {
	declare Response = Request("Ch_SetStatusColor", [_Color.X^" "^_Color.Y^" "^_Color.Z]);
	yield;
}

Void Focus(SChBlock _Block) {

}

Void Focus(SChAnchor _Anchor) {
	
}

Void Focus(SChAnchorBlock _Anchor) {
	
}

Void Focus(SChAnchorItem _Anchor) {
	
}

Void Focus(Vec3 _Position) {
	
}

//
/* Modifier technical control */
//

Void StartMultiSolution() {

}

Void EndMultiSolution() {
	
}

Void Solution() {
	declare Response = Request("Ch_Solution", []);
}

Void Complete() { // Shouldn't be normally called
	declare Response = Request("Ch_Complete", []);
}

Void Problem(SChProblem _Problem) {
	Problems.add(_Problem);

	if(_Problem.IsUnsolvable) {
		SetStatusColor(<1.,0.,0.>);
		SetStatusProgress(1.);
	}
	else
		SetStatusColor(<1.,.5,0.>);
	declare Response = Request("Ch_Problem", [_Problem.tojson()]);
	sleep(2000);
	SetStatusColor(<1.,1.,1.>);
}

Void Note(SChNote _Note) {
	
}

Void Incompatible(Text _Reason) {
	declare Response = Request("Ch_Incompatible", [_Reason]);
}

Void Chill() {
	yield;
}

//
/* Pre-made problem functions */
//

Void Problem_MultilapTrack(SChAnchor _Anchor) {
	declare SChProblem Problem;
	Problem.Name = "MultilapTrack";
	Problem.Anchor = _Anchor;
	Problem.IsUnsolvable = True;
	Problem(Problem);
}

Void Problem_CannotRemoveStartLine(SChAnchor _Anchor) {
	declare SChProblem Problem;
	Problem.Name = "CannotRemoveStartLine";
	Problem.Anchor = _Anchor;
	Problem(Problem);
}

Void Problem_CannotRemoveFinishLine(SChAnchor _Anchor) {
	declare SChProblem Problem;
	Problem.Name = "CannotRemoveFinishLine";
	Problem.Anchor = _Anchor;
	Problem(Problem);
}

Void Problem_CannotRemoveCheckpoint(SChAnchor _Anchor) {
	declare SChProblem Problem;
	Problem.Name = "CannotRemoveCheckpoint";
	Problem.Anchor = _Anchor;
	Problem(Problem);
}

Void Problem_CannotRemoveMultilap(SChAnchor _Anchor) {
	declare SChProblem Problem;
	Problem.Name = "CannotRemoveMultilap";
	Problem.Anchor = _Anchor;
	Problem(Problem);
}

Void Problem_ItemStart(SChAnchor _Anchor) {
	declare SChProblem Problem;
	Problem.Name = "ItemStart";
	Problem.Anchor = _Anchor;
	Problem(Problem);
}

Void Problem_ItemFinish(SChAnchor _Anchor) {
	declare SChProblem Problem;
	Problem.Name = "ItemFinish";
	Problem.Anchor = _Anchor;
	Problem(Problem);
}

Void Problem_ItemMultilap(SChAnchor _Anchor) {
	declare SChProblem Problem;
	Problem.Name = "ItemMultilap";
	Problem.Anchor = _Anchor;
	Problem(Problem);
}

Void Problem_MultipleFinishes(SChAnchor[] _Anchors) {
	declare SChProblem Problem;
	Problem.Name = "MultipleFinishes";
	declare JsonSuccess = Problem.Anchors.fromjson(_Anchors.tojson());
	Problem(Problem);
}

Void Problem_CannotReplaceStartLine(SChAnchor _Anchor) {
	declare SChProblem Problem;
	Problem.Name = "CannotReplaceStartLine";
	Problem.Anchor = _Anchor;
	Problem(Problem);
}

Void Problem_CannotReplaceFinishLine(SChAnchor _Anchor) {
	declare SChProblem Problem;
	Problem.Name = "CannotReplaceFinishLine";
	Problem.Anchor = _Anchor;
	Problem(Problem);
}

Void Problem_CannotReplaceMultilap(SChAnchor _Anchor) {
	declare SChProblem Problem;
	Problem.Name = "CannotReplaceMultilap";
	Problem.Anchor = _Anchor;
	Problem(Problem);
}

Void Problem_CannotPlaceGhostBlock(Int3 _Coord) {
	declare SChProblem Problem;
	Problem.Name = "CannotPlaceGhostBlock";
	Problem.Coord = _Coord;
	Problem(Problem);
}