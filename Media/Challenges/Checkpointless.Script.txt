***Metadata***
***
Script.Name = "Checkpointless";
Script.AuthorLogin = "bigbang1112";
Script.Description = "{{{{CHECKPOINTLESS_DESCRIPTION}}}}";
***

Void Problem_BlockMissing(Text _BlockName) {
	declare SChProblem Problem_BlockMissing;
	Problem_BlockMissing.Name = "BLOCK_MISSING";
	Problem_BlockMissing.BlockName = _BlockName;
	Problem_BlockMissing.ShortDescription = "{{{{PROBLEM_BLOCK_MISSING}}}} - " ^ _BlockName;
	Problem_BlockMissing.LongDescription = "{{{{PROBLEM_BLOCK_MISSING_LONG}}}}";
	Problem_BlockMissing.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_1}}}}", "", True));
	Problem_BlockMissing.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_2}}}}", "", False));
	Problem_BlockMissing.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_3}}}}", "", True));
	Problem_BlockMissing.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_4}}}}", "", False));
	Problem(Problem_BlockMissing);
}

Void Problem_MultilapTrack(SChWaypoint _Multilap) {
	declare SChProblem Problem_MultilapTrack;
	Problem_MultilapTrack.Name = "MULTILAP_TRACK";
	Problem_MultilapTrack.Waypoint = _Multilap;
	Problem_MultilapTrack.ShortDescription = "{{{{PROBLEM_MULTILAP_TRACK}}}}";
	Problem_MultilapTrack.LongDescription = "{{{{PROBLEM_MULTILAP_TRACK_LONG_CHECKPOINTLESS}}}}";
	Problem(Problem_MultilapTrack);
}

Void Problem_ItemMultilap(SChItem _Item) {
	declare SChProblem Problem_ItemMultilap;
	Problem_ItemMultilap.Name = "ITEM_MULTILAP";
	Problem_ItemMultilap.Item = _Item;
	Problem_ItemMultilap.ShortDescription = "{{{{PROBLEM_CANNOT_ADJUST_ONELAP}}}}";
	Problem_ItemMultilap.LongDescription = "{{{{PROBLEM_CANNOT_ADJUST_ONELAP_LONG_CHECKPOINTLESS}}}}";
	Problem_ItemMultilap.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_1}}}}", "", True));
	Problem(Problem_ItemMultilap);
}

Void Problem_NoCheckpoint() {
	declare SChProblem Problem_NoCheckpoint;
	Problem_NoCheckpoint.Name = "NO_CHECKPOINT";
	Problem_NoCheckpoint.ShortDescription = "{{{{PROBLEM_NO_CHECKPOINT}}}}";
	Problem_NoCheckpoint.LongDescription = "{{{{PROBLEM_NO_CHECKPOINT_LONG}}}}";
	Problem(Problem_NoCheckpoint);
}

Void Problem_CannotRemoveCheckpoint(SChWaypoint _Checkpoint) {
	declare SChProblem Problem_CannotRemoveCheckpoint;
	Problem_CannotRemoveCheckpoint.Name = "CANNOT_REMOVE_CHECKPOINT";
	Problem_CannotRemoveCheckpoint.Waypoint = _Checkpoint;
	Problem_CannotRemoveCheckpoint.ShortDescription = "{{{{PROBLEM_CANNOT_REMOVE_CHECKPOINT}}}}";
	Problem_CannotRemoveCheckpoint.LongDescription = "{{{{PROBLEM_CANNOT_REMOVE_CHECKPOINT_LONG}}}}";
	Problem_CannotRemoveCheckpoint.Solutions.add(Solution("{{{{PROBLEM_CANNOT_REMOVE_CHECKPOINT_SOLUTION_1}}}}", "", True));
	Problem(Problem_CannotRemoveCheckpoint);
}

***Main***
***
declare Multilaps = GetMultilaps();
declare FinishLines = GetFinishLines();
declare MapInfo = GetMapInfo();
declare Environment = MapInfo.CollectionName;

declare IsOneLapWithFinish = Multilaps.count == 1 && FinishLines.count > 0 && MapInfo.TMObjective_NbLaps == 1;
declare IsMultilap = Multilaps.count == 1 && !IsOneLapWithFinish;

if(IsMultilap) Problem_MultilapTrack(Multilaps[0]);

if(IsOneLapWithFinish) {
	declare Multilap = Multilaps[0];
	if(Multilap.IsItem) Problem_ItemMultilap(Multilap.Item);
	else if(Multilap.IsBlock) {
		foreach(Relation, Relation_MultilapStartTwoway[Environment]) {
			declare MultilapBlockName = Relation[0];
			declare StartTwowayBlockName = Relation[1];
			if(Multilap.Block.Name == MultilapBlockName) {
				declare Removed = RemoveSpecificBlock(Multilap.Block);
				if(Removed) {
					declare Block = PlaceBlock(StartTwowayBlockName, Multilap.Block.Coord, Multilap.Block.Direction);
					if(Block.Placed)
						SetStatusMessage(MultilapBlockName ^ " {{{{replaced_with}}}} " ^ StartTwowayBlockName ^ ".");
					else {
						Problem_BlockMissing(StartTwowayBlockName);
					}
				}
			}
		}
	}
	else {

	}
}

declare Checkpoints = GetCheckpoints();

if(Checkpoints.count == 0) Problem_NoCheckpoint();

for(i,0,Checkpoints.count-1) {
	declare Checkpoint = Checkpoints[i];

	declare Removed = False;

	if(Checkpoint.IsBlock) {
		SetStatusMessage("{{{{CHECKPOINT_FOUND}}}} " ^ Checkpoint.Block.Name);
		Removed = RemoveSpecificBlock(Checkpoint.Block);
	}
	else if(Checkpoint.IsItem) {
		SetStatusMessage("{{{{CHECKPOINT_FOUND}}}} " ^ Checkpoint.Item.Position);
		Removed = RemoveItem(Checkpoint.Item);
	}
	
	SetStatusProgress((i+1.0)/(Checkpoints.count));

	if(!Removed) Problem_CannotRemoveCheckpoint(Checkpoint);

	yield;
}
***

***Solver***
***
foreach(Problem,Problems) {

}
***