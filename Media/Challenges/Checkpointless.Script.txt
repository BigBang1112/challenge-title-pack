***Metadata***
***
Script.Name = "Checkpointless";
Script.AuthorLogin = "bigbang1112";
Script.Description = "{{{{CHECKPOINTLESS_DESCRIPTION}}}}";
***

***Main***
***
declare Multilaps = GetMultilaps();
declare FinishLines = GetFinishLines();
declare MapInfo = GetOriginalMapInfo();

declare IsOneLapWithFinish = FinishLines.count == 1 && MapInfo.TMObjective_IsLapRace;
declare IsMultilap = Multilaps.count > 0 && !IsOneLapWithFinish;
if(IsMultilap) Problem(Problem_MultilapTrack(Multilaps[0]));
if(IsOneLapWithFinish) {
	declare Multilap = Multilaps[0];
	if(Multilap.IsItem) Problem(Problem_ItemMultilap(Multilap));
	else {
		foreach(Env => RelationList, Relation_MultilapStartTwoway) {
			foreach(Relation, RelationList) {
				declare MultilapBlockName = Relation[0];
				declare StartTwowayBlockName = Relation[1];
				if(Multilap.Block.Name == MultilapBlockName) {
					declare Replacement = ReplaceBlock(Multilap.Block, StartTwowayBlockName, False);
					if(!Replacement.Removed || !Replacement.Placed) Problem(Problem_CannotReplaceMultilap(Multilap));
				}
			}
		}
	}
}

declare Checkpoints = GetCheckpoints();

for(i,0,Checkpoints.count-1) {
	declare Anchor = Checkpoints[i];
	if(Anchor.DefaultTag == "Checkpoint") {
		if(Anchor.IsBlock) {
			SetStatusMessage("{{{{CHECKPOINT_FOUND}}}} " ^ Anchor.Block.Name);
		}
		else if(Anchor.IsItem) {
			SetStatusMessage("{{{{CHECKPOINT_FOUND}}}} " ^ Anchor.Item.Position);
		}
		
		SetStatusProgress((i+1.0)/(Checkpoints.count));

		declare Removed = RemoveAnchor(Anchor);
		if(!Removed) Problem(Problem_CannotRemoveCheckpoint(Anchor)); // Announce the problem to the Modifier
	}
	yield;
}
***

***Problems***
***
foreach(Problem,Problems) {

}
***