***Metadata***
***
Script.Name = "Comeback";
Script.AuthorLogin = "bigbang1112";
Script.Description = "{{{{COMEBACK_DESCRIPTION}}}}";
***

***Main***
***
declare Multilaps = GetMultilaps();
declare FinishLines = GetFinishLines();
declare MapInfo = GetMapInfo();
declare Environment = MapInfo.CollectionName;

declare IsOneLapWithFinish = Multilaps.count == 1 && FinishLines.count > 0 && MapInfo.TMObjective_NbLaps == 1;
declare IsMultilap = Multilaps.count == 1 && !IsOneLapWithFinish;

if(IsMultilap) {
	declare SChProblem Problem_MultilapTrack;
	Problem_MultilapTrack.Name = "MULTILAP_TRACK";
	Problem_MultilapTrack.Waypoints.add(Multilaps[0]);
	Problem_MultilapTrack.ShortDescription = "{{{{MULTILAP_TRACK}}}}";
	Problem_MultilapTrack.LongDescription = "This track has a multilap which isn't considered as one lap with 1 or more finishes. This map can't be made Checkpointless.";
	Problem(Problem_MultilapTrack);
}

if(IsOneLapWithFinish) {

}
else {
	declare StartLines = GetStartLines();
	declare Start = StartLines[0];

	foreach(Relation, Relation_StartMultilap[Environment]) {
		declare StartBlockName = Relation[0];
		declare MultilapBlockName = Relation[1];
		if(Start.IsItem) {
			declare SChProblem Problem_ItemStart;
			Problem_ItemStart.Name = "ITEM_START";
			Problem_ItemStart.Waypoints.add(Start);
			Problem_ItemStart.ShortDescription = "";
			Problem_ItemStart.LongDescription = "Start is an item. Script can't replace it with any multilap variant. Replacing it with multilap variant is needed to make Comeback valid.";
			Problem_ItemStart.Solutions.add("Replace the start item manually with a possible multilap variant.");
			Problem(Problem_ItemStart);
		}
		else if(Start.Block.Name == StartBlockName) {
			SetStatusProgress(.5);
			if(RemoveSpecificBlock(Start.Block)) {
				declare PlaceBlockResult = PlaceBlock(MultilapBlockName, Start.Block.Coord, Start.Block.Direction);
				if(PlaceBlockResult.Placed
				|| PlaceGhostBlock(MultilapBlockName, Start.Block.Coord, Start.Block.Direction)) {
					SetStatusMessage(StartBlockName ^ " {{{{replaced_with}}}} " ^ MultilapBlockName ^ ".");
				}
				else {
					declare SChProblem Problem_CannotPlaceGhostBlock;
					Problem_CannotPlaceGhostBlock.Name = "CANNOT_PLACE_GHOSTBLOCK";
					Problem_CannotPlaceGhostBlock.Coord = Start.Block.Coord;
					Problem_CannotPlaceGhostBlock.Direction = Start.Block.Direction;
					Problem_CannotPlaceGhostBlock.BlockName = MultilapBlockName;
					Problem_CannotPlaceGhostBlock.ShortDescription = "{{{{CANNOT_PLACE_GHOSTBLOCK}}}} - " ^ MultilapBlockName;
					Problem_CannotPlaceGhostBlock.LongDescription = "This block is not possible to place in ghost variant.";
					Problem_CannotPlaceGhostBlock.Solutions.add("Contact the authors of Challenge to add the ghost variant of the block.");
					Problem_CannotPlaceGhostBlock.Solutions.add("Place the ghost block manually.");
					Problem(Problem_CannotPlaceGhostBlock);
				}
			}
			else {
				declare SChProblem Problem_CannotRemoveStartLine;
				Problem_CannotRemoveStartLine.Name = "CANNOT_REMOVE_STARTLINE";
				Problem_CannotRemoveStartLine.Waypoints.add(Start);
				Problem_CannotRemoveStartLine.ShortDescription = "{{{{CANNOT_REMOVE_STARTLINE}}}} - " ^ StartBlockName;
				Problem_CannotRemoveStartLine.LongDescription = "This start anchor can't be removed via script. The anchor is possibly ghost block or weirdly placed.";
				Problem_CannotRemoveStartLine.Solutions.add("Replace the start manually with possible multilap variant.");
				Problem_CannotRemoveStartLine.Solutions.add("Replace the start manually with possible multilap ghost variant.");
				Problem(Problem_CannotRemoveStartLine);
			}
		}
	}
}

declare SChAnchor[] CheckpointsToLink;

foreach(Finish, FinishLines) {
	foreach(Relation, Relation_FinishCheckpoint[Environment]) {
		declare FinishBlockName = Relation[0];
		declare CheckpointBlockName = Relation[1];

		if(Finish.IsItem) {
			declare SChProblem Problem_ItemFinish;
			Problem_ItemFinish.Name = "ITEM_FINISH";
			Problem_ItemFinish.Waypoints.add(Finish);
			Problem_ItemFinish.ShortDescription = "";
			Problem_ItemFinish.LongDescription = "Finish is an item. Script can't replace it with any checkpoint variant. Replacing it with checkpoint variant is needed to make Comeback valid.";
			Problem_ItemFinish.Solutions.add("Replace the finish item manually with a possible checkpoint variant.");
			Problem(Problem_ItemFinish);
		}
		else if(Finish.Block.Name == FinishBlockName) {
			SetStatusProgress(1.);
			if(RemoveSpecificBlock(Finish.Block)) {
				declare PlaceBlockResult = PlaceBlock(CheckpointBlockName, Finish.Block.Coord, Finish.Block.Direction);
				if(PlaceBlockResult.Placed
				|| PlaceGhostBlock(CheckpointBlockName, Finish.Block.Coord, Finish.Block.Direction)) {
					SetStatusMessage(FinishBlockName ^ " {{{{replaced_with}}}} " ^ CheckpointBlockName ^ ".");
					foreach(Anchor, PlaceBlockResult.Block.Anchors)
						if(Anchor.DefaultTag == "Checkpoint")
							CheckpointsToLink.add(Anchor);
				}
				else {
					declare SChProblem Problem_CannotPlaceGhostBlock;
					Problem_CannotPlaceGhostBlock.Name = "CANNOT_PLACE_GHOSTBLOCK";
					Problem_CannotPlaceGhostBlock.Coord = Finish.Block.Coord;
					Problem_CannotPlaceGhostBlock.Direction = Finish.Block.Direction;
					Problem_CannotPlaceGhostBlock.BlockName = CheckpointBlockName;
					Problem_CannotPlaceGhostBlock.ShortDescription = "{{{{CANNOT_PLACE_GHOSTBLOCK}}}} - " ^ CheckpointBlockName;
					Problem_CannotPlaceGhostBlock.LongDescription = "This block is not possible to place in ghost variant.";
					Problem_CannotPlaceGhostBlock.Solutions.add("Contact the authors of Challenge to add the ghost variant of the block.");
					Problem_CannotPlaceGhostBlock.Solutions.add("Place the ghost block manually.");
					Problem(Problem_CannotPlaceGhostBlock);
				}
			}
			else {
				declare SChProblem Problem_CannotRemoveFinishLine;
				Problem_CannotRemoveFinishLine.Name = "CANNOT_REMOVE_FINISHLINE";
				Problem_CannotRemoveFinishLine.Waypoints.add(Finish);
				Problem_CannotRemoveFinishLine.ShortDescription = "{{{{CANNOT_REMOVE_FINISHLINE}}}} -  " ^ FinishBlockName;
				Problem_CannotRemoveFinishLine.LongDescription = "This finish can't be removed via script. The block is possibly ghost or weirdly placed.";
				Problem_CannotRemoveFinishLine.Solutions.add("Replace the finish manually with possible checkpoint variant.");
				Problem_CannotRemoveFinishLine.Solutions.add("Replace the finish manually with possible checkpoint ghost variant.");
				Problem(Problem_CannotRemoveFinishLine);
			}
		}
	}
}

if(CheckpointsToLink.count > 1) {
	SetStatusMessage("{{{{LINKING_CHECKPOINTS}}}}: " ^ CheckpointsToLink.count);
	LinkCheckpoints(CheckpointsToLink);
}
***

***Solver***
***
foreach(Problem,Problems) {

}
***