***Metadata***
***
Script.Name = "Comeback";
Script.AuthorLogin = "bigbang1112";
Script.Description = "{{{{COMEBACK_DESCRIPTION}}}}";
Script.Compatibility.Collections = ["Canyon", "Stadium", "Valley", "Lagoon"];
***

Void Problem_MultilapTrack(SChWaypoint _Multilap) {
	declare SChProblem Problem_MultilapTrack;
	Problem_MultilapTrack.Name = "MULTILAP_TRACK";
	Problem_MultilapTrack.Waypoints.add(_Multilap);
	Problem_MultilapTrack.ShortDescription = "{{{{PROBLEM_MULTILAP_TRACK}}}}";
	Problem_MultilapTrack.LongDescription = "{{{{PROBLEM_MULTILAP_TRACK_LONG_CHECKPOINTLESS}}}}";
	Problem(Problem_MultilapTrack);
}

Void Problem_ItemStart(SChWaypoint _Start) {
	declare SChProblem Problem_ItemStart;
	Problem_ItemStart.Name = "ITEM_START";
	Problem_ItemStart.Waypoints.add(_Start);
	Problem_ItemStart.ShortDescription = "{{{{PROBLEM_CANNOT_REPLACE_START_MULTILAP}}}}";
	Problem_ItemStart.LongDescription = "{{{{PROBLEM_CANNOT_REPLACE_START_MULTILAP_LONG}}}}";
	Problem_ItemStart.Solutions.add(Solution("{{{{PROBLEM_CANNOT_REPLACE_START_MULTILAP_SOLUTION_1}}}}", "", True));
	Problem(Problem_ItemStart);
}

Void Problem_CannotPlaceGhostBlock(Int3 _Coord, Text _Direction, Text _BlockName) {
	declare SChProblem Problem_CannotPlaceGhostBlock;
	Problem_CannotPlaceGhostBlock.Name = "CANNOT_PLACE_GHOSTBLOCK";

	declare SChApproxBlock Block;
	Block.Name = _BlockName;
	Block.Coord = _Coord;
	Block.Direction = _Direction;
	Problem_CannotPlaceGhostBlock.ApproxBlocks.add(Block);
	
	Problem_CannotPlaceGhostBlock.ShortDescription = "{{{{PROBLEM_CANNOT_PLACE_GHOSTBLOCK}}}} - " ^ Block.Name;
	Problem_CannotPlaceGhostBlock.LongDescription = "This block is not possible to place in ghost variant.";
	Problem_CannotPlaceGhostBlock.Solutions.add(Solution("Contact the authors of Challenge to add the ghost variant of the block.", "", True));
	Problem_CannotPlaceGhostBlock.Solutions.add(Solution("Place the ghost block manually.", "", True));
	Problem(Problem_CannotPlaceGhostBlock);
}

Void Problem_CannotRemoveStart(SChWaypoint _Start) {
	declare SChProblem Problem_CannotRemoveStart;
	Problem_CannotRemoveStart.Name = "CANNOT_REMOVE_START";
	Problem_CannotRemoveStart.Waypoints.add(_Start);
	Problem_CannotRemoveStart.ShortDescription = "{{{{PROBLEM_CANNOT_REMOVE_START}}}} - " ^ _Start.Block.Name;
	Problem_CannotRemoveStart.LongDescription = "This start anchor can't be removed via script. The anchor is possibly ghost block or weirdly placed.";
	Problem_CannotRemoveStart.Solutions.add(Solution("Replace the start manually with possible multilap variant.", "", True));
	Problem_CannotRemoveStart.Solutions.add(Solution("Replace the start manually with possible multilap ghost variant.", "", True));
	Problem(Problem_CannotRemoveStart);
}

Void Problem_CannotRemoveFinish(SChWaypoint _Finish) {
	declare SChProblem Problem_CannotRemoveFinish;
	Problem_CannotRemoveFinish.Name = "CANNOT_REMOVE_FINISHLINE";
	Problem_CannotRemoveFinish.Waypoints.add(_Finish);
	Problem_CannotRemoveFinish.ShortDescription = "{{{{CANNOT_REMOVE_FINISHLINE}}}} -  " ^ _Finish.Block.Name;
	Problem_CannotRemoveFinish.LongDescription = "This finish can't be removed via script. The block is possibly ghost or weirdly placed.";
	Problem_CannotRemoveFinish.Solutions.add(Solution("Replace the finish manually with possible checkpoint variant.", "", True));
	Problem_CannotRemoveFinish.Solutions.add(Solution("Replace the finish manually with possible checkpoint ghost variant.", "", True));
	Problem(Problem_CannotRemoveFinish);
}

***Main***
***
SetStatusStage("{{{{ANALYZING}}}}...");
SetStatusMessage("{{{{SEARCHING_ALL_MULTILAPS}}}}...");
declare Multilaps = GetMultilaps();
SetStatusMessage("{{{{SEARCHING_ALL_FINISHES}}}}...");
declare FinishLines = GetFinishLines();
SetStatusMessage("{{{{SEARCHING_MAP_INFO}}}}...");
declare MapInfo = GetMapInfo();
declare Environment = MapInfo.CollectionName;

SetStatusMessage("{{{{CONSIDERING_MULTILAP_TRACK}}}}...");

declare IsOneLapWithFinish = Multilaps.count == 1 && FinishLines.count > 0 && MapInfo.TMObjective_NbLaps == 1;
declare IsMultilap = Multilaps.count == 1 && !IsOneLapWithFinish;

if(IsMultilap) Problem_MultilapTrack(Multilaps[0]);

SetStatusStage("{{{{MODIFYING}}}}...");

if(IsOneLapWithFinish) {

}
else {
	declare StartLines = GetStartLines();
	declare Start = StartLines[0];

	foreach(Relation, GetRelation_StartMultilap()[Environment]) {
		declare StartBlock = Relation[0];
		declare MultilapBlock = Relation[1];
		if(Start.IsItem) Problem_ItemStart(Start);
		else if(Start.Block.Name == StartBlock.Name) {
			SetStatusProgress(.5);
			if(RemoveSpecificBlock(Start.Block)) {
				declare PlaceBlockResult = PlaceBlock(MultilapBlock.Name, Start.Block.Coord, Start.Block.Direction);
				if(PlaceBlockResult.Placed
				|| PlaceGhostBlock(MultilapBlock.Name, Start.Block.Coord, Start.Block.Direction)) {
					SetStatusMessage(StartBlock.Name ^ " {{{{replaced_with}}}} " ^ MultilapBlock.Name ^ ".");
				}
				else Problem_CannotPlaceGhostBlock(Start.Block.Coord, Start.Block.Direction, MultilapBlock.Name);
			}
			else Problem_CannotRemoveStart(Start);
		}
	}
}

declare SChAnchor[] CheckpointsToLink;

foreach(Finish, FinishLines) {
	foreach(Relation, GetRelation_FinishCheckpoint()[Environment]) {
		declare FinishBlock = Relation[0];
		declare CheckpointBlock = Relation[1];

		if(Finish.IsItem) {
			declare SChProblem Problem_ItemFinish;
			Problem_ItemFinish.Name = "ITEM_FINISH";
			Problem_ItemFinish.Waypoints.add(Finish);
			Problem_ItemFinish.ShortDescription = "";
			Problem_ItemFinish.LongDescription = "Finish is an item. Script can't replace it with any checkpoint variant. Replacing it with checkpoint variant is needed to make Comeback valid.";
			Problem_ItemFinish.Solutions.add(Solution("Replace the finish item manually with a possible checkpoint variant.", "", True));
			Problem(Problem_ItemFinish);
		}
		else if(Finish.Block.Name == FinishBlock.Name) {
			SetStatusProgress(1.);
			if(RemoveSpecificBlock(Finish.Block)) {
				declare PlaceBlockResult = PlaceBlock(CheckpointBlock.Name, Finish.Block.Coord, Finish.Block.Direction);
				if(PlaceBlockResult.Placed
				|| PlaceGhostBlock(CheckpointBlock.Name, Finish.Block.Coord, Finish.Block.Direction)) {
					SetStatusMessage(FinishBlock.Name ^ " {{{{replaced_with}}}} " ^ CheckpointBlock.Name ^ ".");
					foreach(Anchor, PlaceBlockResult.Block.Anchors)
						if(Anchor.DefaultTag == "Checkpoint")
							CheckpointsToLink.add(Anchor);
				}
				else Problem_CannotPlaceGhostBlock(Finish.Block.Coord, Finish.Block.Direction, CheckpointBlock.Name);
			}
			else Problem_CannotRemoveFinish(Finish);
		}
	}
}

if(CheckpointsToLink.count > 1) {
	SetStatusMessage("{{{{LINKING_CHECKPOINTS}}}}: " ^ CheckpointsToLink.count);
	LinkCheckpoints(CheckpointsToLink);
}
***

***Solver***
***
switch(Solver_Problem.Name) {
	case "": {

	}
}
***