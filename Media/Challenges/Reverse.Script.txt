***Metadata***
***
Script_Name = "Reverse";
Script_AuthorLogin = "bigbang1112";
Script_Description = "Swap start with finish.";
***

***Main***
***
declare Pairs = [
	"Canyon" => [
		["RoadRaceStart","RoadRaceFinish"],
		["RoadRaceStartMirror","RoadRaceFinishMirror"],
		["ArenaStart","ArenaFinish"],
		["RoadMainStart","RoadMainFinish"],
		["","RoadCaveFinish"],
		["","RoadCaveDoubleFinish"]
	],
	"Stadium" => [
		["StadiumRoadMainStartLine","StadiumRoadMainFinishLine"]
	],
	"Valley" => [
		["Road2WayStart","Road2WayFinish"],
		["Road2WayForestStart","Road2WayForestFinish"],
		["Road4WayStart","Road4WayFinish"],
		["RoadForestLargeStart","RoadForestLargeFinish"]
	],
	"Lagoon" => [
		["RoadMainStart","RoadMainFinish"],
		["FreeWayStart","FreeWayFinish"],
		["RoadThemeParkStart","RoadThemeParkFinish"],
		["","RoadThemeParkFlipFinish"],
		["ArenaStart","ArenaFinish"],
		["ArenaStart","ArenaFinishX2"],
		["","RoadTunnelFinish"]
	]
];

declare StartLine = GetStartLineBlock();
if(StartLine.Waypoint == "StartFinish") Incompatible("Multilap tracks can't be reversed.");
declare FinishLines = GetFinishLineBlocks();

foreach(Env => PairList, Pairs) {
	foreach(Pair, PairList) {
		declare StartBlockName = Pair[0];
		declare FinishBlockName = Pair[1];
		if(StartLine.Name == StartBlockName) {
			declare Replacemenet = ReplaceBlock(StartLine, FinishBlockName, True);
			SetStatusProgress(0.5);
			SetStatusMessage("""{{{StartBlockName}}} replaced with {{{FinishBlockName}}}.""");
		}
	}
}

StartMultiSolution();

for(i,0,FinishLines.count-1) {
	declare FinishLine = FinishLines[i];
	foreach(Env => PairList, Pairs) {
		foreach(Pair, PairList) {
			declare StartBlockName = Pair[0];
			declare FinishBlockName = Pair[1];
			if(FinishLine.Name == FinishBlockName) {
				declare Replacemenet = ReplaceBlock(FinishLine, StartBlockName, True);
				SetStatusProgress(0.5+(i+1.0)/FinishLines.count*.5);
				SetStatusMessage("""{{{FinishBlockName}}} replaced with {{{StartBlockName}}}.""");
			}
		}
	}
	Solution();
}

EndMultiSolution();

***