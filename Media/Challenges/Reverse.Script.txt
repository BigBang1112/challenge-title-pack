***Metadata***
***
Script.Name = "Reverse";
Script.AuthorLogin = "bigbang1112";
Script.Description = "{{{{REVERSE_DESCRIPTION}}}}";
***

Void Problem_BlockMissing(Text _BlockName) {
	declare SChProblem Problem_BlockMissing;
	Problem_BlockMissing.Name = "BLOCK_MISSING";
	Problem_BlockMissing.BlockNames.add(_BlockName);
	Problem_BlockMissing.ShortDescription = "{{{{PROBLEM_BLOCK_MISSING}}}} - " ^ _BlockName;
	Problem_BlockMissing.LongDescription = "{{{{PROBLEM_BLOCK_MISSING_LONG}}}}";
	Problem_BlockMissing.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_1}}}}", "", True));
	Problem_BlockMissing.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_2}}}}", "", False));
	Problem_BlockMissing.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_3}}}}", "", True));
	Problem_BlockMissing.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_4}}}}", "", False));
	Problem(Problem_BlockMissing);
}

Void Problem_MultilapTrack(SChWaypoint _Multilap) {
	declare SChProblem Problem_MultilapTrack;
	Problem_MultilapTrack.Name = "MULTILAP_TRACK";
	Problem_MultilapTrack.Waypoints.add(_Multilap);
	Problem_MultilapTrack.ShortDescription = "{{{{PROBLEM_MULTILAP_TRACK}}}}";
	Problem_MultilapTrack.LongDescription = "{{{{PROBLEM_MULTILAP_TRACK_LONG_CHECKPOINTLESS}}}}";
	Problem(Problem_MultilapTrack);
}

Void Problem_ItemMultilap(SChItem _Item) {
	declare SChProblem Problem_ItemMultilap;
	Problem_ItemMultilap.Name = "ITEM_MULTILAP";
	Problem_ItemMultilap.Items.add(_Item);
	Problem_ItemMultilap.ShortDescription = "{{{{PROBLEM_CANNOT_ADJUST_ONELAP}}}}";
	Problem_ItemMultilap.LongDescription = "{{{{PROBLEM_CANNOT_ADJUST_ONELAP_LONG_CHECKPOINTLESS}}}}";
	Problem_ItemMultilap.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_1}}}}", "", True));
	Problem(Problem_ItemMultilap);
}

Void Problem_ItemStart(SChItem _Item) {
	declare SChProblem Problem_ItemStart;
	Problem_ItemStart.Name = "ITEM_START";
	Problem_ItemStart.Items.add(_Item);
	Problem_ItemStart.ShortDescription = "{{{{PROBLEM_CANNOT_REPLACE_START}}}}";
	Problem_ItemStart.LongDescription = "{{{{PROBLEM_CANNOT_REPLACE_START_LONG}}}}";
	Problem_ItemStart.Solutions.add(Solution("{{{{PROBLEM_CANNOT_REPLACE_START_SOLUTION_1}}}}", "", True));
	Problem(Problem_ItemStart);
}

Void Problem_ItemFinish(SChItem _Item) {
	declare SChProblem Problem_ItemFinish;
	Problem_ItemFinish.Name = "ITEM_FINISH";
	Problem_ItemFinish.Items.add(_Item);
	Problem_ItemFinish.ShortDescription = "{{{{PROBLEM_CANNOT_REPLACE_FINISH}}}}";
	Problem_ItemFinish.LongDescription = "{{{{PROBLEM_CANNOT_REPLACE_FINISH_LONG}}}}";
	Problem_ItemFinish.Solutions.add(Solution("{{{{PROBLEM_CANNOT_REPLACE_FINISH_SOLUTION_1}}}}", "", True));
	Problem(Problem_ItemFinish);
}

Void Problem_MultipleFinishes(SChWaypoint[] _Finishes) {
	declare SChProblem Problem_MultipleFinishes;
	Problem_MultipleFinishes.Name = "MULTIPLE_FINISHES";
	Problem_MultipleFinishes.Waypoints = _Finishes;
	Problem_MultipleFinishes.ShortDescription = "{{{{PROBLEM_MULTIPLE_FINISHES}}}}";
	Problem_MultipleFinishes.LongDescription = "{{{{PROBLEM_MULTIPLE_FINISHES_LONG}}}}";
	Problem_MultipleFinishes.Solutions.add(Solution("{{{{PROBLEM_MULTIPLE_FINISHES_SOLUTION_1}}}}", "", True));
	Problem_MultipleFinishes.Solutions.add(Solution("{{{{PROBLEM_MULTIPLE_FINISHES_SOLUTION_2}}}}", "", True));
	Problem(Problem_MultipleFinishes);
}

***Main***
***
declare StartLines = GetStartLines();
declare Multilaps = GetMultilaps();
declare FinishLines = GetFinishLines();
declare MapInfo = GetMapInfo();
declare Environment = MapInfo.CollectionName;

declare IsOneLapWithFinish = Multilaps.count == 1 && FinishLines.count > 0 && MapInfo.TMObjective_NbLaps == 1;
declare IsMultilap = Multilaps.count == 1 && !IsOneLapWithFinish;

if(IsMultilap) Problem_MultilapTrack(Multilaps[0]);

SetStatusProgress(.5);

if(IsOneLapWithFinish) {
	declare Multilap = Multilaps[0];
	if(Multilap.IsItem) Problem_ItemMultilap(Multilap.Item);
	else if(Multilap.IsBlock) {
		foreach(Relation, GetRelation_MultilapFinishTwoway()[Environment]) {
			declare MultilapBlockName = Relation[0];
			declare FinishTwowayBlockName = Relation[1];
			if(Multilap.Block.Name == MultilapBlockName) {
				declare Removed = RemoveSpecificBlock(Multilap.Block);
				if(Removed) {
					if(IsSpecialBlock(FinishTwowayBlockName)) {
						declare Block = PlaceBlock(FinishTwowayBlockName, Multilap.Block.Coord, Multilap.Block.Direction);
						if(Block.Placed) SetStatusMessage(MultilapBlockName ^ " {{{{replaced_with}}}} " ^ FinishTwowayBlockName ^ ".");
						else Problem_BlockMissing(FinishTwowayBlockName);
					}
				}
			}
		}
	}
	else Problem();
}
else {
	declare Start = StartLines[0];
	if(Start.IsItem) Problem_ItemStart(Start.Item);
	else if(Start.IsBlock) {
		foreach(Relation, GetRelation_StartFinish()[Environment]) {
			declare StartBlockName = Relation[0];
			declare FinishBlockName = Relation[1];

			if(Start.Block.Name == StartBlockName) {
				declare Removed = RemoveSpecificBlock(Start.Block);
				if(Removed) {
					declare Block = PlaceBlock(FinishBlockName, Start.Block.Coord, OppositeDirection(Start.Block.Direction));
					if(Block.Placed) SetStatusMessage(StartBlockName ^ " {{{{replaced_with}}}} " ^ FinishBlockName ^ ".");
					else Problem_BlockMissing(FinishBlockName);
				}
			}
		}
	}
	else Problem();
}

SetStatusProgress(1.);
if(FinishLines.count > 1) Problem_MultipleFinishes(FinishLines);

if(FinishLines.count == 1) {
	declare Finish = FinishLines[0];

	if(Finish.IsItem) Problem_ItemFinish(Finish.Item);
	else {
		foreach(Relation, GetRelation_StartFinish()[Environment]) {
			declare StartBlockName = Relation[0];
			declare FinishBlockName = Relation[1];
			
			if(Finish.Block.Name == FinishBlockName) {
				declare Removed = RemoveSpecificBlock(Finish.Block);
				if(Removed) {
					declare Block = PlaceBlock(StartBlockName, Finish.Block.Coord, OppositeDirection(Finish.Block.Direction));
					if(Block.Placed) SetStatusMessage(FinishBlockName ^ " {{{{replaced_with}}}} " ^ StartBlockName ^ ".");
					else Problem_BlockMissing(StartBlockName);
				}
			}
		}
	}
}
***

***Solver***
***
switch(Solver_Problem.Name) {
	case "MULTIPLE_FINISHES": {
		declare MapInfo = GetMapInfo();
		declare Environment = MapInfo.CollectionName;

		declare Finish = Solver_Problem.Waypoints[Solver_Point];
		if(Finish.IsBlock) {
			foreach(Relation, GetRelation_StartFinish()[Environment]) {
				declare StartBlockName = Relation[0];
				declare FinishBlockName = Relation[1];
				
				if(Finish.Block.Name == FinishBlockName) {
					declare Removed = RemoveSpecificBlock(Finish.Block);
					if(Removed) {
						declare Block = PlaceBlock(StartBlockName, Finish.Block.Coord, OppositeDirection(Finish.Block.Direction));
						if(!Block.Placed) {}
					}
					else {}
				}
			}
		}
	}
	case "ITEM_START": {
		ShowEditor();
		
		declare StartPos = Solver_Problem.Items[0].Position;
		declare Replaced = False;
		while(!Replaced) {
			declare Starts = GetStartLines();
			declare Finishes = GetFinishLines();
			declare Boolean StartExists;
			foreach(Start, Starts) {
				if(Start.IsItem) {
					if(Start.Item.Position == StartPos) {
						StartExists = True;
					}
				}
			}
			
			foreach(Finish, Finishes) {
				if(Finish.IsItem) {
					if(!StartExists && MathLib::Distance(StartPos, Finish.Item.Position) < 16.) {
						Replaced = True;
					}
				}
			}
			sleep(100);
		}

		HideEditor();
	}
	case "ITEM_FINISH": {
		ShowEditor();
		
		declare FinishPos = Solver_Problem.Items[0].Position;
		declare Replaced = False;
		while(!Replaced) {
			declare Starts = GetStartLines();
			declare Finishes = GetFinishLines();
			declare Boolean FinishExists;
			foreach(Finish, Finishes) {
				if(Finish.IsItem) {
					if(Finish.Item.Position == FinishPos) {
						FinishExists = True;
					}
				}
			}
			
			foreach(Start, Starts) {
				if(Start.IsItem) {
					if(!FinishExists && MathLib::Distance(FinishPos, Start.Item.Position) < 16.) {
						Replaced = True;
					}
				}
			}
			sleep(100);
		}

		HideEditor();
	}
}
***