***Metadata***
***
Script.Name = "Reverse";
Script.AuthorLogin = "bigbang1112";
Script.Description = "{{{{REVERSE_DESCRIPTION}}}}";
***

***Main***
***
declare StartLines = GetStartLines();
declare Multilaps = GetMultilaps();
declare FinishLines = GetFinishLines();
declare MapInfo = GetOriginalMapInfo();
declare Environment = MapInfo.CollectionName;

declare IsOneLapWithFinish = FinishLines.count > 0 && MapInfo.TMObjective_IsLapRace && MapInfo.TMObjective_NbLaps == 1;
declare IsMultilap = Multilaps.count > 0 && !IsOneLapWithFinish;
if(IsMultilap) {
	declare SChProblem Problem_MultilapTrack;
	Problem_MultilapTrack.Name = "MULTILAP_TRACK";
	Problem_MultilapTrack.Anchor = Multilaps[0];
	Problem_MultilapTrack.ShortDescription = "{{{{MULTILAP_TRACK}}}}";
	Problem_MultilapTrack.LongDescription = "This track has a multilap which isn't considered as one lap with 1 or more finishes. This map can't be reversed.";
	Problem(Problem_MultilapTrack);
}

if(FinishLines.count > 1) {
	declare SChProblem Problem_MultipleFinishes;
	Problem_MultipleFinishes.Name = "MULTILAP_TRACK";
	Problem_MultipleFinishes.Anchors = FinishLines;
	Problem_MultipleFinishes.ShortDescription = "{{{{MULTIPLE_FINISHES}}}}";
	Problem_MultipleFinishes.LongDescription = "This track has multiple finishes. Script is not able to automate the finish replacement process.";
	Problem_MultipleFinishes.Solutions.add("Delete the finish you want to replace with its start variant.");
	Problem(Problem_MultipleFinishes);
}

if(IsOneLapWithFinish) {
	declare Multilap = Multilaps[0];
	if(Multilap.IsItem) {
		declare SChProblem Problem_ItemMultilap;
		Problem_ItemMultilap.Name = "ITEM_MULTILAP";
		Problem_ItemMultilap.Anchor = Multilap;
		Problem_ItemMultilap.ShortDescription = "{{{{CANNOT_REPLACE_MULTILAP}}}}";
		Problem_ItemMultilap.LongDescription = "Multilap is an item. Script can't replace those.";
		Problem_ItemMultilap.Solutions.add("Replace the multilap item manually with a possible finish variant.");
		Problem(Problem_ItemMultilap);
	}
	else {
		foreach(Relation, Relation_MultilapFinishTwoway[Environment]) {
			declare MultilapBlockName = Relation[0];
			declare FinishTwowayBlockName = Relation[1];

			if(Multilap.Block.Name == MultilapBlockName) {
				SetStatusProgress(.5);
				declare Replacement = ReplaceBlock(Multilap.Block, FinishTwowayBlockName, True);
				if(!Replacement.Removed) Problem();
				else if(!Replacement.Placed) {
					declare SChProblem Problem_BlockMissing;
					Problem_BlockMissing.Name = "BLOCK_MISSING";
					Problem_BlockMissing.BlockName = FinishTwowayBlockName;
					Problem_BlockMissing.ShortDescription = "{{{{BLOCK_MISSING}}}}: " ^ FinishTwowayBlockName;
					Problem_BlockMissing.LongDescription = "Block to replace with is missing in the current blockset.";
					Problem_BlockMissing.Solutions.add("Contact the authors of Challenge to add the block.");
					Problem_BlockMissing.Solutions.add("Add the block by yourself via block creator or macroblock.");
					Problem_BlockMissing.Solutions.add("Wait before Nadeo will add the block.");
					Problem(Problem_BlockMissing);
				}
				else SetStatusMessage(MultilapBlockName ^ " {{{{replaced_with}}}} " ^ FinishTwowayBlockName ^ ".");
			}
		}
	}
}
else {
	declare StartLine = StartLines[0];
	if(StartLine.IsItem) {
		declare SChProblem Problem_ItemStart;
		Problem_ItemStart.Name = "ITEM_START";
		Problem_ItemStart.Anchor = StartLine;
		Problem_ItemStart.ShortDescription = "{{{{CANNOT_REPLACE_START}}}}";
		Problem_ItemStart.LongDescription = "Start is an item. Script can't replace those.";
		Problem_ItemStart.Solutions.add("Replace the start item manually with a possible finish variant.");
		Problem(Problem_ItemStart);
	}
	else {
		foreach(Relation, Relation_StartFinish[Environment]) {
			declare StartBlockName = Relation[0];
			declare FinishBlockName = Relation[1];

			if(StartLine.Block.Name == StartBlockName) {
				SetStatusProgress(.5);
				declare Replacement = ReplaceBlock(StartLine.Block, FinishBlockName, True);
				if(!Replacement.Removed) Problem();
				else if(!Replacement.Placed) {
					declare SChProblem Problem_BlockMissing;
					Problem_BlockMissing.Name = "BLOCK_MISSING";
					Problem_BlockMissing.BlockName = FinishBlockName;
					Problem_BlockMissing.ShortDescription = "{{{{BLOCK_MISSING}}}}: " ^ FinishBlockName;
					Problem_BlockMissing.LongDescription = "Block to replace with is missing in the current blockset.";
					Problem_BlockMissing.Solutions.add("Contact the authors of Challenge to add the block.");
					Problem_BlockMissing.Solutions.add("Add the block by yourself via block creator or macroblock.");
					Problem_BlockMissing.Solutions.add("Wait before Nadeo will add the block.");
				}
				else SetStatusMessage(StartBlockName ^ " {{{{replaced_with}}}} " ^ FinishBlockName ^ ".");
			}
		}
	}
}

if(FinishLines.count == 1) {
	declare FinishLine = FinishLines[0];
	if(FinishLine.IsItem) {
		declare SChProblem Problem_ItemFinish;
		Problem_ItemFinish.Name = "ITEM_FINISH";
		Problem_ItemFinish.Anchor = FinishLine;
		Problem_ItemFinish.ShortDescription = "{{{{CANNOT_REPLACE_FINISH}}}}";
		Problem_ItemFinish.LongDescription = "Finish is an item. Script can't replace those.";
		Problem_ItemFinish.Solutions.add("Replace the finish item manually with a possible start variant.");
		Problem(Problem_ItemFinish);
	}
	else {
		foreach(Relation, Relation_StartFinish[Environment]) {
			declare StartBlockName = Relation[0];
			declare FinishBlockName = Relation[1];
			
			if(FinishLine.Block.Name == FinishBlockName) {
				SetStatusProgress(1.);
				declare Replacement = ReplaceBlock(FinishLine.Block, StartBlockName, True);
				if(!Replacement.Removed) Problem();
				else if(!Replacement.Placed) {
					declare SChProblem Problem_BlockMissing;
					Problem_BlockMissing.Name = "BLOCK_MISSING";
					Problem_BlockMissing.BlockName = StartBlockName;
					Problem_BlockMissing.ShortDescription = "{{{{BLOCK_MISSING}}}}: " ^ StartBlockName;
					Problem_BlockMissing.LongDescription = "Block to replace with is missing in the current blockset.";
					Problem_BlockMissing.Solutions.add("Contact the authors of Challenge to add the block.");
					Problem_BlockMissing.Solutions.add("Add the block by yourself via block creator or macroblock.");
					Problem_BlockMissing.Solutions.add("Wait before Nadeo will add the block.");
					Problem(Problem_BlockMissing);
				}
				else SetStatusMessage(FinishBlockName ^ " {{{{replaced_with}}}} " ^ StartBlockName ^ ".");
			}
		}
	}
}
***

***Solver***
***
foreach(Problem,Problems) {

}
***