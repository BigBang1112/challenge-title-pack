***Metadata***
***
Script.Name = "NoCP";
Script.AuthorLogin = "bigbang1112";
Script.Description = "{{{{NOCP_DESCRIPTION}}}}";
Script.CompatibleCollections = "Canyon,Stadium,Valley,Lagoon";
***

Void Problem_BlockMissing(Text _BlockName, Int3 _Coord) {
	declare SChProblem Problem_BlockMissing;
	Problem_BlockMissing.Name = "BLOCK_MISSING";

	declare SChApproxBlock Block;
	Block.Name = _BlockName;
	Block.Coord = _Coord;
	Problem_BlockMissing.ApproxBlocks.add(Block);

	Problem_BlockMissing.ShortDescription = "{{{{PROBLEM_BLOCK_MISSING}}}} - " ^ _BlockName;
	Problem_BlockMissing.LongDescription = "{{{{PROBLEM_BLOCK_MISSING_LONG}}}}";
	Problem_BlockMissing.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_1}}}}", "", True));
	Problem_BlockMissing.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_2}}}}", "", False));
	Problem_BlockMissing.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_3}}}}", "", True));
	Problem_BlockMissing.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_4}}}}", "", False));
	Problem(Problem_BlockMissing);
}

Void Problem_MultilapTrack(SChWaypoint _Multilap) {
	declare SChProblem Problem_MultilapTrack;
	Problem_MultilapTrack.Name = "MULTILAP_TRACK";
	Problem_MultilapTrack.Waypoints.add(_Multilap);
	Problem_MultilapTrack.ShortDescription = "{{{{PROBLEM_MULTILAP_TRACK}}}}";
	Problem_MultilapTrack.LongDescription = "{{{{PROBLEM_MULTILAP_TRACK_LONG_CHECKPOINTLESS}}}}";
	Problem(Problem_MultilapTrack);
}

Void Problem_ItemMultilap(SChItem _Item) {
	declare SChProblem Problem_ItemMultilap;
	Problem_ItemMultilap.Name = "ITEM_MULTILAP";
	Problem_ItemMultilap.Items.add(_Item);
	Problem_ItemMultilap.ShortDescription = "{{{{PROBLEM_CANNOT_ADJUST_ONELAP}}}}";
	Problem_ItemMultilap.LongDescription = "{{{{PROBLEM_CANNOT_ADJUST_ONELAP_LONG_CHECKPOINTLESS}}}}";
	Problem_ItemMultilap.Solutions.add(Solution("{{{{PROBLEM_BLOCK_MISSING_SOLUTION_1}}}}", "", True));
	Problem(Problem_ItemMultilap);
}

Void Problem_NoCheckpoint() {
	declare SChProblem Problem_NoCheckpoint;
	Problem_NoCheckpoint.Name = "NO_CHECKPOINT";
	Problem_NoCheckpoint.ShortDescription = "{{{{PROBLEM_NO_CHECKPOINT}}}}";
	Problem_NoCheckpoint.LongDescription = "{{{{PROBLEM_NO_CHECKPOINT_LONG}}}}";
	Problem(Problem_NoCheckpoint);
}

Void Problem_CannotRemoveCheckpoint(SChWaypoint _Checkpoint) {
	declare SChProblem Problem_CannotRemoveCheckpoint;
	Problem_CannotRemoveCheckpoint.Name = "CANNOT_REMOVE_CHECKPOINT";
	Problem_CannotRemoveCheckpoint.Waypoints.add(_Checkpoint);
	Problem_CannotRemoveCheckpoint.ShortDescription = "{{{{PROBLEM_CANNOT_REMOVE_CHECKPOINT}}}}";
	Problem_CannotRemoveCheckpoint.LongDescription = "{{{{PROBLEM_CANNOT_REMOVE_CHECKPOINT_LONG}}}}";
	Problem_CannotRemoveCheckpoint.Solutions.add(Solution("{{{{PROBLEM_CANNOT_REMOVE_CHECKPOINT_SOLUTION_1}}}}", "", True));
	Problem(Problem_CannotRemoveCheckpoint);
}

***Main***
***
SetStatusStage("{{{{ANALYZING}}}}...");
SetStatusMessage("{{{{SEARCHING_ALL_MULTILAPS}}}}...");
declare Multilaps = GetMultilaps();
SetStatusMessage("{{{{SEARCHING_ALL_FINISHES}}}}...");
declare FinishLines = GetFinishLines();
SetStatusMessage("{{{{SEARCHING_MAP_INFO}}}}...");
declare MapInfo = GetMapInfo();
declare Environment = MapInfo.CollectionName;

SetStatusMessage("{{{{CONSIDERING_MULTILAP_TRACK}}}}...");

declare IsOneLapWithFinish = Multilaps.count == 1 && FinishLines.count > 0 && MapInfo.TMObjective_NbLaps == 1;
declare IsMultilap = Multilaps.count == 1 && !IsOneLapWithFinish;

if(IsMultilap) Problem_MultilapTrack(Multilaps[0]);

SetStatusStage("{{{{MODIFYING}}}}...");

if(IsOneLapWithFinish) {
	declare Multilap = Multilaps[0];
	if(Multilap.IsItem) Problem_ItemMultilap(Multilap.Item);
	else if(Multilap.IsBlock) {
		foreach(Relation, GetRelation_MultilapStartTwoway()[Environment]) {
			declare MultilapBlock = Relation[0];
			declare StartTwowayBlock = Relation[1];
			if(Multilap.Block.Name == MultilapBlock.Name) {
				declare Removed = RemoveSpecificBlock(Multilap.Block);
				if(Removed) {
					declare Block = PlaceBlock(StartTwowayBlock.Name, Multilap.Block.Coord, Multilap.Block.Direction);
					if(Block.Placed)
						SetStatusMessage(MultilapBlock.Name ^ " {{{{replaced_with}}}} " ^ StartTwowayBlock.Name ^ ".");
					else {
						Problem_BlockMissing(StartTwowayBlock.Name, Multilap.Block.Coord);
					}
				}
			}
		}
	}
	else {

	}
}

declare Checkpoints = GetCheckpoints();

if(Checkpoints.count == 0) Problem_NoCheckpoint();

for(i,0,Checkpoints.count-1) {
	declare Checkpoint = Checkpoints[i];

	if(Checkpoint.IsBlock) {
		foreach(Relation, GetRelation_CheckpointRoad()[Environment]) {
			declare CheckpointBlock = Relation[0];
			declare RoadBlock = Relation[1];
			
			if(Checkpoint.Block.Name == CheckpointBlock.Name) {
				declare Removed = RemoveSpecificBlock(Checkpoint.Block);
				if(Removed) {
					if(RoadBlock.Name != "") {
						declare Block = PlaceBlock(RoadBlock.Name, Checkpoint.Block.Coord + RoadBlock.Coord, ClockwiseDirection(Checkpoint.Block.Direction, RoadBlock.Direction));
						if(Block.Placed) {
							SetStatusMessage(CheckpointBlock.Name ^ " {{{{replaced_with}}}} " ^ RoadBlock.Name ^ ".");

							if(Checkpoint.Block.Direction == "North" || Checkpoint.Block.Direction == "South") {
								// Z check
								if(GetBlock(Checkpoint.Block.Coord + <0,0,1>).Name == RoadBlock.Name) {
									declare Placed = PlaceRoadBlocks(RoadBlock.Name, Checkpoint.Block.Coord, Checkpoint.Block.Coord + <0,0,1>);
									if(Placed) SetStatusMessage(RoadBlock.Name^": "^Checkpoint.Block.Coord^" {{{{connected_with}}}} "^(Checkpoint.Block.Coord+<0,0,1>)^".");
								}
								if(GetBlock(Checkpoint.Block.Coord + <0,0,-1>).Name == RoadBlock.Name) {
									declare Placed = PlaceRoadBlocks(RoadBlock.Name, Checkpoint.Block.Coord, Checkpoint.Block.Coord + <0,0,-1>);
									if(Placed) SetStatusMessage(RoadBlock.Name^": "^Checkpoint.Block.Coord^" {{{{connected_with}}}} "^(Checkpoint.Block.Coord+<0,0,-1>)^".");
								}
							}
							else if(Checkpoint.Block.Direction == "West" || Checkpoint.Block.Direction == "East") {
								// X check
								if(GetBlock(Checkpoint.Block.Coord + <1,0,0>).Name == RoadBlock.Name) {
									declare Placed = PlaceRoadBlocks(RoadBlock.Name, Checkpoint.Block.Coord, Checkpoint.Block.Coord + <1,0,0>);
									if(Placed) SetStatusMessage(RoadBlock.Name^": "^Checkpoint.Block.Coord^" {{{{connected_with}}}} "^(Checkpoint.Block.Coord+<1,0,0>)^".");
								}
								if(GetBlock(Checkpoint.Block.Coord + <-1,0,0>).Name == RoadBlock.Name) {
									declare Placed = PlaceRoadBlocks(RoadBlock.Name, Checkpoint.Block.Coord, Checkpoint.Block.Coord + <-1,0,0>);
									if(Placed) SetStatusMessage(RoadBlock.Name^": "^Checkpoint.Block.Coord^" {{{{connected_with}}}} "^(Checkpoint.Block.Coord+<-1,0,0>)^".");
								}
							}
						}
						else Problem_BlockMissing(RoadBlock.Name, Checkpoint.Block.Coord);
					}
				}
				else Problem_CannotRemoveCheckpoint(Checkpoint);
			}
		}
	}
	else if(Checkpoint.IsItem) {
		SetStatusMessage("{{{{CHECKPOINT_FOUND}}}} " ^ Checkpoint.Item.Position);
		declare Removed = RemoveItem(Checkpoint.Item);
		if(!Removed) Problem_CannotRemoveCheckpoint(Checkpoint);
	}
	
	SetStatusProgress((i+1.0)/(Checkpoints.count));

	yield;
}
***