declare SChMetadata Script;
declare SChProblem[] Problems;

declare SChProblem Solver_Problem;
declare Integer Solver_ProblemId;
declare Integer Solver_Solution;
declare Integer Solver_Point;
declare Boolean Solver_Success;

declare Integer RandomSeed;
declare Integer RandomProgression;

SResponse Request(Text _Command, Text[] _Arguments) {
	declare SResponse Response;

	Response.Time = Now;

	SendCustomEvent(_Command, _Arguments);

	declare Resp = False;
	while(!Resp) {
		foreach(Event,PendingEvents) {
			if(Event.Type == CMlScriptEvent::Type::PluginCustomEvent) {
				if(Event.CustomEventType == _Command^"_Response") {
					Response.Name = Event.CustomEventType;
					foreach(Data, Event.CustomEventData)
						Response.Values.add(Data);
					Resp = True;
				}
			}
		}
		yield;
	}

	Response.Time = Now - Response.Time;

	return Response;
}

//
/* Regular editor functions */
//

Void ComputeShadows() {
	declare Response = Request("Ch_ComputeShadows",[]);
}

Void RemoveAllBlocks() {
	declare Response = Request("Ch_RemoveAllBlocks", []);
}
 
Void RemoveAllTerrain() {
	declare Response = Request("Ch_RemoveAllTerrain", []);
}
 
Void RemoveAllOffZone() {
	declare Response = Request("Ch_RemoveAllOffZone", []);
}
 
Void RemoveAllObjects() {
	declare Response = Request("Ch_RemoveAllObjects", []);
}
 
Void RemoveAll() {
	declare Response = Request("Ch_RemoveAll", []);
}
 
Void RemoveAllBlocksAndTerrain() {
	declare Response = Request("Ch_RemoveAllBlocksAndTerrain", []);
}
 
Void PreloadAllBlocks() {
	declare Response = Request("Ch_PreloadAllBlocks", []);
}
 
Void PreloadAllItems() {
	declare Response = Request("Ch_PreloadAllItems", []);
}
 
Boolean CanPlaceBlock(Text _BlockName, Int3 _Coord, Text _Direction, Boolean _OnGround, Integer _VariantIndex) {
	declare Params = [_BlockName, _Coord^"", _Direction, _OnGround^"", _VariantIndex^""];
	declare Response = Request("Ch_CanPlaceBlock", Params);
	return Response.Values[0] == "True";
}
 
Boolean CanPlaceBlock_NoDestruction(Text _BlockName, Int3 _Coord, Text _Direction, Boolean _OnGround, Integer _VariantIndex) {
	declare Params = [_BlockName, _Coord^"", _Direction, _OnGround^"", _VariantIndex^""];
	declare Response = Request("Ch_CanPlaceBlock_NoDestruction", Params);
	return Response.Values[0] == "True";
}
 
SPlaceBlockResult PlaceBlock(Text _BlockName, Int3 _Coord, Text _Direction) {
	declare Params = [_BlockName, _Coord^"", _Direction];
	declare Response = Request("Ch_PlaceBlock", Params);

	declare SPlaceBlockResult Result;
	declare Success = Result.fromjson(Response.Values[0]);
	return Result;
}
 
SPlaceBlockResult PlaceBlock_NoDestruction(Text _BlockName, Int3 _Coord, Text _Direction) {
	declare Params = [_BlockName, _Coord^"", _Direction];
	declare Response = Request("Ch_PlaceBlock_NoDestruction", Params);

	declare SPlaceBlockResult Result;
	Result.Placed = Response.Values[0] == "True";
	declare Success = Result.Block.fromjson(Response.Values[1]);
	return Result;
}
 
Boolean CanPlaceRoadBlocks(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
	declare Params = [_BlockName, _StartCoord^"", _EndCoord^""];
	declare Response = Request("Ch_CanPlaceRoadBlocks", Params);
	return Response.Values[0] == "True";
}
 
Boolean PlaceRoadBlocks(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
	declare Params = [_BlockName, _StartCoord^"", _EndCoord^""];
	declare Response = Request("Ch_PlaceRoadBlocks", Params);
	return Response.Values[0] == "True";
}
 
Boolean CanPlaceTerrainBlocks(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
	declare Params = [_BlockName, _StartCoord^"", _EndCoord^""];
	declare Response = Request("Ch_CanPlaceTerrainBlocks", Params);
	return Response.Values[0] == "True";
}
 
Boolean PlaceTerrainBlocks(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
	declare Params = [_BlockName, _StartCoord^"", _EndCoord^""];
	declare Response = Request("Ch_PlaceTerrainBlocks", Params);
	return Response.Values[0] == "True";
}          
 
Boolean PlaceTerrainBlocks_NoDestruction(Text _BlockName, Int3 _StartCoord, Int3 _EndCoord) {
	declare Params = [_BlockName, _StartCoord^"", _EndCoord^""];
	declare Response = Request("Ch_PlaceTerrainBlocks_NoDestruction", Params);
	return Response.Values[0] == "True";
}

Boolean CanPlaceMacroblock(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_CanPlaceMacroblock", Params);
	return Response.Values[0] == "True";
}
 
Boolean PlaceMacroblock(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_PlaceMacroblock", Params);
	return Response.Values[0] == "True";
}
 
Boolean CanPlaceMacroblock_NoDestruction(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_CanPlaceMacroblock_NoDestruction", Params);
	return Response.Values[0] == "True";
}
 
Boolean PlaceMacroblock_NoDestruction(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_PlaceMacroblock_NoDestruction", Params);
	return Response.Values[0] == "True";
}
 
Boolean CanPlaceMacroblock_NoTerrain(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_CanPlaceMacroblock_NoTerrain", Params);
	return Response.Values[0] == "True";
}
 
Boolean PlaceMacroblock_NoTerrain(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_PlaceMacroblock_NoTerrain", Params);
	return Response.Values[0] == "True";
}
 
Boolean RemoveMacroblock(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_RemoveMacroblock", Params);
	return Response.Values[0] == "True";
}
 
Boolean RemoveMacroblock_NoTerrain(Text _MacroblockName, Int3 _Coord, Text _Direction) {
	declare Params = [_MacroblockName, _Coord^"", _Direction];
	declare Response = Request("Ch_RemoveMacroblock_NoTerrain", Params);
	return Response.Values[0] == "True";
}  
 
SChBlock GetBlock(Int3 _Coord) {
	declare Params = [_Coord^""];
	declare Response = Request("Ch_GetBlock", Params);
	declare SChBlock Block;
	declare JsonSuccess = Block.fromjson(Response.Values[0]);
	return Block;
}
 
Boolean RemoveBlock(Int3 _Coord) {
	declare Params = [_Coord^""];
	declare Response = Request("Ch_RemoveBlock", Params);
	return Response.Values[0] == "True";
}
 
Boolean RemoveTerrainBlocks(Int3 _StartCoord, Int3 _EndCoord) {
	declare Params = [_StartCoord^"", _EndCoord^""];
	declare Response = Request("Ch_RemoveTerrainBlocks", Params);
	return Response.Values[0] == "True";
}
 
Integer GetBlockGroundHeight(Text _BlockName, Integer _CoordX, Integer _CoordZ, Text _Direction) {
	declare Params = [_BlockName, _CoordX^"", _CoordZ^"", _Direction];
	declare Response = Request("Ch_GetBlockGroundHeight", Params);
	return TextLib::ToInteger(Response.Values[0]);
}
 
Integer GetGroundHeight(Integer _CoordX, Integer _CoordZ) {
	declare Params = [_CoordX^"", _CoordZ^""];
	declare Response = Request("Ch_GetGroundHeight", Params);
	return TextLib::ToInteger(Response.Values[0]);
}
 
SChBlock GetStartLineBlock() {
	declare Response = Request("Ch_GetStartLineBlock", []);
	declare SChBlock Block;
	declare JsonSuccess = Block.fromjson(Response.Values[0]);
	return Block;
}

// Due tend to crash the game on some (possibly heavy) maps
SChBlock[] GetBlocks() {
	declare Response = Request("Ch_GetBlocks", []);
	declare SChBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;
}

SChBlock[] GetTerrainBlocks() {
	declare Response = Request("Ch_GetTerrainBlocks", []);
	declare SChBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;  
}

SChBlock[] GetPureBlocks() {
	declare Response = Request("Ch_GetPureBlocks", []);
	declare SChBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;  
}

Boolean RemoveItem(SChItem _Item) {
	declare Params = [_Item.tojson()];
	declare Response = Request("Ch_RemoveItem", Params);
	return Response.Values[0] == "True";
}

//
/* Extensive functions */
//

SChMap GetMapInfo() {
	declare Response = Request("Ch_GetMapInfo", []);
	declare SChMap Map;
	declare JsonSuccess = Map.fromjson(Response.Values[0]);
	return Map;
}

SChMap GetOriginalMapInfo() {
	declare Response = Request("Ch_GetOriginalMapInfo", []);
	declare SChMap Map;
	declare JsonSuccess = Map.fromjson(Response.Values[0]);
	return Map;
}

Void Underground() {
	declare Response = Request("Ch_Underground", []);
}

Void Aboveground() {
	declare Response = Request("Ch_Aboveground", []);
}

Boolean PlaceGhostBlock(Text _BlockName, Int3 _Coord, Text _Direction) {
	declare Params = [_BlockName, _Coord^"", _Direction];
	declare Response = Request("Ch_PlaceGhostBlock", Params);
	return Response.Values[0] == "True";
}

SReplacementResult ReplaceBlock(SChBlock _Block, Text _ReplacementBlockName, Boolean _OppositeDirection) {
	declare Params = [_Block.tojson(),_ReplacementBlockName,_OppositeDirection^""];
	declare Response = Request("Ch_ReplaceBlock", Params);

	declare SReplacementResult Result;
	Result.Removed = (Response.Values[0] == "True");
	Result.Placed = (Response.Values[1] == "True");
	return Result;
}   

SReplacementResult ReplaceBlock(SChBlock _Block, Text _ReplacementBlockName) {
	return ReplaceBlock(_Block, _ReplacementBlockName, False);
}

Void ReplaceAllBlocks(Text _BlockName, Text _ReplacementBlockName) {
	declare Params = [_BlockName, _ReplacementBlockName];
	declare Response = Request("Ch_ReplaceAllBlocks", Params);
}

Boolean SwapBlock(SChBlock _Block1, SChBlock _Block2) {
	declare Params = [_Block1.tojson(), _Block1.tojson()];
	declare Response = Request("Ch_SwapBlock", Params);
	return Response.Values[0] == "True";
}

SChWaypoint[] GetStartLines() {
	declare Response = Request("Ch_GetStartLines", []);
	declare SChWaypoint[] Waypoints;
	declare JsonSuccess = Waypoints.fromjson(Response.Values[0]);
	return Waypoints;
}

SChWaypoint[] GetFinishLines() {
	declare Response = Request("Ch_GetFinishLines", []);
	declare SChWaypoint[] Waypoints;
	declare JsonSuccess = Waypoints.fromjson(Response.Values[0]);
	return Waypoints;
}

SChWaypoint[] GetCheckpoints() {
	declare Response = Request("Ch_GetCheckpoints", []);
	declare SChWaypoint[] Waypoints;
	declare JsonSuccess = Waypoints.fromjson(Response.Values[0]);
	return Waypoints;   
}

SChWaypoint[] GetMultilaps() {
	declare Response = Request("Ch_GetMultilaps", []);
	declare SChWaypoint[] Waypoints;
	declare JsonSuccess = Waypoints.fromjson(Response.Values[0]);
	return Waypoints;   
}

SChBlock[] GetStartLineBlocks() {
	declare Response = Request("Ch_GetStartLineBlocks", []);
	declare SChBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;
}

SChBlock[] GetFinishLineBlocks() {
	declare Response = Request("Ch_GetFinishLineBlocks", []);
	declare SChBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;
}

SChBlock[] GetCheckpointBlocks() {
	declare Response = Request("Ch_GetCheckpointBlocks", []);
	declare SChBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;   
}

SChBlock[] GetMultilapBlocks() {
	declare Response = Request("Ch_GetMultilapBlocks", []);
	declare SChBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;   
}

SChItem[] GetStartLineItems() {
	declare Response = Request("Ch_GetStartLineItems", []);
	declare SChItem[] Items;
	declare JsonSuccess = Items.fromjson(Response.Values[0]);
	return Items;
}

SChItem[] GetCheckpointItems() {
	declare Response = Request("Ch_GetCheckpointItems", []);
	declare SChItem[] Items;
	declare JsonSuccess = Items.fromjson(Response.Values[0]);
	return Items;
}

SChItem[] GetFinishLineItems() {
	declare Response = Request("Ch_GetFinishLineItems", []);
	declare SChItem[] Items;
	declare JsonSuccess = Items.fromjson(Response.Values[0]);
	return Items;
}

SChItem[] GetMultilapItems() {
	declare Response = Request("Ch_GetMultilapItems", []);
	declare SChItem[] Items;
	declare JsonSuccess = Items.fromjson(Response.Values[0]);
	return Items;
}

SChBlock[] GetFilteredBlocks(Text _BlockName) {
	declare Params = [_BlockName];
	declare Response = Request("Ch_GetFilteredBlocks", Params);
	declare SChBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;  
}

SChBlock[] MultipleBlocks(Int3 _Coord) {
	declare Params = [""^_Coord];
	declare Response = Request("Ch_MultipleBlocks", Params);
	declare SChBlock[] Blocks;
	declare JsonSuccess = Blocks.fromjson(Response.Values[0]);
	return Blocks;
}

Void UpdateAnchor(SChAnchor _Anchor) {
	declare Params = [_Anchor.tojson()];
	declare Response = Request("Ch_UpdateAnchor", Params);
}

Void LinkCheckpoints(SChAnchor[] _Checkpoints) {
	declare Params = [_Checkpoints.tojson()];
	declare Response = Request("Ch_LinkCheckpoints", Params);
}

Boolean IsSpecialBlock(Text _BlockName) {
	declare Params = [_BlockName];
	declare Response = Request("Ch_IsSpecialBlock", Params);
	return Response.Values[0] == "True";
}

Boolean DisableWaypoint(SChWaypoint _Waypoint) {
	declare Params = [_Waypoint.tojson()];
	declare Response = Request("Ch_DisableWaypoint", Params);
	return Response.Values[0] == "True";
}

Boolean RemoveSpecificBlock(SChBlock _Block) {
	declare Params = [_Block.tojson()];
	declare Response = Request("Ch_RemoveSpecificBlock", Params);
	return Response.Values[0] == "True";
}

Boolean Exists(SChBlock _Block) {
	declare Params = [_Block.tojson()];
	declare Response = Request("Ch_Exists", Params);
	return Response.Values[0] == "True";
}

Boolean Exists(SChItem _Item) {
	declare Params = [_Item.tojson()];
	declare Response = Request("Ch_Exists", Params);
	return Response.Values[0] == "True";
}

Boolean ExistsInRadius(SChBlock _Block, Real _Radius) {
	declare Params = [_Block.tojson(), _Radius^""];
	declare Response = Request("Ch_ExistsInRadius", Params);
	return Response.Values[0] == "True";
}

Boolean ExistsInRadius(SChItem _Item, Real _Radius) {
	declare Params = [_Item.tojson(), _Radius^""];
	declare Response = Request("Ch_ExistsInRadius", Params);
	return Response.Values[0] == "True";
}

Boolean ExistsInRadius(SChBlock _Block, Integer _Radius) {
	return ExistsInRadius(_Block, MathLib::ToReal(_Radius));
}

Boolean ExistsInRadius(SChItem _Item, Integer _Radius) {
	return ExistsInRadius(_Item, MathLib::ToReal(_Radius));
}

Integer Random(Integer _Min, Integer _Max) { // Consistent randomizer
	RandomProgression += 1;
	if(RandomSeed == 0) RandomSeed = GetOriginalMapInfo().CopperPrice;
	return MathLib::Rand(_Min, _Max, RandomSeed+RandomProgression);
}

Integer Random(Integer _Max) {
	return Random(0, _Max);
}

Real Random(Real _Min, Real _Max) { // Consistent randomizer
	RandomProgression += 1;
	if(RandomSeed == 0) RandomSeed = GetOriginalMapInfo().CopperPrice;
	return MathLib::Rand(_Min, _Max, RandomSeed+RandomProgression);
}

Real Random(Real _Max) {
	return Random(0.0, _Max);
}

Boolean Random() {
	return (Random(1) == 1);
}

Real Percentage() {
	return Random(1.0);
}

Boolean Chance(Real _Percentage) {
	return (Percentage() <= _Percentage);
}

Void Message(Text _Message) {
	declare Response = Request("Ch_Message",[_Message]);
}

Text OppositeDirection(Text _Direction) {
	if(_Direction == "North") return "South";
	if(_Direction == "South") return "North";
	if(_Direction == "West") return "East";
	if(_Direction == "East") return "West";
	return "";
}

Text ClockwiseDirection(Text _Direction, Integer _Amount) {
	declare Direction = _Direction;
	for(I,1,_Amount) {
		if(Direction == "North") Direction = "East";
		else if(Direction == "East") Direction = "South";
		else if(Direction == "South") Direction = "West";
		else if(Direction == "West") Direction = "North";
	}
	return Direction;
}

Text ClockwiseDirection(Text _Direction) {
	return ClockwiseDirection(_Direction, 1);
}

Text CounterClockwiseDirection(Text _Direction, Integer _Amount) {
	return ClockwiseDirection(_Direction, -_Amount);
}

Text CounterClockwiseDirection(Text _Direction) {
	return CounterClockwiseDirection(_Direction, 1);
}

//
/* Modifier appearance control */
//

Void SetStatusProgress(Real _Progress) {
	declare Response = Request("Ch_SetStatusProgress", [_Progress^""]);
	yield;
}

Void SetStatusMessage(Text _Message) {
	declare Response = Request("Ch_SetStatusMessage", [_Message]);
	yield;
}

Void SetStatusStage(Text _Stage) {
	declare Response = Request("Ch_SetStatusStage", [_Stage]);
	yield;
}

Void SetStatusColor(Vec3 _Color) {
	declare Response = Request("Ch_SetStatusColor", [_Color.X^" "^_Color.Y^" "^_Color.Z]);
	yield;
}

Void Focus(SChBlock _Block) {

}

Void Focus(Vec3 _Position) {
	
}

//
/* Modifier technical control */
//

Void Complete() { // Shouldn't be normally called
	declare Response = Request("Ch_Complete", []);
}

Void Solve() {
	declare Response = Request("Ch_Solve", [Solver_ProblemId^"", Solver_Success^""]);
}

Void Problem(SChProblem _Problem) {
	Problems.add(_Problem);

	if(_Problem.Solutions.count == 0) {
		SetStatusColor(<1.,0.,0.>);
		SetStatusProgress(1.);
		if(_Problem.ShortDescription == "")
			SetStatusStage("{{{{FATAL_PROBLEM}}}}");
		else
			SetStatusMessage("{{{{FATAL_PROBLEM}}}}: " ^ _Problem.ShortDescription); // Should be solved somewhen
	}
	else {
		SetStatusColor(<1.,.5,0.>);
		if(_Problem.ShortDescription == "")
			SetStatusStage("{{{{PROBLEM}}}}");
		else
			 SetStatusMessage("{{{{PROBLEM}}}}: " ^ _Problem.ShortDescription); // Should be solved somewhen
	}
	
	declare Response = Request("Ch_Problem", [_Problem.tojson()]);
	SetStatusColor(<1.,1.,1.>);
}

Void Problem() {
	declare SChProblem Problem;
	Problem.Name = "Unknown";
	Problem(Problem);
}

Void Problem_FromBase(SChProblem _Problem) {

}

SChSolution Solution(Text _Value, Text _AdditionalInfo, Boolean _IsInteractive) {
	declare SChSolution Solution;
	Solution.Value = _Value;
	Solution.AdditionalInfo = _AdditionalInfo;
	Solution.IsInteractive = _IsInteractive;
	return Solution;
}

Void Note(SChNote _Note) {
	
}

Void Chill() {
	yield;
}

Void ShowEditor() {
	declare Response = Request("Ch_ShowEditor", []);
}

Void HideEditor() {
	declare Response = Request("Ch_HideEditor", []);
}

Text Event_MapModified() {
	declare Response = Request("Ch_Event_MapModified", []);
	return Response.Values[0];
}

Boolean SetCursorBlock(Text _BlockName) {
	declare Response = Request("Ch_SetCursorBlock", [_BlockName]);
	return Response.Values[0] == "True";
}

SChRelationBlock[][][Text] GetRelation_StartFinish() {
	declare File = Http.CreateGet("file://Media/Relations/StartFinish.json");
	wait(File.IsCompleted);
	declare SChRelationBlock[][][Text] Relation;
	declare JsonSuccess = Relation.fromjson(File.Result);
	return Relation;
}

SChRelationBlock[][][Text] GetRelation_StartMultilap() {
	declare File = Http.CreateGet("file://Media/Relations/StartMultilap.json");
	wait(File.IsCompleted);
	declare SChRelationBlock[][][Text] Relation;
	declare JsonSuccess = Relation.fromjson(File.Result);
	return Relation;
}

SChRelationBlock[][][Text] GetRelation_FinishCheckpoint() {
	declare File = Http.CreateGet("file://Media/Relations/FinishCheckpoint.json");
	wait(File.IsCompleted);
	declare SChRelationBlock[][][Text] Relation;
	declare JsonSuccess = Relation.fromjson(File.Result);
	return Relation;
}

SChRelationBlock[][][Text] GetRelation_MultilapStartTwoway() {
	declare File = Http.CreateGet("file://Media/Relations/MultilapStartTwoway.json");
	wait(File.IsCompleted);
	declare SChRelationBlock[][][Text] Relation;
	declare JsonSuccess = Relation.fromjson(File.Result);
	return Relation;
}

SChRelationBlock[][][Text] GetRelation_MultilapFinishTwoway() {
	declare File = Http.CreateGet("file://Media/Relations/MultilapFinishTwoway.json");
	wait(File.IsCompleted);
	declare SChRelationBlock[][][Text] Relation;
	declare JsonSuccess = Relation.fromjson(File.Result);
	return Relation;
}

SChApproxBlock[][][Text] GetRelation_StartTwowayFinishTwoway() {
	return [];
}

SChRelationBlock[][][Text] GetRelation_CheckpointRoad() {
	declare File = Http.CreateGet("file://Media/Relations/CheckpointRoad.json");
	wait(File.IsCompleted);
	declare SChRelationBlock[][][Text] Relation;
	declare JsonSuccess = Relation.fromjson(File.Result);
	return Relation;
}

//
/* Pre-made problem functions */
//